Search.setIndex({"docnames": ["index", "merlion", "merlion.dashboard", "merlion.evaluate", "merlion.models", "merlion.models.anomaly", "merlion.models.anomaly.change_point", "merlion.models.anomaly.forecast_based", "merlion.models.automl", "merlion.models.ensemble", "merlion.models.forecast", "merlion.models.utils", "merlion.post_process", "merlion.spark", "merlion.transform", "merlion.utils", "ts_datasets", "ts_datasets.anomaly", "ts_datasets.forecast", "tutorials", "tutorials/CustomDataset", "tutorials/TimeSeries", "tutorials/advanced/1_AutoSARIMA_forecasting_tutorial", "tutorials/advanced/2_ForecastInvertPOC", "tutorials/anomaly/0_AnomalyIntro", "tutorials/anomaly/1_AnomalyFeatures", "tutorials/anomaly/2_AnomalyMultivariate", "tutorials/anomaly/3_AnomalyNewModel", "tutorials/forecast/0_ForecastIntro", "tutorials/forecast/1_ForecastFeatures", "tutorials/forecast/2_ForecastMultivariate", "tutorials/forecast/3_ForecastExogenous", "tutorials/forecast/4_ForecastNewModel"], "filenames": ["index.rst", "merlion.rst", "merlion.dashboard.rst", "merlion.evaluate.rst", "merlion.models.rst", "merlion.models.anomaly.rst", "merlion.models.anomaly.change_point.rst", "merlion.models.anomaly.forecast_based.rst", "merlion.models.automl.rst", "merlion.models.ensemble.rst", "merlion.models.forecast.rst", "merlion.models.utils.rst", "merlion.post_process.rst", "merlion.spark.rst", "merlion.transform.rst", "merlion.utils.rst", "ts_datasets.rst", "ts_datasets.anomaly.rst", "ts_datasets.forecast.rst", "tutorials.rst", "tutorials/CustomDataset.ipynb", "tutorials/TimeSeries.ipynb", "tutorials/advanced/1_AutoSARIMA_forecasting_tutorial.ipynb", "tutorials/advanced/2_ForecastInvertPOC.ipynb", "tutorials/anomaly/0_AnomalyIntro.ipynb", "tutorials/anomaly/1_AnomalyFeatures.ipynb", "tutorials/anomaly/2_AnomalyMultivariate.ipynb", "tutorials/anomaly/3_AnomalyNewModel.ipynb", "tutorials/forecast/0_ForecastIntro.ipynb", "tutorials/forecast/1_ForecastFeatures.ipynb", "tutorials/forecast/2_ForecastMultivariate.ipynb", "tutorials/forecast/3_ForecastExogenous.ipynb", "tutorials/forecast/4_ForecastNewModel.ipynb"], "titles": ["Welcome to Merlion\u2019s documentation!", "merlion: Time Series Intelligence", "merlion.dashboard package", "merlion.evaluate package", "merlion.models package", "merlion.models.anomaly package", "merlion.models.anomaly.change_point package", "merlion.models.anomaly.forecast_based package", "merlion.models.automl package", "merlion.models.ensemble package", "merlion.models.forecast package", "merlion.models.utils package", "merlion.post_process package", "merlion.spark package", "merlion.transform package", "merlion.utils package", "ts_datasets: Easy Data Loading", "ts_datasets.anomaly package", "ts_datasets.forecast package", "Tutorials &amp; Example Code", "Loading Custom Datasets", "Merlion\u2019s Data Format", "Tutorial for AutoSARIMA Forecasting Model", "Proof of Concept: Inverse Transforms for Forecasters", "A Gentle Introduction to Anomaly Detection in Merlion", "How to Use Anomaly Detectors in Merlion", "Multivariate Time Series Anomaly Detection", "Adding New Anomaly Detection Models", "A Gentle Introduction to Forecasting in Merlion", "How to Use Forecasters in Merlion", "Multivariate Time Series Forecasting", "Forecasting With Exogenous Regressors", "Adding a New Forecasting Model"], "terms": {"i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "python": [0, 1, 2, 4, 5, 16, 20], "librari": [0, 1, 21], "time": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32], "seri": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32], "intellig": 0, "It": [0, 2, 3, 5, 10, 14, 17, 20, 25, 29, 32], "featur": [0, 1, 2, 10, 14, 15, 16, 17, 20, 25, 29, 31], "unifi": [0, 1], "interfac": [0, 1, 5, 6, 10], "mani": [0, 1, 3, 4, 5, 7, 12, 13, 17, 18, 20, 27, 29, 31, 32], "commonli": 0, "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 30, 31, 32], "model": [0, 1, 2, 3, 12, 13, 15, 17, 19, 20, 23, 24, 28, 31], "dataset": [0, 1, 2, 10, 11, 17, 18, 19, 24, 26, 27, 28, 30, 31, 32], "forecast": [0, 1, 2, 4, 5, 6, 7, 13, 15, 16, 25], "anomali": [0, 1, 2, 4, 10, 12, 13, 14, 16], "detect": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 22, 25, 30, 32], "chang": [0, 1, 2, 4, 5, 6, 10, 14, 15, 17, 31], "point": [0, 1, 3, 4, 5, 6, 7, 10, 12, 14, 15, 22, 25, 29], "both": [0, 1, 2, 5, 7, 10, 11, 14, 21, 22, 25, 27, 29, 31], "univari": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 20, 21, 26, 27, 29, 30, 31, 32], "multivari": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 31], "along": [0, 5, 14], "standard": [0, 1, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 19, 26, 27, 29, 30, 32], "pre": [0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 22, 25, 27, 29, 32], "process": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 25, 26, 27, 29, 31, 32], "post": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 19, 25, 26, 32], "layer": [0, 1, 5, 8], "ha": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 20, 22, 24, 25, 27, 29, 31], "sever": [0, 5, 7], "modul": 0, "improv": [0, 5, 6, 10, 31], "eas": 0, "includ": [0, 1, 2, 3, 4, 5, 6, 7, 10, 12, 14, 15, 17, 18, 25, 27, 29, 31], "visual": [0, 1, 2, 19, 20, 22, 24, 28], "score": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 25, 26, 27, 32], "calibr": [0, 1, 4, 5, 6, 7, 9, 10, 25, 26, 27], "interpet": 0, "automl": [0, 1, 4, 11, 22], "hyperparamet": [0, 2, 4, 5, 8, 10, 25, 29], "tune": [0, 7, 10], "select": [0, 1, 2, 5, 8, 9, 17, 22, 29, 30], "ensembl": [0, 1, 4, 10, 25, 29, 30], "also": [0, 2, 4, 5, 7, 8, 10, 12, 14, 15, 20, 21, 24, 25, 26, 28, 29, 30, 31], "provid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 20, 21, 22, 25, 27, 29, 31, 32], "uniqu": [0, 15], "evalu": [0, 1, 2, 5, 8, 9, 12, 15, 19, 22, 23, 24, 28, 31], "framework": [0, 3, 10], "simul": [0, 1, 3, 7, 10, 19, 26, 30], "live": [0, 1, 3, 19, 26, 30], "deploy": [0, 1, 2, 3, 19, 26, 30], "re": [0, 2, 3, 12, 25, 29, 30], "train": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19, 20, 23, 24, 27, 28, 31, 32], "product": [0, 15], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "aim": 0, "engin": 0, "research": 0, "one": [0, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 18, 20, 21, 25, 27, 29, 31, 32], "stop": 0, "solut": 0, "rapidli": 0, "develop": [0, 29], "specif": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 14, 15, 16, 17, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32], "need": [0, 2, 4, 5, 7, 9, 10, 15, 16, 20, 25, 32], "benchmark": [0, 3, 5, 16, 17, 20, 24], "them": [0, 4, 5, 6, 7, 9, 12, 13, 17, 22, 25, 29, 31], "across": [0, 10], "multipl": [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 32], "consist": [0, 7, 10, 20, 21], "two": [0, 4, 5, 10, 14, 15, 17, 21, 25, 29, 30], "sub": [0, 1, 3, 10, 15, 16, 21], "packag": [0, 1, 16], "implement": [0, 1, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 27, 32], "core": [0, 4, 15, 16, 21], "ts_dataset": [0, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "loader": [0, 16, 17, 18, 20, 24, 28], "These": [0, 1, 4, 5, 6, 7, 12, 13, 17, 20, 21, 29], "load": [0, 1, 2, 4, 5, 10, 17, 18, 19, 21, 26, 30], "panda": [0, 1, 4, 6, 8, 11, 13, 15, 16, 17, 20, 21, 22, 23, 25, 27, 29, 32], "datafram": [0, 1, 5, 7, 8, 10, 11, 13, 15, 16, 17, 21, 25, 27, 29, 32], "accompani": [0, 15], "metadata": [0, 16, 17, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 32], "you": [0, 2, 3, 4, 7, 8, 9, 10, 14, 15, 16, 17, 18, 20, 21, 25, 27, 29, 30, 32], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "from": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "pypi": 0, "call": [0, 2, 4, 8, 10, 13, 14, 15, 16, 17, 20, 21, 23, 25, 26, 27, 29, 30], "pip": [0, 16], "salesforc": 0, "mai": [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18, 21, 25, 26, 27, 29, 30, 31, 32], "sourc": [0, 17, 18], "clone": 0, "repo": [0, 21], "e": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 30, 31], "edit": [0, 4, 16, 17, 18], "mode": [0, 8, 16, 17, 18], "addit": [0, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 25, 29, 31], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 25, 27, 29, 31], "depend": [0, 10, 29], "via": [0, 13, 15, 21], "all": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32], "individu": [0, 5, 9, 14, 15, 16, 20, 21, 25, 26, 29], "dashboard": [0, 1], "gui": [0, 1, 2], "spark": [0, 1], "distribut": [0, 1, 5, 6, 7, 10, 12, 13, 14, 15], "comput": [0, 1, 3, 5, 7, 8, 9, 10, 13, 14, 15, 25, 27, 28, 29, 32], "backend": 0, "pyspark": [0, 1, 13], "deep": [0, 5, 15], "learn": [0, 5, 10, 12], "To": [0, 2, 4, 10, 24, 26, 29, 30, 31], "must": [0, 4, 5, 6, 7, 8, 10, 13, 14, 17, 18, 27, 29, 30, 32], "flag": [0, 17, 18], "don": [0, 17, 18, 20, 29], "t": [0, 2, 3, 4, 5, 7, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 27, 29, 31, 32], "want": [0, 2, 3, 5, 8, 10, 14, 15, 17, 20, 25, 27, 29, 30], "manual": [0, 4, 5, 11, 13, 26], "specifi": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 25, 27, 29, 30, 31], "root": [0, 3, 11, 16, 17, 18, 20], "directori": [0, 2, 4, 9, 16, 17, 18, 20, 25, 29, 32], "everi": [0, 3, 4, 5, 8, 10, 14, 26, 29, 32], "when": [0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 21, 25, 27, 29], "initi": [0, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 19, 21, 24, 27, 28, 32], "its": [0, 1, 2, 3, 4, 5, 7, 10, 13, 15, 21, 24, 25, 26, 27, 28, 29, 30], "note": [0, 2, 3, 4, 5, 6, 7, 9, 10, 14, 15, 16, 17, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 10, 12, 14, 15, 16, 17, 20, 21, 25, 27, 29, 32], "extern": 0, "some": [0, 1, 2, 3, 4, 5, 7, 9, 10, 12, 16, 20, 21, 25, 26, 27, 29, 31, 32], "our": [0, 2, 3, 20, 21, 25, 27, 29, 31, 32], "openmp": 0, "If": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 27, 29, 32], "conda": 0, "pleas": [0, 10, 15, 16, 17, 18, 21], "c": [0, 3, 15, 17, 22, 23, 25, 27, 29, 32], "forg": 0, "lightgbm": [0, 10], "befor": [0, 3, 4, 5, 6, 7, 9, 10, 14, 15, 20, 25, 27, 31, 32], "ensur": [0, 1, 4, 7, 9, 10, 15, 29], "configur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 22, 25, 27, 29], "work": [0, 2, 4, 5, 6, 8, 9, 10, 15, 20, 21, 25, 26, 27, 29, 30], "your": [0, 2, 8, 10, 15, 20, 21, 27, 32], "environ": 0, "mac": 0, "homebrew": 0, "brew": 0, "libomp": 0, "so": [0, 2, 5, 6, 7, 10, 15, 17, 21, 22, 25, 27, 29, 30, 31, 32], "libari": 0, "avail": [0, 12, 14, 17, 29], "relev": [0, 4, 5, 6, 7, 8, 10, 20, 31], "lgbmforecast": [0, 10], "which": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32], "part": [0, 14, 15, 27, 32], "defaultforecast": [0, 1, 4, 28, 30], "have": [0, 1, 2, 3, 4, 5, 7, 10, 12, 13, 14, 15, 16, 17, 20, 21, 25, 29, 31, 32], "java": [0, 5], "kit": 0, "jdk": 0, "For": [0, 3, 4, 5, 8, 10, 12, 13, 14, 15, 16, 17, 18, 21, 25, 26, 27, 29, 30, 31, 32], "ubuntu": 0, "sudo": 0, "apt": 0, "openjdk": 0, "11": [0, 3, 17, 20, 21, 25, 27, 29, 31, 32], "o": [0, 15, 20, 21, 25, 29, 31], "tap": 0, "adoptopenjdk": 0, "cask": 0, "adoptopenjdk11": 0, "found": [0, 5, 11, 17, 18], "path": [0, 13, 20, 21, 25, 29, 31], "java_hom": 0, "variabl": [0, 1, 2, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 20, 21, 27, 30, 31, 32], "set": [0, 2, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 31, 32], "randomcutforest": [0, 5], "defaultdetector": [0, 1, 4, 24, 26], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 27, 29, 30, 31, 32], "easiest": [0, 16], "wai": [0, 1, 2, 4, 8, 14, 15, 16, 17, 21, 25, 26, 29], "web": 0, "base": [0, 1, 6, 11, 15, 17, 18, 19, 21, 23, 27, 29, 30], "great": 0, "quickli": [0, 1], "experi": [0, 1], "own": [0, 1, 4, 7, 15], "custom": [0, 3, 8, 16, 17, 18, 19, 31], "m": [0, 1, 2, 3, 11, 13, 14, 15, 21], "command": [0, 2], "line": [0, 5, 7, 22, 25, 27, 29, 32], "view": 0, "http": [0, 2, 3, 5, 7, 10, 11, 17, 18], "localhost": [0, 2], "8050": [0, 2], "code": [0, 5, 7, 15, 17, 22], "resourc": 0, "we": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "recommend": [0, 5, 6, 10], "link": [0, 1, 2], "tutori": [0, 1, 15, 16, 17, 18, 26, 30, 31], "after": [0, 2, 3, 4, 5, 6, 9, 10, 14, 15, 17, 27], "should": [0, 2, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 25, 27, 29, 31], "read": [0, 13, 15, 16, 27, 32], "more": [0, 1, 2, 3, 4, 7, 9, 10, 11, 12, 14, 17, 18, 20, 21, 25, 27, 29, 31, 32], "detail": [0, 3, 4, 5, 9, 10, 15, 17, 25, 27, 29, 32], "about": [0, 6, 7, 10, 31, 32], "main": [0, 5, 30], "structur": [0, 25, 29], "repres": [0, 4, 5, 6, 8, 9, 10, 13, 15, 16, 17, 25, 29], "here": [0, 3, 4, 5, 7, 17, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32], "subpackag": 0, "submodul": 0, "plot": [0, 5, 6, 7, 10, 22, 23, 24, 25, 27, 29, 32], "easi": [0, 31], "exampl": [0, 1, 4, 5, 8, 13, 14, 15, 17, 18, 20, 21, 22, 25, 29, 31], "basic": [0, 2, 12, 32], "advanc": [0, 20, 22], "index": [0, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 31, 32], "search": [0, 1, 4], "page": 0, "support": [1, 2, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 20, 27, 29, 31], "kei": [1, 3, 4, 5, 8, 14, 15, 16, 17, 23, 25, 29], "each": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32], "associ": [1, 6, 10, 14], "A": [1, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 19, 25, 26, 29, 30], "under": [1, 20, 25, 29], "singl": [1, 2, 4, 6, 9, 10, 12, 13, 14, 15, 17, 18, 20, 25, 27, 29], "share": [1, 25, 29], "special": [1, 4, 5, 6, 25], "default": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 19, 21, 24, 25, 27, 28, 31, 32], "ar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32], "good": [1, 8], "get": [1, 3, 7, 10, 14, 15, 16, 17, 18, 21, 25, 26, 27, 29, 30, 31, 32], "start": [1, 3, 6, 10, 12, 13, 14, 15, 16, 17, 18, 21, 25, 29, 31], "change_point": [1, 4, 5], "those": [1, 7, 9, 10, 15, 17, 18, 21, 29], "exogen": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 19], "regressor": [1, 4, 8, 10, 19], "forecast_bas": [1, 4, 5, 25, 32], "adapt": [1, 7, 25, 32], "residu": [1, 5, 7, 32], "between": [1, 4, 5, 7, 10, 14, 15, 20, 21, 25, 32], "predict": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "true": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32], "valu": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "timestamp": [1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27, 29, 31, 32], "autom": [1, 3, 9, 15, 17], "variou": [1, 4, 10, 11, 13, 15, 31], "app": [1, 2], "new": [1, 3, 5, 8, 10, 12, 15, 17, 19, 21, 25, 29], "api": [1, 13, 15, 16, 21, 25, 26, 27, 29, 30, 31, 32], "integr": [1, 7, 10, 13], "run": [1, 5, 11, 13, 19, 22, 23, 25, 29, 31], "infer": [1, 5, 13, 15, 19, 31], "parallel": [1, 4, 5, 11, 13], "transform": [1, 4, 5, 6, 7, 8, 9, 10, 12, 15, 19, 25, 27, 29, 30, 32], "analysi": [1, 17], "callabl": [1, 4, 9, 12, 14, 15], "object": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 21, 25, 29], "input": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 32], "post_process": [1, 3, 5, 25, 26, 27, 32], "rule": [1, 3, 4, 5, 6, 7, 9, 10, 12, 15, 17, 19, 25, 32], "appli": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 14, 15, 25, 27, 31], "output": [1, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 25], "current": [1, 5, 6, 12, 13, 14, 17, 18, 31], "return": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 25, 26, 27, 29, 32], "interpret": [1, 12, 25, 27], "z": [1, 5, 6, 7, 10, 12, 14, 25, 27, 32], "deviat": [1, 5, 6, 14, 26, 27], "normal": [1, 4, 5, 6, 12, 15, 23, 27, 31, 32], "random": [1, 5, 10, 14, 15, 25], "": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "threshold": [1, 2, 4, 5, 6, 7, 9, 10, 25, 26, 27, 32], "reduc": [1, 15, 25], "noisi": [1, 25], "an": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "filter": [1, 5, 6, 7, 12, 27, 32], "sequenc": [1, 3, 4, 5, 6, 7, 8, 10, 11, 15, 18, 23, 26, 27], "metric": [1, 2, 3, 4, 5, 7, 9, 10, 12, 17, 21, 25, 26, 27, 29, 30, 32], "pipelin": [1, 29], "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 20, 21, 25, 26, 27, 29, 31, 32], "task": [1, 3, 7, 13, 31], "util": [1, 3, 4, 5, 6, 10, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "timeseri": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "class": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 24, 25, 28, 29], "resampl": [1, 7, 9, 10, 21, 23, 29, 30, 31], "function": [1, 3, 4, 6, 7, 10, 11, 12, 13, 15], "bayesian": [1, 6, 8, 15], "conjug": [1, 6, 15], "prior": [1, 6, 7, 10, 15, 31], "reconcili": [1, 13, 15], "hierarch": [1, 13, 15], "time_seri": [1, 4, 5, 6, 7, 10, 12, 14, 16, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32], "univariatetimeseri": [1, 3, 5, 8, 10, 14, 15, 19, 32], "notabl": [1, 15], "transpar": [1, 15, 21, 25, 29], "inter": [1, 4, 6, 7, 10], "oper": [1, 5, 14, 25], "respect": [1, 20], "check": [1, 2, 15], "how": [1, 5, 6, 9, 10, 13, 15, 18, 19, 20, 21, 22, 27, 31, 32], "doc": [1, 10, 15, 16, 21, 25, 27, 29, 32], "abov": [1, 2, 3, 20, 25, 27, 29, 32], "full": [1, 2, 4, 5, 7, 10, 15, 19, 25, 27, 29, 32], "list": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 20, 21, 32], "dbl": [1, 4], "windstat": [1, 4, 25, 26], "isolation_forest": [1, 4, 25], "random_cut_forest": [1, 4], "spectral_residu": [1, 4], "stat_threshold": [1, 4], "zm": [1, 4, 26], "autoencod": [1, 4], "vae": [1, 4], "dagmm": [1, 4], "lstm_ed": [1, 4], "deep_point_anomaly_detector": [1, 4], "bocpd": [1, 4, 5], "arima": [1, 2, 4, 5, 11, 29, 30], "sarima": [1, 4, 5, 8, 11, 22, 32], "et": [1, 4, 5, 8, 13, 15], "prophet": [1, 4, 5, 8, 23, 25, 29, 31], "lstm": [1, 4, 5], "mse": [1, 3, 4, 5, 9, 10, 29], "sklearn_bas": [1, 4], "smoother": [1, 4, 7, 29], "vector_ar": [1, 4], "tree": [1, 4, 5, 15, 18], "combin": [1, 4, 5, 8, 25, 26, 27, 29, 30], "season": [1, 3, 4, 5, 7, 10, 11, 17, 20, 22, 23, 25, 29], "autoet": [1, 2, 4, 20], "autoprophet": [1, 4], "autosarima": [1, 4, 19], "rolling_window_dataset": [1, 4], "autosarima_util": [1, 4], "defaultdetectorconfig": [1, 4, 24], "config_class": [1, 3, 4, 5, 6, 7, 8, 9, 10, 27, 32], "granular": [1, 4, 7, 10, 14, 15, 18, 29, 30], "reset": [1, 4, 5, 9, 29], "defaultforecasterconfig": [1, 4, 28], "supports_exog": [1, 4, 8, 10], "factori": [1, 9, 25, 26, 29, 30], "modelfactori": [1, 4, 25, 26, 29, 30], "get_model_class": [1, 4], "creat": [1, 2, 4, 5, 8, 9, 12, 14, 15, 20, 21, 25, 26, 27, 29, 30, 32], "load_byt": [1, 4], "instantiate_or_copy_model": [1, 4], "config": [1, 3, 4, 5, 6, 7, 8, 9, 10, 19, 23, 25, 26, 29, 30, 31], "filenam": [1, 4, 16, 17, 18], "dim": [1, 4, 5, 11, 15, 25, 26, 29, 30, 32], "to_dict": [1, 3, 4, 5, 9, 12, 14, 15], "from_dict": [1, 4, 5, 9, 12, 14, 15], "get_unused_kwarg": [1, 4], "normalizingconfig": [1, 4, 5], "full_transform": [1, 4, 5], "modelbas": [1, 3, 4, 5, 8, 9, 10], "train_data": [1, 4, 5, 6, 7, 8, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "base_model": [1, 4], "require_even_sampl": [1, 4, 5, 6, 8, 9, 10, 27, 32], "require_univari": [1, 4, 5, 6, 8, 9, 10, 27], "auto_align": [1, 4], "timedelta": [1, 4, 5, 14, 15, 29], "last_train_tim": [1, 4, 5, 6], "train_pre_process": [1, 4, 5, 6, 9, 10], "transform_time_seri": [1, 4], "train_post_process": [1, 4, 5, 7, 10], "save": [1, 2, 4, 5, 9, 10, 13, 19, 20], "to_byt": [1, 4, 9], "from_byt": [1, 4], "multipletimeseriesmodelmixin": [1, 4, 5], "train_multipl": [1, 4, 5], "layeredmodelconfig": [1, 4, 8], "layeredmodel": [1, 4, 8, 9], "layereddetector": [1, 4], "get_anomaly_scor": [1, 4, 5, 6, 7, 25, 27, 32], "layeredforecast": [1, 4], "layeredforecastingdetector": [1, 4], "pandas_udf": 1, "bound": [1, 3], "moving_averag": [1, 23, 25], "anom": [1, 5, 7], "data_io": 1, "ht": [1, 13], "ts_gener": 1, "conj_prior": [1, 6], "istat": 1, "plot_anom": [1, 24, 25, 27], "ax": [1, 5, 7, 10, 22, 23, 24, 25, 27, 28, 29, 32], "anomaly_label": [1, 3, 4, 5, 7, 12, 24, 25, 27], "pink": 1, "window": [1, 5, 10, 11, 12, 14, 15, 17, 21, 25, 26, 30, 31], "matplotlib": [1, 5, 7, 10, 22, 23, 24, 25, 27, 28, 29, 32], "plot_anoms_plotli": 1, "fig": [1, 5, 7, 10, 22, 23, 24, 25, 27, 28, 29, 32], "plotli": [1, 5, 7, 10], "figur": [1, 2, 5, 6, 7, 10, 22, 23, 25, 27, 29, 32], "y": [1, 3, 11, 12, 14, 15, 29, 31, 32], "none": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 23, 25, 27, 29, 30, 32], "yhat": 1, "yhat_lb": 1, "yhat_ub": 1, "y_prev": 1, "yhat_prev": 1, "yhat_prev_lb": 1, "yhat_prev_ub": 1, "yhat_color": 1, "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 27, 31], "lower": [1, 3, 6, 10, 12, 14, 25, 28], "uncertainti": [1, 6, 7, 10, 15, 29, 32], "estim": [1, 5, 6, 7, 10, 11, 15, 29, 32], "upper": [1, 3, 14], "portion": [1, 14, 15, 21], "preced": [1, 4, 5, 6, 7, 10, 14], "str": [1, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17, 18], "color": [1, 5, 7], "properti": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 27, 32], "t0": [1, 5, 15, 21], "first": [1, 2, 5, 10, 13, 14, 15, 17, 18, 20, 21, 24, 25, 27, 29, 31, 32], "being": [1, 3, 4, 6, 7, 8, 10, 13, 17, 21], "tf": [1, 5, 15, 21], "final": [1, 2, 4, 5, 10, 15, 17, 24, 27, 28], "t_split": 1, "split": [1, 2, 10, 14, 15, 16, 17, 22, 24, 25, 27, 28, 29, 31, 32], "test": [1, 2, 3, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32], "get_i": 1, "actual": [1, 3, 4, 5, 8, 9, 10, 14, 15, 20, 21, 22, 27, 29, 30, 31, 32], "get_yhat": 1, "get_yhat_iqr": 1, "iqr": [1, 4, 10], "titl": 1, "metric_nam": [1, 25, 29], "figsiz": [1, 5, 7, 10, 22, 23, 25, 27, 29, 32], "1000": [1, 5, 6, 7, 9, 10, 21, 25], "600": [1, 5, 7, 10, 20], "label_alia": 1, "name": [1, 3, 4, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 21, 23, 25, 26, 29, 32], "axi": [1, 7, 10, 15], "size": [1, 5, 7, 8, 10, 11, 12, 14, 15, 17, 25], "pixel": [1, 5, 7, 10], "add": [1, 5, 7, 8, 10, 13, 15, 20, 27, 31, 32], "dict": [1, 3, 4, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 25, 27, 30], "map": [1, 5, 8, 10, 12, 14, 15], "entiti": 1, "y_hat": 1, "label": [1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 16, 17, 18, 23, 25, 26, 27, 32], "plot_plotli": 1, "mtsfigur": 1, "param": [1, 4, 5, 10, 14, 15, 22, 27], "conveni": [2, 4], "launch": 2, "type": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 25, 26, 29, 30, 31, 32], "dash": [2, 25, 27, 32], "open": [2, 18, 25, 29], "folder": 2, "home": 2, "analyz": [2, 17], "three": [2, 14, 15, 17, 25, 29], "tab": 2, "file": [2, 4, 11, 13, 15, 17, 18, 20, 25, 29, 32], "manag": [2, 5], "upload": 2, "store": [2, 4, 5, 13, 16, 17, 18, 20, 25, 29, 31, 32], "statist": [2, 3, 5, 8, 10, 11, 15], "download": [2, 16, 17], "particular": [2, 6, 10, 13, 14, 20, 25, 29, 31], "click": 2, "drag": 2, "drop": [2, 5, 15], "design": [2, 5], "docker": 2, "doesn": [2, 13, 14, 20, 29, 32], "allow": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 17, 25, 29, 30], "local": [2, 5, 10, 27, 32], "directli": [2, 4, 8, 10, 15, 17, 21, 25, 29], "machin": [2, 17], "copi": [2, 15, 21], "csv": [2, 13, 15, 17, 18, 20, 21, 24, 25, 27, 31], "format": [2, 4, 10, 11, 13, 17, 18, 19, 29], "where": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 25, 27, 29, 31], "column": [2, 7, 10, 13, 15, 16, 17, 18, 20, 21, 25, 27, 31, 32], "either": [2, 4, 6, 7, 8, 10, 14, 15, 16, 17, 20, 21, 26], "integ": [2, 7, 10, 13, 15, 21], "unix": [2, 15, 20, 21, 29], "millisecond": [2, 15, 21], "datetim": [2, 15, 21, 32], "string": [2, 5, 7, 10, 15, 20], "g": [2, 3, 4, 5, 7, 8, 9, 10, 15, 16, 17, 18, 22, 25, 26, 30], "1970": [2, 15, 20, 32], "01": [2, 5, 6, 11, 14, 20, 21, 25, 26, 30, 31, 32], "00": [2, 5, 15, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "other": [2, 4, 8, 10, 14, 15, 25, 27, 29, 32], "button": 2, "show": [2, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32], "right": [2, 3, 5, 15, 21], "hand": 2, "side": [2, 14], "length": [2, 3, 5, 7, 8, 10, 14, 15, 21, 22], "mean": [2, 3, 4, 5, 7, 9, 10, 14, 15, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32], "std": [2, 5], "alreadi": [2, 12, 14, 17, 27], "compress": 2, "zip": [2, 15], "second": [2, 3, 12, 15, 17, 20, 21, 29], "choos": [2, 6, 8, 12, 21], "differ": [2, 3, 5, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30], "algorithm": [2, 3, 5, 6, 8, 10, 15, 17, 25, 26, 27, 29, 30], "accord": [2, 7, 9, 10, 15, 25, 29], "fraction": [2, 7, 9, 10, 17, 18], "separ": [2, 4, 7, 9, 10, 17], "screenshot": 2, "15": [2, 17, 20, 21, 22, 25, 26, 27, 29, 31, 32], "last": [2, 4, 5, 6, 7, 10, 13, 15, 29], "85": 2, "otherwis": [2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 32], "ignor": [2, 3, 6, 15, 17], "isolationforest": [2, 5, 20, 25, 26], "modifi": [2, 5, 25], "do": [2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 20, 21, 25, 29, 32], "well": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 20, 21, 25, 27, 29, 30, 32], "determin": [2, 7, 8, 10, 11, 12, 14, 27], "better": [2, 12, 15, 17, 28, 30, 31], "applic": [2, 7, 15], "updat": [2, 5, 6, 7, 10, 15], "entir": [2, 4, 6, 9, 13, 25, 29], "simpli": [2, 7, 10, 15, 16, 25, 29], "procedur": [2, 8], "begin": [2, 5, 7, 10, 14, 15, 20, 24, 26, 27, 28, 29, 30, 32], "algorithm_nam": 2, "result": [2, 3, 4, 5, 7, 8, 10, 12, 14, 17, 27, 29], "tabl": 2, "perform": [2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 17, 24, 25, 26, 27, 28, 29, 30, 32], "third": 2, "target": [2, 3, 5, 6, 8, 9, 10, 13, 20, 30, 31], "whose": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 27, 31, 32], "wish": [2, 3, 4, 5, 6, 7, 8, 10, 13, 15, 20, 27, 31], "requir": [2, 3, 4, 5, 7, 9, 10, 11, 14, 15, 17, 18, 21, 29], "known": [2, 4, 6, 7, 10, 11, 14], "priori": [2, 4, 6, 7, 10, 11, 31], "take": [2, 3, 5, 8, 9, 10, 14, 15, 21, 26, 29, 31, 32], "finish": 2, "evaluatorconfig": 3, "train_window": [3, 5, 25, 29], "retrain_freq": [3, 20, 25, 26, 29, 30], "cadenc": [3, 26, 29, 30], "abstract": [3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 27, 32], "defin": [3, 4, 5, 10, 13, 14, 17, 19, 22, 27], "float": [3, 5, 6, 7, 8, 9, 10, 12, 14, 15], "maximum": [3, 5, 6, 7, 8, 9, 10, 12, 17, 25, 26, 29, 30], "durat": [3, 5], "would": [3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 25, 27, 31], "like": [3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 20, 21, 25, 26, 27, 29, 30, 31], "limit": 3, "frequenc": [3, 4, 5, 6, 8, 9, 10, 15], "onli": [3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 20, 21, 22, 26, 27, 29, 31, 32], "onc": [3, 4, 5, 12, 25, 30], "obtain": [3, 5, 10, 13, 15, 21, 24, 25, 26, 28, 29, 30, 32], "same": [3, 4, 5, 7, 9, 10, 14, 15, 16, 17, 20, 21, 25, 26, 29, 31], "horizon": [3, 7, 10, 29, 30], "alert": [3, 25, 27], "condit": [3, 31], "0": [3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "interv": [3, 7, 10, 14, 15, 17, 22, 25, 28, 29], "number": [3, 4, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 20, 25, 29, 31], "produc": [3, 5, 10, 13, 14, 15, 25, 29], "retrain": [3, 25, 26, 29], "explicitli": [3, 8, 14, 17, 22, 25], "futur": [3, 10, 11, 14, 29, 30, 31], "equal": [3, 10, 14, 15, 17, 21, 27, 32], "evaluatorbas": 3, "histor": [3, 5, 10, 25, 29], "get_predict": [3, 25, 26, 29, 30], "method": [3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 25, 27, 29, 32], "were": [3, 4, 12, 25], "increment": [3, 10, 15], "manner": [3, 25, 26, 30], "describ": [3, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17], "subclass": [3, 4, 9, 14], "slightli": 3, "protocol": [3, 25], "v": [3, 5, 32], "alia": [3, 4, 5, 6, 7, 8, 9, 10, 12, 15], "default_train_kwarg": 3, "default_retrain_kwarg": 3, "train_val": [3, 25, 26, 29, 30], "test_val": [3, 25, 26, 29, 30], "exog_data": [3, 4, 6, 7, 8, 9, 10, 11, 31], "train_kwarg": [3, 25], "retrain_kwarg": [3, 25], "appropri": [3, 14, 15, 25, 27, 30, 32], "compar": [3, 5, 7, 12, 25, 29], "ground": [3, 7, 12, 25, 29, 32], "truth": [3, 7, 12, 22, 25, 29, 32], "keyword": [3, 4, 5, 8, 9, 12, 14, 17, 18, 29], "argument": [3, 4, 5, 8, 9, 12, 14, 17, 18, 21, 27, 29, 31], "subsequ": 3, "tupl": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 21, 32], "union": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 21], "train_result": [3, 4, 5, 7, 8, 10, 26, 30], "pretrain": 3, "ground_truth": [3, 12, 22, 24, 25, 26, 27, 28, 29, 30, 32], "given": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 21, 32], "accumul": 3, "scoretyp": [3, 12], "enum": [3, 5, 6, 8, 12, 15, 25, 29], "fals": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32], "posit": [3, 5, 10, 14, 24, 25], "neg": [3, 5, 24], "see": [3, 4, 5, 10, 15, 17, 25, 27, 29, 31, 32], "technic": [3, 25], "report": [3, 25, 27], "prefer": 3, "revis": [3, 25], "adjust": [3, 8, 10, 14, 15, 25], "pointwis": [3, 12], "pointadjust": [3, 12], "1": [3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "revisedpointadjust": [3, 12], "2": [3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "tsadscoreaccumul": [3, 12], "num_tp_anom": 3, "num_tp_pointwis": 3, "num_tp_point_adj": 3, "num_fn_anom": 3, "num_fn_pointwis": 3, "num_fn_point_adj": 3, "num_fp": 3, "num_tn": 3, "tp_score": 3, "fp_score": 3, "tp_detection_delai": 3, "tp_anom_dur": 3, "anom_dur": 3, "maintain": [3, 5], "summari": 3, "precis": [3, 5, 6, 12, 24, 25, 26, 27, 29], "score_typ": [3, 12], "recal": [3, 6, 12, 24, 25, 26, 27], "f1": [3, 12, 24, 25, 26, 27], "f_beta": [3, 12], "beta": [3, 12, 14, 15], "mean_time_to_detect": [3, 12], "mean_detected_anomaly_dur": 3, "mean_anomaly_dur": 3, "nab_scor": [3, 12], "tp_weight": 3, "fp_weight": [3, 12], "fn_weight": [3, 12], "tn_weight": 3, "nab": [3, 16, 17, 24, 25, 27], "weight": [3, 5, 7, 9, 10, 13, 14, 15, 23], "error": [3, 4, 5, 6, 7, 8, 10, 13, 14, 15, 21, 28, 29, 30, 32], "section": [3, 17, 20], "ii": 3, "arxiv": 3, "org": 3, "pdf": [3, 13, 15], "1510": 3, "03336": 3, "At": [3, 6, 14, 25, 29], "high": [3, 5, 6, 8, 14, 25], "level": [3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 22], "cost": [3, 6, 25], "sensit": 3, "recenc": [3, 7, 10, 14, 15], "accuraci": [3, 6, 10], "measur": [3, 5, 28], "profil": 3, "github": [3, 5, 17, 18], "com": [3, 5, 7, 10, 11, 17, 18], "numenta": [3, 16, 17, 24], "blob": 3, "master": [3, 18], "json": [3, 4, 14, 25, 29], "reward": 3, "low": [3, 11, 25], "rate": [3, 5, 7, 10, 21, 31], "22": [3, 12, 21, 25, 26, 29, 32], "rel": [3, 5, 10, 14, 15, 25], "complet": [3, 25, 26, 27, 32], "accumulate_tsad_scor": [3, 12], "max_early_sec": [3, 12], "max_delay_sec": [3, 12], "compon": [3, 7, 8, 10, 11], "indic": [3, 4, 5, 7, 8, 10, 14, 16, 17, 18, 20, 22, 29, 30], "whether": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 26, 29, 30, 31], "step": [3, 4, 5, 6, 7, 9, 10, 11, 14, 15, 27, 30, 32], "correspond": [3, 5, 6, 7, 10, 13, 15, 25, 29], "nonzero": [3, 25, 27], "amount": [3, 6, 14, 25, 29], "occur": [3, 5, 6, 10, 15, 25], "incid": 3, "earli": [3, 17], "end": [3, 5, 7, 10, 14, 15], "dure": [3, 5, 10, 16], "becaus": [3, 5, 6, 7, 8, 10, 14, 15, 21, 22], "permit": [3, 17], "exactli": [3, 6, 7, 10, 14, 23], "tsadmetr": [3, 9, 12, 24, 25, 26, 27, 32], "enumer": [3, 5, 8, 12], "partial": [3, 12, 15, 19], "form": [3, 4, 12, 15], "f": [3, 5, 12, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "kwarg": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 25, 27, 30, 32], "meantimetodetect": [3, 12, 24, 25, 26], "functool": [3, 12, 15], "pointwisef1": [3, 12], "pointwiseprecis": [3, 12], "pointwiserecal": [3, 12], "pointadjustedf1": [3, 12, 26], "pointadjustedprecis": [3, 12, 26], "pointadjustedrecal": [3, 12, 26], "nabscor": [3, 12], "nabscorelowfn": [3, 12], "nabscorelowfp": [3, 12], "f2": [3, 12], "f5": [3, 12], "5": [3, 5, 7, 10, 12, 14, 15, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32], "tsadevaluatorconfig": [3, 25, 26], "tsadevalu": [3, 25, 26], "than": [3, 5, 6, 9, 12, 14, 20, 21, 26, 27], "count": 3, "real": [3, 15, 17, 29, 31], "while": [3, 4, 5, 7, 10, 13, 14, 15, 17, 25, 26, 28], "desir": [3, 5, 7, 10, 14, 15, 17, 18, 32], "typic": [3, 25, 29], "post_rule_train_config": [3, 4, 5, 7, 25], "suppli": [3, 4, 5, 7, 14, 15, 29], "continu": [3, 5, 27, 29], "sens": 3, "forecastscoreaccumul": 3, "insampl": [3, 28], "period": [3, 5, 8, 11, 14, 22], "ub": [3, 4, 10, 28], "lb": [3, 4, 10, 28], "target_seq_index": [3, 4, 5, 6, 7, 9, 10, 11, 25, 29, 30, 31, 32], "msi": [3, 28], "non": [3, 4, 8, 12, 13, 14, 15, 17, 18], "wherea": 3, "95": [3, 12, 14, 28], "check_before_ev": 3, "mae": 3, "absolut": [3, 5, 9, 12, 14], "hat": [3, 7, 10, 15, 29, 32], "frac": [3, 5, 8, 14, 15, 25, 29, 32], "sum_": [3, 7, 10, 15, 29, 32], "y_t": [3, 14, 29, 32], "_t": [3, 14, 29, 32], "marr": 3, "rang": [3, 4, 6, 7, 10, 11, 14, 15, 17], "100": [3, 5, 7, 8, 10, 14, 18, 20, 22, 23, 25, 26, 28, 29, 30, 32], "cdot": [3, 7, 10, 14, 15], "left": [3, 5, 14, 15, 21], "max_t": 3, "min_t": 3, "rmse": [3, 29, 30], "squar": 3, "sqrt": [3, 15], "smape": [3, 22, 23, 28, 29, 30, 31, 32], "symmetr": [3, 29, 32], "percentag": 3, "200": [3, 20, 29, 31, 32], "rmspe": 3, "percent": [3, 32], "mase": 3, "scale": [3, 5, 7, 10, 14, 15, 28, 29], "In": [3, 5, 11, 12, 14, 17, 18, 20, 21, 25, 27, 29, 31], "sampl": [3, 4, 5, 6, 7, 8, 9, 10, 15, 17, 21, 27, 29, 30, 32], "x": [3, 5, 7, 8, 10, 11, 12, 14, 15, 21, 25, 27, 31, 32], "n": [3, 5, 7, 8, 10, 13, 14, 15, 21, 23, 24], "x_t": [3, 5, 7, 10, 15], "x_": [3, 7, 10, 14, 15], "qualiti": [3, 25, 28, 29, 31], "l": [3, 8, 14, 22, 23, 25, 27, 29, 32], "u": [3, 14, 15, 29], "u_t": 3, "l_t": 3, "accumulate_forecast_scor": 3, "forecastmetr": [3, 9, 22, 23, 28, 29, 30, 31, 32], "origin": [3, 4, 6, 9, 10, 11, 13, 14, 15, 17, 21, 23, 29], "forecastevalu": [3, 29, 30], "formul": [3, 7, 10], "forecastevaluatorconfig": [3, 29, 30], "whenev": [3, 16], "make": [3, 6, 7, 8, 9, 10, 12, 17, 20, 21, 29], "broadli": 4, "contain": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 31], "distinct": 4, "subset": [4, 5, 10, 15, 16, 17, 18, 21, 23, 24, 25, 27, 28, 29, 32], "modelclass": [4, 25, 29], "inherit": [4, 5, 6, 7, 10, 14, 21, 27, 32], "potenti": [4, 5, 10, 14, 30], "trainabl": [4, 5, 10, 14], "refer": [4, 5, 7, 10, 15, 17, 21, 22, 23], "dirnam": [4, 9, 25, 29], "save_config": [4, 9], "binari": [4, 15, 25, 29], "pkl": 4, "disk": 4, "heavili": [4, 10], "exploit": 4, "fact": [4, 15, 24], "serializ": 4, "instanc": [4, 7, 21], "overrid": [4, 5, 8, 14, 15, 17, 23, 25, 27, 29, 32], "remain": [4, 13], "fulli": 4, "user": [4, 5, 8, 10, 12, 14, 15, 17, 21, 22, 24, 25, 27, 29], "who": 4, "aren": [4, 21], "familiar": 4, "instanti": [4, 5, 14], "workflow": [4, 11], "import": [4, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "windstatsconfig": [4, 5, 25], "kind": [4, 6], "equival": [4, 7, 10, 14, 15], "model1a": 4, "wind_sz": [4, 5, 25], "60": [4, 12, 14, 15, 20, 25, 27, 29, 31], "model1b": 4, "tmp": 4, "model2a": 4, "model2b": 4, "balanc": [4, 24, 28], "speed": [4, 8, 22], "n_thread": 4, "model_kwarg": [4, 8], "wrap": [4, 8, 15, 31], "5min": [4, 15, 17], "1h": [4, 5, 15, 29], "1d": [4, 11, 30], "etc": [4, 5, 16, 17, 20], "int": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 32], "thread": [4, 5, 10], "underli": [4, 6, 7, 8, 10, 25, 29], "Will": [4, 8], "try": [4, 8, 17, 18, 21, 27, 32], "pass": [4, 8, 11, 14, 21, 29], "howev": [4, 8, 17, 20, 21, 25, 26, 29, 31], "thei": [4, 5, 6, 7, 8, 10, 12, 15, 17, 21, 25, 31], "effici": [4, 11, 24, 28], "intern": [4, 5, 6, 8, 9, 10, 11], "state": [4, 5, 6, 7, 9, 10, 14, 25, 29], "train_config": [4, 5, 7, 8, 9, 10, 22, 27, 32], "detector": [4, 5, 6, 7, 9, 10, 19], "unsupervis": [4, 5, 7, 25], "supervis": [4, 5, 7], "anomal": [4, 5, 7, 14, 17, 20, 25], "max_forecast_step": [4, 6, 7, 9, 10, 25, 29, 30, 32], "max": [4, 5, 7, 8, 9, 10, 15, 23, 26], "amongst": [4, 6, 7, 9, 10, 11], "gener": [4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 19, 21, 25, 27, 29], "stamp": [4, 5, 10, 14, 15, 21, 29], "independ": [4, 6, 7, 10, 15, 21], "forecasterexogbas": [4, 6, 7, 9, 10], "forecasterbas": [4, 7, 8, 9, 10, 13, 23, 32], "classmethod": [4, 5, 9, 12, 14, 15], "return_unused_kwarg": [4, 5], "model_path": [4, 25, 29], "obj": [4, 15], "transformbas": [4, 5, 7, 9, 10, 14], "_skipped_kei": [4, 5, 9], "config_dict": [4, 5], "construct": [4, 5, 13], "dictionari": [4, 5, 10, 13, 15, 21], "unus": [4, 5], "arg": [4, 5], "dimens": [4, 5, 7, 10, 11, 15], "handl": [4, 5, 7, 9, 10, 11, 13, 15, 21], "case": [4, 5, 11, 13, 14, 16, 17, 18, 20, 22, 25, 27, 29, 30, 31], "rescal": [4, 14], "lag": [4, 5, 6, 7, 8, 10, 11, 14], "varianc": [4, 5, 8, 14, 15, 27, 31, 32], "itself": [4, 9, 15, 27, 29, 32], "bool": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 27], "assum": [4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 18, 20, 27, 29, 32], "fix": [4, 5, 6, 8, 9, 10], "align": [4, 5, 7, 10, 14, 15, 19, 23, 32], "give": [4, 7, 10, 14, 15, 25], "gap": [4, 12, 15], "dateoffset": 4, "wa": [4, 5, 6, 7, 8, 10, 17, 21, 29], "common": [4, 6, 9, 10], "most": [4, 5, 6, 9, 10, 15, 18, 21, 25, 27, 29, 32], "necessari": [4, 6, 9, 10, 15, 27, 32], "been": [4, 5, 6, 9, 10, 12], "time_series_prev": [4, 5, 6, 7, 9, 10, 25, 27, 29, 32], "context": [4, 5, 10, 29], "immedi": [4, 5, 6, 7, 10], "convert": [4, 5, 7, 8, 9, 10, 14, 15, 21, 29], "byte": [4, 9], "mixin": [4, 5, 8], "multiple_train_data": [4, 5], "act": [4, 8, 21], "wrapper": [4, 5, 8, 10, 15, 17, 18, 21], "around": [4, 5, 7, 8, 10, 15, 21, 25], "anoth": [4, 15], "often": 4, "basi": 4, "document": [4, 5, 9, 10, 15], "heart": 4, "retain": [4, 5, 12, 14, 21, 25], "attribut": 4, "becom": [4, 15], "de": 4, "synchron": 4, "model_config": 4, "overal": [4, 5, 7, 10], "hierarchi": [4, 13, 15], "access": [4, 5, 15, 21], "set_season": [4, 8, 10], "resolv": 4, "seasonalitymodel": [4, 8, 10], "automat": [4, 5, 6, 7, 8, 9, 10, 13, 20, 21, 22, 26, 27, 29, 30], "similarli": [4, 30], "detectorbas": [4, 5, 7, 9, 13, 27], "forecastingdetectorbas": [4, 5, 6, 7, 32], "overridden": [4, 8, 20], "top": 4, "doe": [4, 14, 15, 25], "duplic": [4, 24, 25, 27], "instead": [4, 5, 8, 11, 12, 15, 21, 25, 27, 31], "As": [4, 20, 27], "hold": 4, "detectorconfig": [4, 5, 7, 9, 27, 32], "compos": [4, 12, 14, 15], "transformsequ": [4, 14, 23, 25], "time_stamp": [4, 5, 6, 7, 9, 10, 13, 15, 21, 23, 28, 29, 30, 31, 32], "self": [4, 10, 14, 15, 27, 32], "invert": [4, 6, 7, 9, 10, 14, 23], "invert_transform": [4, 6, 7, 9, 10, 23], "return_iqr": [4, 10], "quartil": [4, 6, 7, 10], "bar": [4, 10, 13, 15, 29], "return_prev": [4, 10, 32], "stderr": [4, 7, 10, 15, 29, 30], "25th": [4, 10], "percentil": [4, 10, 12, 14], "75th": [4, 10], "detectorclass": 5, "post_rul": [5, 12, 27], "stage": 5, "boolean": 5, "enable_calibr": [5, 6, 7, 9, 10, 25], "enable_threshold": [5, 6, 7, 9, 10, 25], "enabl": [5, 6, 7, 9, 10], "recent": [5, 10, 25, 27, 29, 32], "get_anomaly_label": [5, 7, 24, 25, 26, 27], "though": [5, 20, 29, 31], "extra": [5, 10], "lstmdetector": [5, 7], "Not": [5, 6, 7, 10, 13, 17, 18], "forecast_to_anom_scor": [5, 7], "get_figur": [5, 6, 7, 10], "plot_anomali": [5, 6, 7, 24, 25, 27, 32], "plot_anomaly_plotli": [5, 7], "plot_forecast": [5, 6, 7, 10, 22, 28, 29, 32], "plot_forecast_plotli": [5, 7, 10], "arimadetectorconfig": [5, 7], "arimadetector": [5, 7], "sarimadetectorconfig": [5, 7], "sarimadetector": [5, 7], "etsdetectorconfig": [5, 7], "etsdetector": [5, 7], "prophetdetectorconfig": [5, 7, 25], "prophetdetector": [5, 7, 25], "lstmdetectorconfig": [5, 7], "msesdetectorconfig": [5, 7], "msesdetector": [5, 7], "online_upd": [5, 7], "changekind": [5, 6], "auto": [5, 6, 7, 10, 22, 23, 25, 29], "levelshift": [5, 6, 14], "trendchang": [5, 6, 14], "bocpdconfig": [5, 6], "change_kind": [5, 6], "n_seen": [5, 6], "cp_prior": [5, 6], "min_likelihood": [5, 6], "max_scor": [5, 6, 7, 9, 10, 12, 25], "possibl": [5, 6, 7, 8, 9, 10, 11, 12, 14, 21], "uncalibr": [5, 6, 7, 9, 10, 12], "raw": [5, 7, 10, 12, 18, 25, 27], "anomscorecalibr": [5, 12, 25], "nocalibrationdetectorconfig": [5, 6, 7], "never": [5, 30], "filter_scor": [5, 6, 7, 25, 27, 32], "plot_time_series_prev": [5, 6, 7, 10, 25, 29, 32], "fit": [5, 6, 7, 8, 10, 22], "might": [5, 8, 10], "onto": 5, "graph": [5, 7], "overlaid": [5, 7], "multipletimeseriesdetectormixin": 5, "element": [5, 10, 15, 17], "dynam": 5, "baselin": 5, "daili": [5, 7, 10, 18], "weekli": [5, 7, 10, 18, 25, 29, 31], "monthli": [5, 18], "trend": [5, 6, 7, 8, 10, 14, 17], "dynamicbaselineconfig": 5, "fixed_period": 5, "dynamicbaselin": 5, "datapoint": [5, 10, 14], "inclus": [5, 14, 15], "serv": 5, "scope": 5, "roll": [5, 11], "minut": [5, 12, 25], "bucket": 5, "dai": [5, 7, 10, 21, 24, 25, 26, 27, 30, 31], "determine_train_window": 5, "week": [5, 7, 10, 17, 25, 26, 29], "month": [5, 21], "exclus": 5, "within": [5, 12, 14, 20, 29], "has_fixed_period": 5, "get_relev": 5, "get_baselin": 5, "new_data": [5, 10], "get_baseline_figur": 5, "jitter_time_stamp": 5, "3": [5, 7, 8, 10, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "segment": 5, "belong": [5, 15], "day_delta": 5, "hour_delta": 5, "min_delta": 5, "zero_delta": 5, "wind_delta": 5, "window_kei": 5, "weekday_kei": 5, "day_kei": 5, "segment_kei": 5, "30": [5, 14, 15, 21, 23, 24, 25, 27, 32], "max_dai": [5, 25], "4": [5, 7, 8, 10, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "memori": 5, "weekdai": 5, "id": [5, 13, 17], "slide": [5, 26, 30], "come": [5, 24], "divid": [5, 14, 17, 24, 25, 28], "against": [5, 11, 17], "match": [5, 10], "histori": [5, 6, 7, 10], "minimum": [5, 8, 10, 12, 13, 15], "classic": [5, 7, 10, 25, 26, 29, 30], "isol": [5, 25, 27], "forest": [5, 10, 25, 27], "isolationforestconfig": [5, 25], "max_n_sampl": [5, 25], "n_estim": [5, 10, 25], "propos": 5, "liu": 5, "al": [5, 13, 15], "2008": 5, "aw": 5, "cut": 5, "jvmsingleton": 5, "gatewai": 5, "randomcutforestconfig": 5, "seed": [5, 10, 11, 25], "512": 5, "thread_pool_s": 5, "further": [5, 29], "pool": 5, "travers": 5, "submit": 5, "larger": 5, "shingl": [5, 14, 25], "throughput": 5, "stream": [5, 25], "sampler": 5, "java_param": 5, "refin": 5, "guha": 5, "2016": 5, "spectral": 5, "spectralresidualconfig": 5, "local_wind_sz": 5, "21": [5, 21, 23, 25, 26, 27, 32], "q": [5, 7, 8, 10, 14, 22], "estimated_point": 5, "predicting_point": 5, "spectralresidu": 5, "previou": 5, "salienc": 5, "consid": [5, 6, 8, 12, 14, 15, 17, 25, 31], "averag": [5, 7, 9, 10, 14, 15, 23, 29, 32], "pad": [5, 14, 23], "calcul": [5, 10, 14, 15], "gradient": [5, 10], "r": [5, 11, 15, 24, 29, 31, 32], "log": [5, 15, 22, 23], "mathscr": 5, "textbf": 5, "_": [5, 7, 10, 14, 15, 17, 18, 23], "s_m": 5, "convolut": 5, "fourier": [5, 7, 10], "overlin": 5, "reason": [5, 21], "done": [5, 9, 10, 15, 25, 29, 31], "later": [5, 17], "middl": 5, "rather": [5, 9, 12, 20, 21, 26], "ren": 5, "2019": [5, 17], "spectrum": 5, "invers": [5, 6, 7, 9, 10, 14, 19], "simpl": [5, 8, 12, 19], "static": [5, 8, 15, 17, 25], "statthresholdconfig": [5, 27], "statthreshold": [5, 26, 27], "zmsconfig": 5, "n_lag": 5, "lag_infl": 5, "exponenti": [5, 7, 10, 14, 15, 29], "distant": 5, "chosen": 5, "math": 5, "below": [5, 21, 22, 25, 27, 29, 31, 32], "mathemat": 5, "role": 5, "inflat": [5, 7, 10, 15, 29], "distrust": 5, "toward": 5, "higher": [5, 6, 25], "less": [5, 12, 14], "text": [5, 7, 10, 14, 15], "let": [5, 7, 10, 14, 15, 20, 21, 25, 27, 29, 31, 32], "space": [5, 6, 7, 8, 10, 14], "z_k": 5, "k": [5, 8, 10, 13, 14, 15, 22, 23, 25, 27, 29, 31, 32], "delta_k": 5, "p": [5, 7, 8, 10, 14, 15, 22, 24], "z_": [5, 14], "argmax": 5, "_k": 5, "spike": [5, 14, 17], "dip": [5, 14, 17], "sharp": 5, "up": [5, 7, 8, 10, 15, 17, 22, 30, 31], "down": 5, "captur": [5, 27], "magnitud": [5, 7, 10, 27], "direct": 5, "distinguish": [5, 20], "build": [5, 19], "normalci": 5, "grow": 5, "zeroth": 5, "order": [5, 7, 8, 10, 11, 13, 15, 21, 22, 29, 32], "just": [5, 7, 10, 13, 14, 15, 18, 20, 21, 27, 29, 32], "seen": [5, 6, 7, 10], "kth": 5, "similar": 5, "except": [5, 17, 21], "8": [5, 15, 17, 20, 21, 22, 23, 25, 27, 29, 31, 32], "16": [5, 6, 20, 21, 23, 25, 27, 29, 32], "assign": [5, 10, 13, 14, 15], "lag_scal": 5, "adjust_z_scor": 5, "autoencoderconfig": 5, "hidden_s": 5, "layer_s": 5, "25": [5, 20, 21, 25, 27], "10": [5, 7, 10, 12, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32], "sequence_len": 5, "lr": [5, 10], "001": 5, "batch_siz": [5, 10, 11], "num_epoch": 5, "50": [5, 20, 21, 23, 25, 27, 29, 31], "latent": 5, "hidden": [5, 7, 10], "mlp": 5, "encod": 5, "decod": 5, "batch": [5, 10, 11, 15, 25], "epoch": [5, 10], "correl": 5, "joint": 5, "paper": 5, "pierr": 5, "baldi": 5, "architectur": 5, "2012": [5, 20, 31], "vaeconfig": 5, "encoder_hidden_s": 5, "decoder_hidden_s": 5, "latent_s": 5, "kld_weight": 5, "dropout_r": 5, "num_eval_sampl": 5, "1024": [5, 7, 10], "regular": [5, 15, 21, 25, 29], "kl": 5, "diverg": 5, "term": [5, 7, 10], "dropout": 5, "variat": 5, "reconstruct": 5, "diederik": 5, "kingma": 5, "bay": [5, 15], "2013": [5, 25, 27], "gaussian": 5, "mixtur": 5, "dagmmconfig": 5, "gmm_k": 5, "lambda_energi": 5, "lambda_cov_diag": 5, "005": 5, "256": [5, 10], "energi": [5, 18], "covari": 5, "diagon": 5, "entri": [5, 15, 27], "jointli": 5, "optim": [5, 8, 11, 15, 25], "simultan": 5, "fashion": 5, "bo": 5, "zong": 5, "qi": 5, "song": 5, "martin": 5, "renqiang": 5, "min": [5, 8, 10, 15], "wei": 5, "cheng": 5, "cristian": 5, "lumezanu": 5, "daeki": 5, "cho": 5, "haifeng": 5, "chen": [5, 17], "2018": [5, 13, 15], "n_epoch": 5, "shuffl": [5, 11], "collect": [5, 17, 20, 21, 32], "lstmedconfig": 5, "20": [5, 20, 21, 23, 25, 27, 29, 32], "n_layer": 5, "lstmed": 5, "represent": [5, 15, 16, 17], "network": 5, "deeppointanomalydetectorconfig": 5, "deeppointanomalydetector": 5, "signal": 5, "taget": 5, "pair": [5, 12, 15, 17, 18], "few": [5, 19, 25], "itert": 5, "loss": [5, 7, 10, 14, 26], "regard": 5, "intuit": 5, "dnn": 5, "global": 5, "pattern": 5, "overfit": 5, "therefor": 5, "arpit": 5, "devansh": 5, "closer": 5, "look": [5, 12, 20, 29], "memor": 5, "icml": 5, "2017": [5, 7, 10], "rahaman": 5, "nasim": 5, "On": 5, "bia": [5, 14], "neural": [5, 7, 10], "onlin": [6, 7, 10, 15], "conjprior": [6, 15], "sort": [6, 15, 18, 20, 23, 31], "mvnorminvwishart": [6, 15], "shift": [6, 14, 17], "bayesianmvlinreg": [6, 15], "linear": [6, 15], "1e": [6, 10], "forecasterconfig": [6, 7, 10, 32], "belief": 6, "probabl": [6, 14], "frequent": 6, "changepoint": 6, "delai": [6, 12], "lookback": 6, "discard": 6, "hypothes": 6, "complex": 6, "By": [6, 7, 9, 10, 14, 15, 21, 22, 25, 27], "proper": [6, 7, 9, 10, 14], "without": [6, 7, 9, 10, 17, 19, 27, 31, 32], "adam": 6, "mackai": 6, "2007": [6, 15], "observ": [6, 14, 15, 32], "too": [6, 8, 17, 29], "much": [6, 21], "posterior": [6, 7, 10, 15], "forward": [6, 14], "freshli": 6, "piecewis": 6, "sinc": [6, 8, 10, 21, 25, 27, 29], "far": [6, 27], "increas": [6, 7, 10, 25], "decreas": 6, "likelihood": [6, 8], "return_exog": [6, 9, 10], "over": [6, 7, 8, 10, 15, 16, 17, 21, 25, 31], "plot_forecast_uncertainti": [6, 7, 10, 22, 28, 29], "variant": [7, 10, 15, 32], "overlai": 7, "past": [7, 10, 11, 29, 31], "autoregress": [7, 10, 11], "move": [7, 10, 14, 15, 23], "seasonal_ord": [7, 8, 10, 22], "exog_transform": [7, 9, 10, 31], "exog_aggregation_polici": [7, 9, 10, 31], "aggregationpolici": [7, 9, 10, 14, 15, 31], "exog_missing_value_polici": [7, 9, 10, 31], "missingvaluepolici": [7, 9, 10, 14, 15, 31], "zfill": [7, 9, 10, 15, 31], "arimaconfig": [7, 10, 29], "d": [7, 8, 10, 11, 15, 22, 31], "ma": [7, 8, 10, 22, 23], "polici": [7, 9, 10, 14, 15], "aggreg": [7, 9, 10, 13, 14, 15], "endogen": [7, 9, 10, 31], "imput": [7, 9, 10, 14, 15, 31], "miss": [7, 9, 10, 13, 14, 15, 21, 25, 29, 31], "24": [7, 10, 18, 21, 22, 23, 25, 26, 27, 30], "sarimaconfig": [7, 10], "cycl": [7, 10], "hour": [7, 10, 29], "hourli": [7, 8, 10, 16, 18, 22, 23, 28, 29, 30, 32], "damped_trend": [7, 8, 10], "seasonal_period": [7, 8, 10], "pred_interval_strategi": [7, 10], "exact": [7, 10, 15, 25, 29], "refit": [7, 10], "etsconfig": [7, 10], "flexibl": [7, 10], "trait": [7, 10], "mul": [7, 8, 10], "otext": [7, 10, 11], "fpp2": [7, 10, 11], "taxonomi": [7, 10], "html": [7, 10, 11, 18], "inform": [7, 8, 10, 14, 21, 31], "damp": [7, 8, 10], "strategi": [7, 8, 10], "slower": [7, 10, 19], "smooth": [7, 10, 14, 29], "faster": [7, 10], "facebook": [7, 8, 10, 25, 29], "yearly_season": [7, 10, 23, 25, 29], "weekly_season": [7, 10, 25, 29], "daily_season": [7, 10, 25, 29], "seasonality_mod": [7, 10, 25, 29], "holidai": [7, 10, 25, 29, 31], "uncertainty_sampl": [7, 10, 25, 29], "prophetconfig": [7, 10, 23, 29, 31], "taylor": [7, 10], "letham": [7, 10], "yearli": [7, 10, 18, 23, 25, 29], "activ": [7, 10, 17], "year": [7, 10, 21], "deactiv": [7, 10], "pd": [7, 10, 15, 16, 17, 20, 21, 22, 23, 27, 32], "date": [7, 10, 20, 31], "lower_window": [7, 10], "upper_window": [7, 10], "prior_scal": [7, 10], "draw": [7, 10, 14, 22, 29], "net": [7, 10], "nhid": [7, 10], "model_strid": [7, 10], "lstmconfig": [7, 10], "stride": [7, 10, 14, 25], "subsampl": [7, 10], "multi": [7, 10, 29], "max_backstep": [7, 10, 29], "recency_weight": [7, 10, 15, 29], "accel_weight": [7, 10, 29], "optimize_acc": [7, 10, 29], "eta": [7, 10, 29], "rho": [7, 10, 29], "phi": [7, 10, 29], "msesconfig": [7, 10, 29], "w": [7, 10, 14, 15, 31, 32], "b": [7, 10, 14, 15], "backstep": [7, 10], "l_": [7, 10], "h": [7, 10, 31], "p_": [7, 10], "v_": [7, 10, 14], "a_": [7, 10], "ema": [7, 10, 15], "_w": [7, 10, 15], "delta_": [7, 10], "p_b": [7, 10], "sigma": [7, 10, 15, 25, 27], "_b": [7, 10], "z_b": [7, 10], "rwse": [7, 10], "Then": [7, 10, 11, 14, 15, 16, 31], "th": [7, 8, 10, 13, 15, 31], "anchor": [7, 10, 12, 25], "xhat": [7, 10], "delta_hat": [7, 10], "acceler": [7, 10], "veloc": [7, 10, 14], "correct": [7, 8, 10, 15], "control": [7, 10, 14, 31], "made": [7, 10, 17], "what": [7, 10, 20, 32], "due": [7, 10, 14, 25, 27], "velciti": [7, 10], "rest": [7, 10], "complement": [7, 10], "velocity_error": [7, 10], "loss_error": [7, 10], "factor": [7, 10, 14], "expon": [7, 10], "softmax": [7, 10], "automlmixin": 8, "generate_theta": 8, "theta": [8, 10, 15], "iter": [8, 11, 15, 16, 17, 21], "candid": [8, 12], "consider": 8, "evaluate_theta": 8, "set_theta": 8, "behavior": [8, 15, 25, 29], "oftentim": 8, "informationcriterion": 8, "aic": 8, "akaik": 8, "criterion": 8, "mathrm": [8, 14, 15, 29, 32], "2k": 8, "ln": [8, 14], "bic": 8, "aicc": 8, "small": [8, 10], "paramt": 8, "icconfig": 8, "information_criterion": [8, 11], "mix": 8, "best": [8, 9, 12, 22, 29, 30], "icautomlforecast": 8, "get_ic": 8, "One": [8, 14, 15, 17], "tri": 8, "_train": [8, 27, 32], "periodicitystrategi": 8, "acf": 8, "highest": 8, "autocorrel": 8, "valid": [8, 9, 12, 16, 17, 20, 29], "extend": [8, 18], "seasonalitylay": [8, 10], "numpi": [8, 10, 11, 15, 22, 25, 27, 29, 32], "arrai": [8, 10, 11, 15], "seasonalityconfig": 8, "periodicity_strategi": 8, "pval": 8, "05": [8, 10, 11, 20, 21, 25, 27, 31, 32], "max_lag": 8, "decid": 8, "signific": 8, "multi_season": 8, "unless": [8, 14, 29], "idea": [8, 11], "find": [8, 12, 15, 17, 18], "seasonalit": 8, "detect_season": 8, "helper": [8, 14], "flatten": [8, 11], "gridsearch": 8, "param_valu": 8, "restrict": 8, "grid": [8, 15, 18], "skip": [8, 13, 14, 29], "inadmiss": 8, "impos": 8, "hyperparamt": 8, "autoetsconfig": 8, "auto_season": [8, 22], "auto_error": 8, "auto_trend": 8, "auto_damp": 8, "additive_onli": 8, "allow_multiplicative_trend": 8, "infinit": 8, "autoprophetconfig": 8, "exist": [8, 15], "autosarimaconfig": [8, 22], "auto_pqpq": [8, 22], "auto_d": [8, 22], "maxit": [8, 11, 22], "max_k": 8, "max_dur": 8, "3600": [8, 14, 15, 29], "approxim": [8, 19], "approx_it": [8, 22], "differenc": [8, 11, 27], "numer": [8, 16, 17, 18], "coupl": [8, 20], "avoid": [8, 14], "stepwis": 8, "long": [8, 17, 20, 22], "150": 8, "off": 8, "12": [8, 17, 20, 21, 23, 25, 27, 29, 30, 31, 32], "action": 8, "seach": 8, "stepwsi": 8, "predefin": [8, 22], "pqpq": 8, "ensembleconfig": 9, "rational": 9, "behind": [9, 31], "place": 9, "discuss": 9, "combinerbas": 9, "ensembletrainconfig": 9, "valid_frac": 9, "per_model_train_config": 9, "per": [9, 25, 30], "ensemblebas": 9, "did": [9, 17, 25], "models_us": 9, "train_valid_split": 9, "transformed_train_data": 9, "get_max_common_horizon": 9, "train_combin": 9, "all_model_out": 9, "save_only_used_model": 9, "abs_scor": [9, 12, 25, 29], "_combine_univari": 9, "__call__": [9, 14], "_check_dim": 9, "requires_train": 9, "set_model_us": 9, "get_model_us": 9, "ndarrai": [9, 13, 15], "median": [9, 15], "modelselector": [9, 29, 30], "rank": 9, "metricweightedmean": 9, "proport": 9, "combinerfactori": 9, "detectorensembleconfig": [9, 25], "per_model_threshold": 9, "detectorensembletrainconfig": 9, "per_model_post_rule_train_config": 9, "detectorensembl": [9, 25, 26], "forecasterensembleconfig": [9, 29], "verbos": [9, 29], "forecasterexogconfig": [9, 10], "forecasterensembl": [9, 29, 30], "resample_time_stamp": [9, 10], "forecasterclass": 10, "evenli": [10, 27, 32], "sure": [10, 20], "target_nam": 10, "transform_exog_data": 10, "batch_forecast": 10, "time_stamps_list": 10, "time_series_prev_list": 10, "forecast_stderr": 10, "forecast_lb": 10, "forecast_ub": 10, "interest": [10, 15], "datetimeindex": [10, 11, 15, 21], "exog_data_prev": 10, "arbitrari": [10, 22, 25, 29], "sklearn": 10, "regress": [10, 15], "sklearnforecasterconfig": 10, "maxlag": 10, "prediction_strid": 10, "sklearnforecast": 10, "unit": [10, 11, 14, 15, 17, 18, 20, 21, 23, 25, 26, 27, 31], "next": [10, 12, 15, 20, 24, 27, 28, 29, 32], "style": 10, "popular": [10, 25, 29, 31], "add_season": [10, 23], "max_scal": 10, "msestrainconfig": 10, "process_loss": 10, "tune_recency_weight": 10, "init_batch_sz": 10, "train_cad": 10, "init": 10, "cannot": 10, "veri": 10, "track": [10, 14, 25, 29], "encount": 10, "mechan": 10, "concept": [10, 15, 19, 21], "back": [10, 21, 29], "delta": [10, 14, 15], "timestep": 10, "velocity_hat": 10, "acceleration_hat": 10, "seper": 10, "xhat_b": 10, "dot": [10, 13, 22, 29], "lowest": [10, 29], "max_horizon": 10, "acquir": 10, "xhat_h": 10, "marginalize_xhat_h": 10, "deltastat": 10, "update_veloc": 10, "vel": 10, "update_acceler": 10, "acc": 10, "update_loss": 10, "constant": [10, 15, 22], "bigger": 10, "aggress": 10, "deltaestim": 10, "stat": [10, 15, 22, 28], "acc_max_scal": 10, "scale_loss": 10, "vel_err": 10, "pos_err": 10, "neg_err": 10, "loss_err": 10, "vector": [10, 14, 15, 21, 31], "vectorarconfig": 10, "vectorar": 10, "randomforestforecasterconfig": 10, "min_samples_split": 10, "max_depth": 10, "random_st": 10, "_treeensembleforecasterconfig": 10, "randomforestforecast": 10, "leav": [10, 13, 17, 25], "depth": 10, "bag": 10, "meta": 10, "classifi": 10, "decis": 10, "extratreesforecasterconfig": 10, "extratreesforecast": 10, "lgbmforecasterconfig": 10, "learning_r": 10, "n_job": 10, "boost": 10, "num": 10, "devic": 10, "light": 10, "lgbm": 10, "fast": 10, "readthedoc": 10, "io": 10, "en": 10, "latest": 10, "lstmtrainconfig": 10, "128": 10, "seq_len": 10, "data_strid": 10, "valid_split": 10, "checkpoint_fil": 10, "checkpoint": 10, "pt": 10, "rollingwindowdataset": 11, "n_past": 11, "n_futur": 11, "ts_index": 11, "whole": [11, 25, 29], "emploi": 11, "past_np": 11, "past_tim": 11, "future_np": 11, "future_tim": 11, "shape": [11, 15, 21], "impli": [11, 15], "keep": [11, 14, 15, 29], "slice": [11, 15, 21], "n_point": 11, "collate_batch": 11, "diff": [11, 23, 29], "suitabl": 11, "2d": [11, 15], "detect_maxiter_sarima_model": 11, "exog": [11, 31], "zero": [11, 12, 14, 15, 27, 31, 32], "seas_seasonalstationaritytest": 11, "strength": 11, "mstl": 11, "stl": 11, "deal": 11, "nsdiff": 11, "max_d": 11, "sea": 11, "maxim": [11, 26, 27], "kpss_stationaritytest": 11, "xx": 11, "alpha": [11, 14, 15], "kpss": 11, "null": 11, "hypothesi": 11, "stationari": [11, 15], "altern": [11, 20, 21, 27, 29], "least": [11, 14], "ndiff": 11, "reshap": 12, "sparsifi": [12, 25], "togeth": 12, "postrulebas": 12, "primarili": 12, "accept": [12, 17, 31], "state_dict": [12, 14, 15], "anomaly_scor": 12, "postrulefactori": 12, "get_post_rule_class": 12, "postrulesequ": 12, "monoton": 12, "divers": [12, 18], "retrain_calibr": 12, "practic": 12, "alm_threshold": [12, 25, 26, 27, 32], "unsup_quantil": 12, "min_allowed_scor": 12, "80": [12, 20], "90": [12, 20, 23], "98": [12, 31], "99": [12, 30], "9": [12, 17, 20, 21, 22, 23, 25, 27, 29, 32], "quantil": 12, "lead": 12, "achiev": [12, 25, 29, 31], "to_simple_threshold": 12, "aggregatealarm": [12, 25, 26, 27, 32], "min_alm_in_window": [12, 25], "alm_window_minut": [12, 25], "alm_suppress_minut": [12, 25, 27], "120": [12, 25], "fire": [12, 24, 25, 27], "alarm": [12, 24, 25, 27], "alarm_window_minut": 12, "suppress": [12, 27], "mark": 12, "threshold_class": 12, "window_sec": 12, "suppress_sec": 12, "get_adaptive_thr": 12, "hist_gap_thr": 12, "bin_sz": 12, "histogram": 12, "bin": 12, "item": [12, 13, 15, 21, 31, 32], "insid": 12, "avg": 12, "adaptivethreshold": 12, "default_hist_gap_thr": 12, "adaptiveaggregatealarm": 12, "expect": [13, 14, 15], "write": 13, "tsid_col_nam": 13, "__ts_id": 13, "reli": 13, "ad": [13, 14, 17, 18, 19, 31], "add_tsid_column": 13, "read_dataset": 13, "file_format": 13, "time_col": [13, 15, 17, 18], "index_col": [13, 17, 18, 20, 31], "data_col": [13, 15, 17, 18, 20], "sparksess": 13, "downstream": 13, "write_dataset": 13, "df": [13, 15, 21], "create_hier_dataset": 13, "agg_dict": 13, "append": [13, 14], "sale": [13, 17, 18, 31], "sold": [13, 31], "sum": [13, 15, 25], "matrix": [13, 15], "udf": 13, "sql": 13, "applyinpanda": 13, "target_col": 13, "predict_on_train": 13, "group": 13, "nan": [13, 15, 20, 21, 31], "_err": 13, "train_test_split": 13, "anom_scor": [13, 25, 27, 32], "hier_matrix": 13, "trace": [13, 15], "wickramasuriya": [13, 15], "mint_reconcili": [13, 15], "orrespond": 13, "np": [13, 15, 22, 25, 27, 29, 32], "replac": [13, 15], "reconcil": [13, 15], "happen": [13, 14], "invertibletransformbas": 14, "introduc": 14, "transformfactori": 14, "inial": 14, "serial": 14, "compat": [14, 15], "even": 14, "pseudo": 14, "recov": [14, 23], "addition": [14, 27, 29], "transformcl": 14, "ident": [14, 25, 26, 29, 30], "possibli": 14, "inversion_st": 14, "requires_inversion_st": 14, "perfect": 14, "warn": [14, 15, 21, 23], "_invert": 14, "intermedi": 14, "destroi": 14, "upon": 14, "retain_inversion_st": 14, "prevent": 14, "proper_invers": 14, "identity_invers": 14, "accident": 14, "stale": 14, "alwai": [14, 16, 17], "noth": 14, "stateless": 14, "clip": 14, "lowerupperclip": 14, "lie": 14, "get_transform_class": 14, "movingaverag": [14, 23], "n_step": [14, 23], "movingpercentil": 14, "fewer": 14, "exponentialmovingaverag": [14, 15], "ci": 14, "un": 14, "unnorm": 14, "y_0": 14, "x_0": [14, 15], "y_i": 14, "y_": 14, "x_i": [14, 15], "ldot": [14, 15, 31], "confid": [14, 22, 28], "l_i": 14, "s_i": 14, "u_i": 14, "u_o": 14, "condfid": 14, "x_lb": 14, "x_ub": 14, "y_lb": 14, "y_ub": 14, "decai": 14, "differencetransform": [14, 23, 25], "lagtransform": 14, "compute_lag": 14, "var": [14, 15], "absval": 14, "lose": 14, "sign": 14, "normalize_bia": 14, "normalize_scal": [14, 27], "scalar": [14, 15], "is_train": 14, "meanvarnorm": [14, 23, 27, 31, 32], "learnabl": 14, "minmaxnorm": [14, 23], "boxcoxtransform": 14, "lmbda": 14, "offset": 14, "box": [14, 29], "cox": 14, "power": [14, 18], "stack": [14, 15], "adjac": [14, 15], "temporalresampl": [14, 23, 29, 30], "trainable_granular": [14, 29], "remove_non_overlap": [14, 15, 29], "aggregation_polici": [14, 15, 29], "missing_value_polici": [14, 15, 29], "interpol": [14, 15, 29], "tempor": 14, "gcd": [14, 15], "overlap": [14, 15], "span": [14, 15], "3660": [14, 15], "3540": [14, 15], "downsampl": [14, 15, 31], "upsampl": [14, 15], "treat": [14, 20, 25, 29], "emit": [14, 15, 21], "multivar_skip": [14, 25], "concret": [14, 21, 25, 29, 31], "t1": 14, "x1": [14, 15, 21], "t2": 14, "x2": [14, 21], "yield": [14, 15], "perfectli": 14, "divis": 14, "value_t": 14, "transformstack": 14, "sequenti": 14, "compris": [14, 15, 21], "held": 14, "check_align": [14, 15], "tell": 14, "inject": [14, 15, 17], "synthet": [14, 15, 16, 17, 20], "anom_prob": 14, "natural_bound": 14, "natrual": 14, "boundari": 14, "stai": 14, "random_is_anom": 14, "shock": [14, 17], "pos_prob": 14, "sd_rang": 14, "6": [14, 15, 17, 20, 21, 22, 23, 25, 27, 29, 31, 32], "anom_width_rang": 14, "persist_shock": 14, "tild": 14, "rwsd": 14, "sim": [14, 15], "unif": 14, "y_w": 14, "width": 14, "randomli": 14, "uniform": 14, "success": [14, 27], "random_sd_unit": 14, "random_anom_width": 14, "sudden": 14, "scale_rang": 14, "disturb": 14, "persist": 14, "thu": 14, "emul": 14, "afterward": 14, "v_t": 14, "random_scal": 14, "freq": [15, 17, 21], "stuff": 15, "j": 15, "np_time_stamp": 15, "np_valu": 15, "concat": [15, 32], "concaten": [15, 32], "bisect": [15, 21], "to_pd": [15, 21, 23, 25, 27, 28, 31, 32], "from_pd": [15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "__getitem__": [15, 16, 17], "__iter__": [15, 16, 17], "is_empti": 15, "empti": 15, "rtype": 15, "t_in_left": 15, "everyth": 15, "include_tf": 15, "exclud": [15, 27], "to_t": 15, "sai": 15, "four": 15, "unnam": [15, 21], "constructor": [15, 21], "interoper": 15, "present": [15, 21], "xn": 15, "xk": 15, "t_i": 15, "x1_i": 15, "xn_i": 15, "val_vector": 15, "queri": 15, "time_series_1": 15, "time_series_2": 15, "renam": 15, "mapper": 15, "is_align": [15, 21], "squeez": 15, "len": [15, 16, 17, 20, 21, 22, 29, 32], "to_csv": 15, "file_nam": 15, "check_tim": 15, "drop_nan": 15, "from_ts_list": 15, "ts_list": 15, "alignment_polici": 15, "alignpolici": 15, "fixedrefer": 15, "fixedgranular": 15, "outerjoin": 15, "innerjoin": 15, "intersect": 15, "assert_equal_timedelta": 15, "lambda": [15, 23], "ffill": 15, "fill": [15, 31], "bfill": 15, "nearest": 15, "closest": 15, "to_replac": 15, "to_pd_datetim": [15, 32], "truncat": [15, 29], "to_timestamp": 15, "granularity_str_to_second": 15, "get_gcd_timedelta": 15, "time_stamp_list": 15, "infer_granular": 15, "reindex_df": 15, "reindex": 15, "df_to_time_seri": 15, "timestamp_unit": 15, "data_io_decor": 15, "func": 15, "decor": 15, "docstr": 15, "csv_to_time_seri": 15, "err": [15, 31, 32], "sum_matrix": 15, "n_leav": 15, "strictli": [15, 23], "leaf": 15, "di": 15, "reflect": [15, 25, 29], "timeseriesgener": 15, "x0": 15, "nois": 15, "built": 15, "mtrand": 15, "randomst": 15, "distort": 15, "tdelta": 15, "dimension": [15, 26, 30, 31], "deflat": 15, "return_t": 15, "generatorcompos": 15, "per_generator_nois": 15, "generatorconcaten": 15, "string_output": 15, "undergo": 15, "fundament": 15, "certain": [15, 29], "could": [15, 20, 31], "consecut": 15, "connect": 15, "abc": 15, "get_time_series_valu": 15, "process_time_seri": 15, "return_rv": 15, "return_upd": 15, "scipi": [15, 22, 28], "version": [15, 21], "scalarconjprior": 15, "betabernoulli": 15, "bernoulli": 15, "x_1": 15, "x_n": 15, "mathbb": [15, 29, 31, 32], "theta_posterior": 15, "norminvgamma": 15, "inversegamma": 15, "wikipedia": 15, "murphi": 15, "mathcal": 15, "mu": 15, "mu_0": 15, "invgamma": 15, "n_0": 15, "mu_posterior": 15, "student": 15, "sigma2_posterior": 15, "sigma2": 15, "inversewishart": 15, "_d": 15, "invwishart": 15, "nu": 15, "sigma_posterior": 15, "bayesianlinreg": 15, "ordinari": 15, "m_0": 15, "b_0": 15, "lambda_0": 15, "t_1": 15, "t_n": 15, "row": [15, 20, 21, 25, 27, 31, 32], "ones": 15, "denot": 15, "w_": 15, "ol": 15, "lambda_n": 15, "w_n": 15, "w_0": 15, "alpha_n": 15, "alpha_0": 15, "beta_n": 15, "beta_0": 15, "posterior_explicit": 15, "pi": 15, "det": 15, "gamma": 15, "naiv": 15, "mid": 15, "geisser": 15, "1965": 15, "otim": 15, "v_0": 15, "kroneck": 15, "nu_n": 15, "nu_0": 15, "v_n": 15, "tw_n": 15, "nd": 15, "gamma_d": 15, "emphasi": 15, "add_batch": 15, "drop_batch": 15, "ex_valu": 15, "ex2_valu": 15, "ddof": 15, "moment": 15, "degre": 15, "freedom": 15, "mean_class": 15, "true_valu": 15, "corrected_valu": 15, "sd": 15, "se": 15, "recencyweightedvari": 15, "rwv": 15, "2_t": 15, "manipul": 16, "instal": [16, 17, 18, 27, 32], "merlion": [16, 19, 22, 23, 26, 27, 30, 31, 32], "realawscloudwatch": [16, 17], "m4": [16, 18, 22, 23, 28, 29, 32], "anom_dataset": 16, "rootdir": [16, 17, 18, 20, 31], "path_to_nab": 16, "forecast_dataset": 16, "path_to_m4": 16, "outlin": 16, "basedataset": [16, 17, 18], "tsadbasedataset": [16, 17], "customdataset": [16, 17, 18, 20, 31], "customanomalydataset": [16, 17, 20], "review": [16, 17, 18, 27, 32], "get_dataset": [16, 17, 18], "max_lead_sec": [16, 17], "max_lag_sec": [16, 17], "metadata_col": [16, 17, 18], "check_ts_for_metadata": [16, 17, 18], "iopscompetit": [16, 17], "valid_subset": [16, 17, 18], "load_label": [16, 17], "base_ts_subset": [16, 17], "anomaly_subset": [16, 17], "ucr": [16, 17], "smd": [16, 17], "url": [16, 17, 18], "smap": [16, 17], "msl": [16, 17, 26], "energypow": [16, 18], "seattletrail": [16, 18, 30], "solarpl": [16, 18], "__len__": [16, 17], "trainval": [16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "larg": [16, 17, 20, 26], "lazili": 16, "invok": [16, 25], "tsad": 17, "dataset_nam": [17, 18], "nab_realawscloudwatch": 17, "intend": 17, "signifi": 17, "someth": 17, "suit": 17, "purpos": [17, 19, 21, 26, 27, 30], "accur": [17, 18], "late": 17, "test_frac": [17, 18, 20, 31], "assume_no_anomali": [17, 20], "time_unit": [17, 18, 20], "throw": [17, 21], "fetch": [17, 18], "express": [17, 18, 20], "depart": [17, 18, 20], "dept": [17, 18, 20, 31], "col": [17, 18], "round": 17, "iop": 17, "competit": [17, 18], "ai": 17, "competition_detail": 17, "competition_id": 17, "29": [17, 20, 21, 31, 32], "kpi": [17, 21], "gather": [17, 32], "tech": 17, "compani": 17, "alibaba": 17, "sogou": 17, "tencent": 17, "baidu": 17, "ebai": 17, "1min": 17, "prohibit": 17, "hard": 17, "35min": 17, "placehold": 17, "categor": 17, "domain": [17, 18], "artifici": 17, "artificialwithanomali": 17, "realadexchang": 17, "realknowncaus": [17, 24, 25, 27], "realtraff": 17, "realtweet": 17, "datafil": 17, "label_list": 17, "disallow": 17, "earlier": 17, "sythet": 17, "total": 17, "horizont": [17, 20], "upward_downward": [17, 20], "hexagon": 17, "ml": 17, "uc": 17, "riversid": 17, "archiv": 17, "hoang": 17, "anh": 17, "dau": 17, "eamonn": 17, "keogh": 17, "kaveh": 17, "kamgar": 17, "chin": 17, "chia": 17, "michael": 17, "yeh": 17, "yan": 17, "zhu": 17, "shaghayegh": 17, "gharghabi": 17, "chotirat": 17, "ann": 17, "ratanamahatana": 17, "yanp": 17, "bing": 17, "hu": 17, "nurjahan": 17, "begum": 17, "anthoni": 17, "bagnal": 17, "abdullah": 17, "mueen": 17, "gustavo": 17, "batista": 17, "classif": 17, "www": [17, 18], "edu": 17, "time_series_data_2018": 17, "server": 17, "internet": 17, "publicli": 17, "28": [17, 20, 21, 25, 26, 31], "monitor": 17, "33": [17, 20, 31], "netmanaiop": 17, "omnianomali": 17, "servermachinedataset": 17, "dropbox": 17, "x53ph5cru62kv0f": 17, "tar": 17, "gz": 17, "dl": 17, "7": [17, 20, 21, 22, 23, 25, 27, 29, 30, 32], "soil": 17, "moistur": 17, "passiv": 17, "satellit": 17, "mar": 17, "scienc": 17, "laboratori": 17, "rover": 17, "realworld": 17, "public": 17, "world": 17, "expert": 17, "nasa": 17, "khundman": 17, "telemanom": 17, "uv9ojw353qwzqht": 17, "realli": 18, "m4_hourli": 18, "identifi": 18, "busi": 18, "financi": 18, "econom": 18, "23": [18, 21, 25, 26, 32], "000": 18, "quarterli": 18, "48": [18, 20, 21, 22, 23, 29], "359": 18, "227": 18, "414": [18, 22, 23, 28, 29, 32], "mcompetit": 18, "usag": 18, "kaggl": 18, "robikscub": 18, "consumpt": 18, "seattl": 18, "trail": 18, "pedestrian": 18, "bike": 18, "traffic": 18, "citi": 18, "burk": 18, "gilman": 18, "num_column": 18, "solar": 18, "plant": 18, "nrel": 18, "gov": 18, "405": [18, 21], "block": 19, "broader": 19, "takeawai": 19, "gentl": 19, "introduct": 19, "quantit": [19, 24, 28], "With": 19, "prepar": 19, "suggest": [19, 27, 32], "proof": 19, "notebook": [20, 21, 22, 25, 27, 29, 32], "explain": [20, 21, 25, 27, 29, 32], "glob": 20, "anom_dir": 20, "join": [20, 21, 25, 29, 31], "synthetic_anomali": 20, "print": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "horizontal_dip_anomali": 20, "horizontal_level_anomali": 20, "horizontal_shock_anomali": 20, "horizontal_spike_anomali": 20, "horizontal_trend_anomali": 20, "seasonal_dip_anomali": 20, "seasonal_level_anomali": 20, "seasonal_shock_anomali": 20, "seasonal_spike_anomali": 20, "seasonal_trend_anomali": 20, "upward_downward_dip_anomali": 20, "upward_downward_level_anomali": 20, "upward_downward_shock_anomali": 20, "upward_downward_spike_anomali": 20, "upward_downward_trend_anomali": 20, "ipython": 20, "displai": [20, 31], "read_csv": [20, 21], "928031": 20, "300": 20, "156620": 20, "390650": 20, "900": 20, "400804": 20, "1200": 20, "874490": 20, "9995": 20, "2998500": 20, "362724": 20, "9996": 20, "2998800": 20, "657373": 20, "9997": 20, "2999100": 20, "472341": 20, "9998": 20, "2999400": 20, "033154": 20, "9999": 20, "2999700": 20, "950466": 20, "10000": 20, "577883": 20, "059779": 20, "137609": 20, "743360": 20, "998400": 20, "388685": 20, "017828": 20, "196791": 20, "234555": 20, "111685": 20, "characterist": 20, "absent": 20, "75": [20, 23], "There": [20, 25, 29], "18": [20, 21, 25, 26, 28, 31, 32], "Its": [20, 29], "02": [20, 21, 25, 26, 27, 30, 31, 32], "04": [20, 21, 25, 30, 31, 32], "55": [20, 21, 23, 25, 26, 27], "17": [20, 21, 23, 25, 27, 29, 31, 32], "19": [20, 21, 23, 25, 26, 27, 30, 31, 32], "57": [20, 21, 26], "opportun": 20, "retail": [20, 31], "corresond": 20, "walmart": [20, 31], "walmart_mini": [20, 31], "weekly_sal": [20, 31], "temperatur": [20, 31], "fuel_pric": [20, 31], "markdown1": [20, 31], "markdown2": [20, 31], "markdown3": [20, 31], "markdown4": [20, 31], "markdown5": [20, 31], "cpi": [20, 31], "unemploy": [20, 31], "isholidai": [20, 31], "2010": [20, 31], "24924": 20, "42": [20, 25, 26], "31": [20, 21, 25, 31, 32], "572": [20, 31], "211": [20, 31], "096358": 20, "106": 20, "46039": 20, "49": [20, 21, 31], "38": [20, 31], "51": [20, 26, 29], "548": [20, 31], "242170": 20, "41595": 20, "39": [20, 21, 23, 25, 29, 31], "93": 20, "514": [20, 31], "289143": 20, "26": [20, 21, 29, 31], "19403": 20, "54": [20, 23], "46": [20, 21, 23, 26, 31], "63": [20, 25], "561": [20, 31], "319643": 20, "03": [20, 21, 25, 29, 30, 31, 32], "21827": 20, "625": [20, 31], "350143": 20, "2855": 20, "09": [20, 21, 25, 26, 27, 29, 31, 32], "37104": [20, 31], "67": [20, 31], "79": [20, 31], "45": [20, 25, 27, 31], "666": [20, 31], "7106": [20, 31], "91": [20, 31], "65": [20, 31], "1549": [20, 31], "3946": [20, 31], "222": [20, 31], "616433": [20, 31], "565": [20, 31], "2856": 20, "36361": [20, 31], "70": [20, 31], "27": [20, 21, 25, 26, 31], "617": [20, 21, 31], "6037": [20, 31], "76": [20, 31], "3027": [20, 31], "37": [20, 26, 31], "3853": [20, 31], "40": [20, 25, 26, 27, 31], "815930": [20, 31], "170": [20, 31], "2857": [20, 25], "35332": [20, 31], "34": [20, 26, 31], "97": [20, 31], "601": [20, 31], "2145": [20, 31], "586": [20, 31, 32], "83": [20, 23, 31], "10421": [20, 31], "223": [20, 31], "015426": [20, 31], "2858": 20, "35721": [20, 31], "68": [20, 31], "08": [20, 21, 25, 31, 32], "594": [20, 31], "4461": [20, 31], "89": [20, 31], "14": [20, 21, 25, 27, 29, 31, 32], "1579": [20, 31], "2642": [20, 31], "059808": [20, 31], "2859": 20, "34260": [20, 31], "69": [20, 31], "506": [20, 31], "6152": [20, 31], "59": [20, 21, 31], "129": [20, 31], "77": [20, 29, 31], "272": [20, 31], "2924": [20, 31], "078337": [20, 31], "2860": 20, "okai": 20, "now": [20, 25, 27, 29, 32], "69634": 20, "210": [20, 29, 31], "752605": [20, 31], "324": [20, 31], "63393": 20, "897994": [20, 31], "66589": 20, "945160": [20, 31], "61875": 20, "975957": [20, 31], "67041": 20, "47": [20, 21, 23, 31], "006754": [20, 31], "57424": 20, "62955": 20, "63083": 20, "60502": 20, "63992": 20, "36": [20, 25, 30], "143": [20, 29, 31], "plu": 20, "benchmark_anomali": 20, "py": [20, 21], "7d": [20, 25], "data_root": 20, "data_kwarg": 20, "benchmark_forecast": 20, "throughout": 21, "think": 21, "timestamp_milli": 21, "kpi_label": 21, "1583140320000": 21, "667": 21, "118": [21, 23], "1583140380000": 21, "611": 21, "751": 21, "1583140440000": 21, "599": [21, 29], "456": 21, "1583140500000": 21, "621": 21, "446": 21, "1583140560000": 21, "1418": 21, "234": 21, "86802": 21, "1588376760000": 21, "874": 21, "214": 21, "86803": 21, "1588376820000": 21, "937": 21, "929": 21, "86804": 21, "1588376880000": 21, "1031": 21, "279": 21, "86805": 21, "1588376940000": 21, "1099": 21, "698": 21, "86806": 21, "1588377000000": 21, "935": 21, "86807": 21, "time_idx_df": 21, "to_datetim": [21, 23], "set_index": 21, "2020": 21, "13": [21, 25, 27, 29, 30, 31, 32], "kpi_equival": 21, "__name__": [21, 25, 26, 29, 30, 31], "isinst": 21, "dtype": 21, "float64": 21, "lt": [21, 22, 23, 25, 26, 28, 29, 30, 32], "gt": 21, "breviti": 21, "1583140320": 21, "1583140380": 21, "1583140440": 21, "1583140500": 21, "1583140560": 21, "datetime64": 21, "univaraiatetimeseri": 21, "approach": 21, "robust": 21, "ordereddict": [21, 32], "time_series_list": 21, "time_series_dict": 21, "kpi_renam": 21, "recovered_time_idx_df": 21, "kpi1": 21, "kpi2": 21, "assert": 21, "illustr": [21, 25, 29], "not_align": 21, "value_1": 21, "value_k": 21, "thing": [21, 22, 25, 29], "isn": [21, 27, 29, 32], "runtimeerror": 21, "still": 21, "misalign": 21, "abhatnagar": [21, 24, 27], "desktop": [21, 24, 27], "merlion_publ": [21, 24, 27], "userwarn": 21, "_union_": 21, "customiz": 21, "highlight": 21, "regardless": 21, "1166": 21, "819": 21, "1345": 21, "504": 21, "1061": 21, "391": 21, "1260": 21, "1202": 21, "009": 21, "1154": 21, "397": 21, "56": 21, "1270": 21, "292": 21, "1160": 21, "761": 21, "58": 21, "1082": 21, "076": 21, "1167": 21, "297": 21, "38160": 21, "1583226720": 21, "07": [21, 27, 29, 32], "1132": 21, "564": 21, "1087": 21, "037": 21, "984": 21, "432": 21, "1085": 21, "008": 21, "1020": 21, "1440": 21, "32": [21, 23, 24, 26], "1296": 21, "091": 21, "1323": 21, "743": 21, "1203": 21, "672": 21, "1278": 21, "720": 21, "1217": 21, "877": 21, "85376": 21, "1381": 21, "110": 21, "1807": 21, "039": 21, "1833": 21, "385": 21, "1674": 21, "412": 21, "1683": 21, "194": 21, "1431": 21, "hyper": 22, "pyplot": [22, 23, 24, 25, 27, 28, 29, 32], "plt": [22, 23, 24, 25, 27, 28, 29, 32], "norm": [22, 23, 28], "basicconfig": 22, "info": [22, 23, 25, 29, 31], "test_data": [22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "add_subplot": [22, 23, 25, 27, 29, 32], "111": [22, 23, 25, 27, 29, 32], "axvlin": [22, 23, 25, 27, 29, 32], "lw": [22, 25, 27, 29, 32], "799": 22, "18it": 22, "700": [22, 29, 32], "enough": 22, "config1": [22, 25, 29], "model1": [22, 25, 26, 29, 30], "train_pr": [22, 30], "train_err": 22, "forecast1": [22, 29], "stderr1": [22, 29], "smape1": [22, 29], "4f": [22, 24, 25, 26, 27, 28, 30], "4491": 22, "groud": 22, "auto_": 22, "config2": [22, 25, 29], "model2": [22, 25, 26, 27, 29, 30, 32], "forecast2": [22, 29], "stderr2": [22, 29], "smape2": [22, 29], "6991": 22, "config3": [22, 25, 29], "model3": [22, 25, 26, 29, 30], "enforce_stationar": 22, "enforce_invert": 22, "forecast3": [22, 29], "stderr3": [22, 29], "smape3": [22, 29], "5288": 22, "md": [23, 27, 31, 32], "739": [23, 32], "15it": 23, "def": [23, 27, 29, 32], "eval_model": 23, "apply_invers": 23, "og_train": 23, "yhat_train": 23, "yhat_test": 23, "2f": [23, 31], "legend": 23, "get_model": 23, "No": 23, "disabl": [23, 25, 29], "88": 23, "41": 23, "73": [23, 25], "powertransform": 23, "61": 23, "guarante": 23, "53": 23, "71": 23, "1f": 23, "test_label": [24, 25, 26, 27], "ec2_request_latency_system_failur": [24, 25, 27], "kept": [24, 25, 27], "machine_temperature_system_failur": [24, 25, 27], "test_pr": [24, 26, 28, 30], "took": 24, "correctli": 24, "mttd": [24, 25, 26], "6667": [24, 25, 26, 27], "guid": [25, 29], "through": [25, 29], "1234": 25, "isenilov": 25, "dev": 25, "train_label": [25, 27], "hous": [25, 29], "syntax": [25, 29], "event": [25, 27], "ensemble_config": [25, 29], "train_scores_1": 25, "ntrain": [25, 29], "train_scores_2": 25, "post_rule_train_config_3": 25, "train_scores_3": 25, "ensemble_post_rule_train_config": 25, "train_scores_": 25, "2263": 25, "5000": [25, 27], "scores_1": 25, "scores_1_df": 25, "iloc": [25, 27], "labels_1": 25, "labels_1_df": 25, "locat": 25, "challeng": 25, "424103": 25, "418938": 25, "484891": 25, "500257": 25, "449213": 25, "2014": [25, 27], "419456": 25, "415807": 25, "406724": 25, "427094": 25, "428348": 25, "19279": 25, "251397": 25, "35": [25, 27], "681691": 25, "914430": 25, "260543": 25, "738462": 25, "06": [25, 27, 29, 32], "303482": 25, "233514": 25, "791805": 25, "535895": 25, "314500": 25, "850349": 25, "170855": 25, "537919": 25, "451974": 25, "550075": 25, "359105": 25, "175556": 25, "675433": 25, "005116": 25, "247573": 25, "701491": 25, "772563": 25, "810997": 25, "702972": 25, "781997": 25, "709952": 25, "698602": 25, "790835": 25, "748293": 25, "711750": 25, "800493": 25, "852493": 25, "748630": 25, "734366": 25, "750652": 25, "719052": 25, "853260": 25, "771522": 25, "825713": 25, "700873": 25, "scores_2": 25, "labels_2": 25, "scores_3": 25, "labels_3": 25, "scores_": 25, "labels_": 25, "fairli": [25, 29], "definit": 25, "1667": 25, "0000": [25, 27], "2500": 25, "3636": 25, "3750": 25, "5455": 25, "4000": 25, "abl": 25, "greatli": 25, "led": 25, "outcom": 25, "quit": [25, 32], "assist": [25, 29], "demonstr": [25, 27, 29, 31], "pprint": [25, 29], "makedir": [25, 29], "exist_ok": [25, 29], "isf": 25, "pp": [25, 29], "prettyprint": [25, 29], "model2_load": [25, 29], "model2_factory_load": [25, 29], "38992633996347176": 25, "4187750781361715": 25, "445336977389891": 25, "47974261897360404": 25, "5271631189090943": 25, "8301789920204418": 25, "032894437734716": 25, "2263155501877727": 25, "nest": [25, 29], "ve": [25, 27, 29, 32], "selector": [25, 29, 30], "selector_load": [25, 29], "selector_factory_load": [25, 29], "n_model": [25, 29], "0005687426322338457": 25, "8270481271598537": 25, "6872394706496963": 25, "371538318320157": 25, "9246837154735017": 25, "064135464545045": 25, "032821539569336": 25, "12827092909009": 25, "00034442266386701815": 25, "50672704564658": 25, "0444911207158671": 25, "5495525355806337": 25, "9643452887114796": 25, "831069032732285": 25, "66213806546457": 25, "scenario": [25, 29], "choic": [25, 29], "unchang": 25, "deploi": 25, "train_scor": [25, 26], "test_scor": 25, "604800": 25, "5783700": 25, "1501940": 25, "88it": 25, "1209600": 25, "421704": 25, "52it": 25, "1814400": 25, "293996": 25, "29it": [25, 29], "2419200": [25, 26], "241431": 25, "47it": 25, "52": 25, "3024000": 25, "185310": 25, "19it": [25, 28], "3628800": 25, "186082": 25, "04it": 25, "4233600": 25, "168778": 25, "34it": 25, "84": 25, "4838400": 25, "166406": 25, "09it": 25, "94": 25, "5443200": 25, "138865": 25, "20it": 25, "160502": 25, "25it": 25, "drift": 25, "cover": [26, 29, 30, 31], "_max": 26, "ensemble_": 26, "5998": 26, "6001": 26, "9659": 26, "8312": 26, "8935": 26, "9638": 26, "8192": 26, "8856": 26, "9620": 26, "8184": 26, "8844": 26, "1w": 26, "4w": 26, "4423680": 26, "101454": 26, "83it": 26, "34157": 26, "67it": 26, "9522": 26, "8027": 26, "8711": 26, "160149": 26, "84it": [26, 30], "9666": 26, "8321": 26, "8943": 26, "6002": 26, "83276": 26, "94it": 26, "6532": 26, "28002": 26, "66it": [26, 30], "9453": 26, "8209": 26, "8787": 26, "minim": [27, 32], "instruct": [27, 32], "contribut": [27, 32], "awai": 27, "_default_transform": [27, 32], "smaller": [27, 28], "_default_threshold": 27, "__init__": [27, 32], "clariti": 27, "superclass": 27, "super": [27, 32], "_default_post_rule_train_config": 27, "That": [27, 32], "assumpt": [27, 29, 32], "_get_anomaly_scor": 27, "ll": [27, 32], "065700": 27, "097140": 27, "908860": 27, "892315": 27, "703186": 27, "041999": 27, "494303": 27, "234568": 27, "160902": 27, "055357": 27, "3403": 27, "notic": 27, "out": 27, "lot": [27, 31], "anom_label": 27, "520900": 27, "065935": 27, "825172": 27, "846644": 27, "050966": 27, "152393": 27, "771146": 27, "102446": 27, "023830": 27, "870839": 27, "19280": 27, "024196": 27, "012073": 27, "468464": 27, "124039": 27, "491421": 27, "819248": 27, "823173": 27, "822201": 27, "677379": 27, "300280": 27, "721": 27, "qualit": [27, 32], "aggegatealarm": 27, "anom_labels2": 27, "770": 28, "test_err": 28, "band": 28, "ppf": 28, "025": 28, "975": 28, "1944": 28, "9331": 28, "852": 29, "stochast": 29, "lvert": [29, 32], "rvert": [29, 32], "selector_config": 29, "forecast_": 29, "stderr_": 29, "shown": 29, "sub_test_data": 29, "prefix": 29, "explicit": 29, "five": 29, "3f": [29, 32], "understand": 29, "why": [29, 31], "attain": 29, "795": 29, "913": 29, "377": 29, "smape_": 29, "metric_valu": 29, "537074367680436": 29, "691874724892063": 29, "72980301555831": 29, "create_evalu": 29, "scratch": 29, "6h": 29, "12h": 29, "14d": 29, "black": 29, "model1_evalu": 29, "model1_train_result": 29, "model1_test_result": 29, "169200": 29, "22208": 29, "87it": 29, "013": 29, "281": 29, "ensemble_evalu": 29, "ensemble_train_result": 29, "ensemble_test_result": 29, "43200": 29, "12999": 29, "69it": 29, "86400": 29, "12030": 29, "39it": 29, "129600": 29, "11949": 29, "85it": 29, "7586": 29, "00it": 29, "896": 29, "626": 29, "3rd": 30, "defaultforeacst": 30, "moreov": [30, 31], "pick": 30, "train_stderr": [30, 32], "31550400": 30, "328262": 30, "154110": 30, "26it": 30, "successfulli": 30, "5235": 30, "132": 30, "8147": 30, "2208": 30, "140": 30, "2771": 30, "31528800": 30, "255804": 30, "57it": 30, "0339": 30, "4165": 30, "121688": 30, "1032": 30, "112": 30, "2604": 30, "goal": 31, "x_k": 31, "know": 31, "outsid": 31, "consum": 31, "price": 31, "unemployemnt": 31, "knowledg": 31, "markdown": 31, "39602": 31, "37984": 31, "44": 31, "38889": 31, "43": 31, "41137": 31, "74": 31, "39883": 31, "endog": 31, "account": 31, "impact": 31, "demand": 31, "problem": 31, "principl": 31, "ourselv": 31, "pred": [31, 32], "exog_model": 31, "exog_pr": 31, "exog_err": 31, "exog_smap": 31, "cmdstanpi": 31, "chain": 31, "scene": 31, "inspect": 31, "repeatrecentconfig": 32, "repeatrec": 32, "most_recent_valu": 32, "train_forecast": 32, "notion": 32, "_forecast": 32, "els": 32, "repeat": 32, "upcom": 32, "care": 32, "val": 32, "pend": 32, "prev_forecast": 32, "849": 32, "11it": 32, "h1": 32, "605": 32, "559": 32, "820": 32, "790": 32, "784": 32, "752": 32, "684": 32, "166": 32, "straightforward": 32, "stub": 32, "header": 32, "heavi": 32, "lift": 32, "repeatrecentdetectorconfig": 32, "_default_post_rul": 32, "roughli": 32, "repeatrecentdetector": 32, "212986": 32, "120839": 32, "000000": 32, "171719": 32, "305278": 32, "190799": 32, "038160": 32, "203519": 32, "082679": 32, "349798": 32, "413397": 32, "756835": 32, "966714": 32, "202032": 32, "291072": 32, "380111": 32, "341952": 32, "246552": 32, "163873": 32, "953994": 32, "686876": 32, "286198": 32, "178079": 32, "559676": 32, "928554": 32, "329232": 32, "348311": 32, "316512": 32, "081193": 32, "540597": 32, "426117": 32, "108119": 32, "311638": 32, "712316": 32, "214752": 32, "373751": 32, "399191": 32, "221112": 32, "049393": 32, "737755": 32, "381598": 32, "076320": 32, "489717": 32, "814075": 32, "979434": 32, "922194": 32, "782275": 32, "642356": 32, "457917": 32, "222599": 32, "158999": 32}, "objects": {"": [[1, 0, 0, "-", "merlion"], [16, 0, 0, "-", "ts_datasets"]], "merlion": [[3, 0, 0, "-", "evaluate"], [4, 0, 0, "-", "models"], [1, 0, 0, "-", "plot"], [12, 0, 0, "-", "post_process"], [13, 0, 0, "-", "spark"], [14, 0, 0, "-", "transform"], [15, 0, 0, "-", "utils"]], "merlion.evaluate": [[3, 0, 0, "-", "anomaly"], [3, 0, 0, "-", "base"], [3, 0, 0, "-", "forecast"]], "merlion.evaluate.anomaly": [[3, 1, 1, "", "ScoreType"], [3, 1, 1, "", "TSADEvaluator"], [3, 1, 1, "", "TSADEvaluatorConfig"], [3, 1, 1, "", "TSADMetric"], [3, 1, 1, "", "TSADScoreAccumulator"], [3, 5, 1, "", "accumulate_tsad_score"]], "merlion.evaluate.anomaly.ScoreType": [[3, 2, 1, "", "PointAdjusted"], [3, 2, 1, "", "Pointwise"], [3, 2, 1, "", "RevisedPointAdjusted"]], "merlion.evaluate.anomaly.TSADEvaluator": [[3, 2, 1, "", "config_class"], [3, 3, 1, "", "default_retrain_kwargs"], [3, 3, 1, "", "evaluate"], [3, 3, 1, "", "get_predict"], [3, 4, 1, "", "max_delay_sec"], [3, 4, 1, "", "max_early_sec"]], "merlion.evaluate.anomaly.TSADMetric": [[3, 2, 1, "", "F1"], [3, 2, 1, "", "F2"], [3, 2, 1, "", "F5"], [3, 2, 1, "", "MeanTimeToDetect"], [3, 2, 1, "", "NABScore"], [3, 2, 1, "", "NABScoreLowFN"], [3, 2, 1, "", "NABScoreLowFP"], [3, 2, 1, "", "PointAdjustedF1"], [3, 2, 1, "", "PointAdjustedPrecision"], [3, 2, 1, "", "PointAdjustedRecall"], [3, 2, 1, "", "PointwiseF1"], [3, 2, 1, "", "PointwisePrecision"], [3, 2, 1, "", "PointwiseRecall"], [3, 2, 1, "", "Precision"], [3, 2, 1, "", "Recall"]], "merlion.evaluate.anomaly.TSADScoreAccumulator": [[3, 3, 1, "", "f1"], [3, 3, 1, "", "f_beta"], [3, 3, 1, "", "mean_anomaly_duration"], [3, 3, 1, "", "mean_detected_anomaly_duration"], [3, 3, 1, "", "mean_time_to_detect"], [3, 3, 1, "", "nab_score"], [3, 3, 1, "", "precision"], [3, 3, 1, "", "recall"]], "merlion.evaluate.base": [[3, 1, 1, "", "EvaluatorBase"], [3, 1, 1, "", "EvaluatorConfig"]], "merlion.evaluate.base.EvaluatorBase": [[3, 4, 1, "", "cadence"], [3, 2, 1, "", "config_class"], [3, 3, 1, "", "default_retrain_kwargs"], [3, 3, 1, "", "default_train_kwargs"], [3, 3, 1, "", "evaluate"], [3, 3, 1, "", "get_predict"], [3, 4, 1, "", "horizon"], [3, 4, 1, "", "retrain_freq"], [3, 4, 1, "", "train_window"]], "merlion.evaluate.base.EvaluatorConfig": [[3, 4, 1, "", "cadence"], [3, 4, 1, "", "horizon"], [3, 3, 1, "", "to_dict"]], "merlion.evaluate.forecast": [[3, 1, 1, "", "ForecastEvaluator"], [3, 1, 1, "", "ForecastEvaluatorConfig"], [3, 1, 1, "", "ForecastMetric"], [3, 1, 1, "", "ForecastScoreAccumulator"], [3, 5, 1, "", "accumulate_forecast_score"]], "merlion.evaluate.forecast.ForecastEvaluator": [[3, 4, 1, "", "cadence"], [3, 2, 1, "", "config_class"], [3, 3, 1, "", "evaluate"], [3, 4, 1, "", "horizon"]], "merlion.evaluate.forecast.ForecastEvaluatorConfig": [[3, 4, 1, "", "cadence"], [3, 4, 1, "", "horizon"]], "merlion.evaluate.forecast.ForecastMetric": [[3, 2, 1, "", "MAE"], [3, 2, 1, "", "MARRE"], [3, 2, 1, "", "MASE"], [3, 2, 1, "", "MSIS"], [3, 2, 1, "", "RMSE"], [3, 2, 1, "", "RMSPE"], [3, 2, 1, "", "sMAPE"]], "merlion.evaluate.forecast.ForecastScoreAccumulator": [[3, 3, 1, "", "check_before_eval"], [3, 3, 1, "", "mae"], [3, 3, 1, "", "marre"], [3, 3, 1, "", "mase"], [3, 3, 1, "", "msis"], [3, 3, 1, "", "rmse"], [3, 3, 1, "", "rmspe"], [3, 3, 1, "", "smape"]], "merlion.models": [[5, 0, 0, "-", "anomaly"], [8, 0, 0, "-", "automl"], [4, 0, 0, "-", "base"], [4, 0, 0, "-", "defaults"], [9, 0, 0, "-", "ensemble"], [4, 0, 0, "-", "factory"], [10, 0, 0, "-", "forecast"], [4, 0, 0, "-", "layers"], [11, 0, 0, "-", "utils"]], "merlion.models.anomaly": [[5, 0, 0, "-", "autoencoder"], [5, 0, 0, "-", "base"], [6, 0, 0, "-", "change_point"], [5, 0, 0, "-", "dagmm"], [5, 0, 0, "-", "dbl"], [5, 0, 0, "-", "deep_point_anomaly_detector"], [7, 0, 0, "-", "forecast_based"], [5, 0, 0, "-", "isolation_forest"], [5, 0, 0, "-", "lstm_ed"], [5, 0, 0, "-", "random_cut_forest"], [5, 0, 0, "-", "spectral_residual"], [5, 0, 0, "-", "stat_threshold"], [5, 0, 0, "-", "vae"], [5, 0, 0, "-", "windstats"], [5, 0, 0, "-", "zms"]], "merlion.models.anomaly.autoencoder": [[5, 1, 1, "", "AutoEncoder"], [5, 1, 1, "", "AutoEncoderConfig"]], "merlion.models.anomaly.autoencoder.AutoEncoder": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.base": [[5, 1, 1, "", "DetectorBase"], [5, 1, 1, "", "DetectorConfig"], [5, 1, 1, "", "MultipleTimeseriesDetectorMixin"], [5, 1, 1, "", "NoCalibrationDetectorConfig"]], "merlion.models.anomaly.base.DetectorBase": [[5, 4, 1, "", "calibrator"], [5, 2, 1, "", "config_class"], [5, 3, 1, "", "get_anomaly_label"], [5, 3, 1, "", "get_anomaly_score"], [5, 3, 1, "", "get_figure"], [5, 3, 1, "", "plot_anomaly"], [5, 3, 1, "", "plot_anomaly_plotly"], [5, 4, 1, "", "post_rule"], [5, 4, 1, "", "threshold"], [5, 3, 1, "", "train"], [5, 3, 1, "", "train_post_process"]], "merlion.models.anomaly.base.DetectorConfig": [[5, 2, 1, "", "calibrator"], [5, 2, 1, "", "enable_calibrator"], [5, 2, 1, "", "enable_threshold"], [5, 3, 1, "", "from_dict"], [5, 4, 1, "", "post_rule"], [5, 2, 1, "", "threshold"]], "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin": [[5, 3, 1, "", "train_multiple"]], "merlion.models.anomaly.base.NoCalibrationDetectorConfig": [[5, 4, 1, "", "calibrator"], [5, 4, 1, "", "enable_calibrator"]], "merlion.models.anomaly.change_point": [[6, 0, 0, "-", "bocpd"]], "merlion.models.anomaly.change_point.bocpd": [[6, 1, 1, "", "BOCPD"], [6, 1, 1, "", "BOCPDConfig"], [6, 1, 1, "", "ChangeKind"]], "merlion.models.anomaly.change_point.bocpd.BOCPD": [[6, 4, 1, "", "change_kind"], [6, 2, 1, "", "config_class"], [6, 4, 1, "", "cp_prior"], [6, 3, 1, "", "get_anomaly_score"], [6, 3, 1, "", "get_figure"], [6, 4, 1, "", "lag"], [6, 4, 1, "", "last_train_time"], [6, 4, 1, "", "min_likelihood"], [6, 4, 1, "", "n_seen"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"], [6, 3, 1, "", "train_pre_process"], [6, 3, 1, "", "update"]], "merlion.models.anomaly.change_point.bocpd.BOCPDConfig": [[6, 4, 1, "", "change_kind"]], "merlion.models.anomaly.change_point.bocpd.ChangeKind": [[6, 2, 1, "", "Auto"], [6, 2, 1, "", "LevelShift"], [6, 2, 1, "", "TrendChange"]], "merlion.models.anomaly.dagmm": [[5, 1, 1, "", "DAGMM"], [5, 1, 1, "", "DAGMMConfig"]], "merlion.models.anomaly.dagmm.DAGMM": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"], [5, 3, 1, "", "train_multiple"]], "merlion.models.anomaly.dbl": [[5, 1, 1, "", "DynamicBaseline"], [5, 1, 1, "", "DynamicBaselineConfig"], [5, 1, 1, "", "Segment"], [5, 1, 1, "", "Segmenter"], [5, 1, 1, "", "Trend"]], "merlion.models.anomaly.dbl.DynamicBaseline": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "data"], [5, 4, 1, "", "fixed_period"], [5, 3, 1, "", "get_baseline"], [5, 3, 1, "", "get_baseline_figure"], [5, 3, 1, "", "get_relevant"], [5, 4, 1, "", "has_fixed_period"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"], [5, 4, 1, "", "train_window"], [5, 3, 1, "", "update"]], "merlion.models.anomaly.dbl.DynamicBaselineConfig": [[5, 3, 1, "", "determine_train_window"], [5, 4, 1, "", "fixed_period"], [5, 3, 1, "", "to_dict"], [5, 4, 1, "", "trends"]], "merlion.models.anomaly.dbl.Segment": [[5, 3, 1, "", "add"], [5, 3, 1, "", "drop"], [5, 3, 1, "", "score"]], "merlion.models.anomaly.dbl.Segmenter": [[5, 3, 1, "", "add"], [5, 2, 1, "", "day_delta"], [5, 3, 1, "", "day_key"], [5, 3, 1, "", "drop"], [5, 3, 1, "", "get_baseline"], [5, 2, 1, "", "hour_delta"], [5, 2, 1, "", "min_delta"], [5, 3, 1, "", "reset"], [5, 3, 1, "", "score"], [5, 3, 1, "", "segment_key"], [5, 4, 1, "", "trend"], [5, 4, 1, "", "trends"], [5, 3, 1, "", "weekday_key"], [5, 4, 1, "", "wind_delta"], [5, 3, 1, "", "window_key"], [5, 2, 1, "", "zero_delta"]], "merlion.models.anomaly.dbl.Trend": [[5, 2, 1, "", "daily"], [5, 2, 1, "", "monthly"], [5, 2, 1, "", "weekly"]], "merlion.models.anomaly.deep_point_anomaly_detector": [[5, 1, 1, "", "DeepPointAnomalyDetector"], [5, 1, 1, "", "DeepPointAnomalyDetectorConfig"]], "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.forecast_based": [[7, 0, 0, "-", "arima"], [7, 0, 0, "-", "base"], [7, 0, 0, "-", "ets"], [7, 0, 0, "-", "lstm"], [7, 0, 0, "-", "mses"], [7, 0, 0, "-", "prophet"], [7, 0, 0, "-", "sarima"]], "merlion.models.anomaly.forecast_based.arima": [[7, 1, 1, "", "ArimaDetector"], [7, 1, 1, "", "ArimaDetectorConfig"]], "merlion.models.anomaly.forecast_based.arima.ArimaDetector": [[7, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.base": [[7, 1, 1, "", "ForecastingDetectorBase"]], "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase": [[7, 3, 1, "", "forecast_to_anom_score"], [7, 3, 1, "", "get_anomaly_label"], [7, 3, 1, "", "get_anomaly_score"], [7, 3, 1, "", "get_figure"], [7, 3, 1, "", "plot_anomaly"], [7, 3, 1, "", "plot_anomaly_plotly"], [7, 3, 1, "", "plot_forecast"], [7, 3, 1, "", "plot_forecast_plotly"], [7, 3, 1, "", "train"], [7, 3, 1, "", "train_post_process"]], "merlion.models.anomaly.forecast_based.ets": [[7, 1, 1, "", "ETSDetector"], [7, 1, 1, "", "ETSDetectorConfig"]], "merlion.models.anomaly.forecast_based.ets.ETSDetector": [[7, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.lstm": [[7, 1, 1, "", "LSTMDetector"], [7, 1, 1, "", "LSTMDetectorConfig"]], "merlion.models.anomaly.forecast_based.lstm.LSTMDetector": [[7, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.mses": [[7, 1, 1, "", "MSESDetector"], [7, 1, 1, "", "MSESDetectorConfig"]], "merlion.models.anomaly.forecast_based.mses.MSESDetector": [[7, 2, 1, "", "config_class"], [7, 3, 1, "", "get_anomaly_score"], [7, 4, 1, "", "online_updates"]], "merlion.models.anomaly.forecast_based.prophet": [[7, 1, 1, "", "ProphetDetector"], [7, 1, 1, "", "ProphetDetectorConfig"]], "merlion.models.anomaly.forecast_based.prophet.ProphetDetector": [[7, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.sarima": [[7, 1, 1, "", "SarimaDetector"], [7, 1, 1, "", "SarimaDetectorConfig"]], "merlion.models.anomaly.forecast_based.sarima.SarimaDetector": [[7, 2, 1, "", "config_class"]], "merlion.models.anomaly.isolation_forest": [[5, 1, 1, "", "IsolationForest"], [5, 1, 1, "", "IsolationForestConfig"]], "merlion.models.anomaly.isolation_forest.IsolationForest": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.lstm_ed": [[5, 1, 1, "", "LSTMED"], [5, 1, 1, "", "LSTMEDConfig"]], "merlion.models.anomaly.lstm_ed.LSTMED": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.random_cut_forest": [[5, 1, 1, "", "JVMSingleton"], [5, 1, 1, "", "RandomCutForest"], [5, 1, 1, "", "RandomCutForestConfig"]], "merlion.models.anomaly.random_cut_forest.JVMSingleton": [[5, 3, 1, "", "gateway"]], "merlion.models.anomaly.random_cut_forest.RandomCutForest": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "online_updates"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig": [[5, 4, 1, "", "java_params"]], "merlion.models.anomaly.spectral_residual": [[5, 1, 1, "", "SpectralResidual"], [5, 1, 1, "", "SpectralResidualConfig"]], "merlion.models.anomaly.spectral_residual.SpectralResidual": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"], [5, 4, 1, "", "target_seq_index"]], "merlion.models.anomaly.stat_threshold": [[5, 1, 1, "", "StatThreshold"], [5, 1, 1, "", "StatThresholdConfig"]], "merlion.models.anomaly.stat_threshold.StatThreshold": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.vae": [[5, 1, 1, "", "VAE"], [5, 1, 1, "", "VAEConfig"]], "merlion.models.anomaly.vae.VAE": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.windstats": [[5, 1, 1, "", "WindStats"], [5, 1, 1, "", "WindStatsConfig"]], "merlion.models.anomaly.windstats.WindStats": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.zms": [[5, 1, 1, "", "ZMS"], [5, 1, 1, "", "ZMSConfig"]], "merlion.models.anomaly.zms.ZMS": [[5, 4, 1, "", "adjust_z_scores"], [5, 2, 1, "", "config_class"], [5, 4, 1, "", "lag_inflation"], [5, 4, 1, "", "lag_scales"], [5, 4, 1, "", "n_lags"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"], [5, 3, 1, "", "train"]], "merlion.models.anomaly.zms.ZMSConfig": [[5, 4, 1, "", "full_transform"], [5, 4, 1, "", "n_lags"], [5, 3, 1, "", "to_dict"]], "merlion.models.automl": [[8, 0, 0, "-", "autoets"], [8, 0, 0, "-", "autoprophet"], [8, 0, 0, "-", "autosarima"], [8, 0, 0, "-", "base"], [8, 0, 0, "-", "search"], [8, 0, 0, "-", "seasonality"]], "merlion.models.automl.autoets": [[8, 1, 1, "", "AutoETS"], [8, 1, 1, "", "AutoETSConfig"]], "merlion.models.automl.autoets.AutoETS": [[8, 2, 1, "", "config_class"], [8, 3, 1, "", "generate_theta"], [8, 3, 1, "", "get_ic"], [8, 3, 1, "", "set_theta"]], "merlion.models.automl.autoprophet": [[8, 1, 1, "", "AutoProphet"], [8, 1, 1, "", "AutoProphetConfig"]], "merlion.models.automl.autoprophet.AutoProphet": [[8, 2, 1, "", "config_class"], [8, 3, 1, "", "generate_theta"], [8, 3, 1, "", "get_ic"], [8, 3, 1, "", "set_theta"], [8, 4, 1, "", "supports_exog"]], "merlion.models.automl.autoprophet.AutoProphetConfig": [[8, 4, 1, "", "multi_seasonality"]], "merlion.models.automl.autosarima": [[8, 1, 1, "", "AutoSarima"], [8, 1, 1, "", "AutoSarimaConfig"]], "merlion.models.automl.autosarima.AutoSarima": [[8, 2, 1, "", "config_class"], [8, 3, 1, "", "evaluate_theta"], [8, 3, 1, "", "generate_theta"], [8, 3, 1, "", "set_theta"], [8, 4, 1, "", "supports_exog"]], "merlion.models.automl.autosarima.AutoSarimaConfig": [[8, 4, 1, "", "order"], [8, 4, 1, "", "seasonal_order"]], "merlion.models.automl.base": [[8, 1, 1, "", "AutoMLMixIn"], [8, 1, 1, "", "ICAutoMLForecaster"], [8, 1, 1, "", "ICConfig"], [8, 1, 1, "", "InformationCriterion"]], "merlion.models.automl.base.AutoMLMixIn": [[8, 3, 1, "", "evaluate_theta"], [8, 3, 1, "", "generate_theta"], [8, 3, 1, "", "set_theta"]], "merlion.models.automl.base.ICAutoMLForecaster": [[8, 2, 1, "", "config_class"], [8, 3, 1, "", "evaluate_theta"], [8, 3, 1, "", "get_ic"], [8, 4, 1, "", "information_criterion"]], "merlion.models.automl.base.ICConfig": [[8, 4, 1, "", "information_criterion"]], "merlion.models.automl.base.InformationCriterion": [[8, 2, 1, "", "AIC"], [8, 2, 1, "", "AICc"], [8, 2, 1, "", "BIC"]], "merlion.models.automl.search": [[8, 1, 1, "", "GridSearch"]], "merlion.models.automl.seasonality": [[8, 1, 1, "", "PeriodicityStrategy"], [8, 1, 1, "", "SeasonalityConfig"], [8, 1, 1, "", "SeasonalityLayer"], [8, 1, 1, "", "SeasonalityModel"]], "merlion.models.automl.seasonality.PeriodicityStrategy": [[8, 2, 1, "", "ACF"], [8, 2, 1, "", "All"], [8, 2, 1, "", "Max"], [8, 2, 1, "", "Min"]], "merlion.models.automl.seasonality.SeasonalityConfig": [[8, 4, 1, "", "multi_seasonality"], [8, 4, 1, "", "periodicity_strategy"]], "merlion.models.automl.seasonality.SeasonalityLayer": [[8, 2, 1, "", "config_class"], [8, 3, 1, "", "detect_seasonality"], [8, 3, 1, "", "evaluate_theta"], [8, 3, 1, "", "generate_theta"], [8, 4, 1, "", "max_lag"], [8, 4, 1, "", "multi_seasonality"], [8, 4, 1, "", "periodicity_strategy"], [8, 4, 1, "", "pval"], [8, 4, 1, "", "require_even_sampling"], [8, 4, 1, "", "require_univariate"], [8, 3, 1, "", "set_theta"]], "merlion.models.automl.seasonality.SeasonalityModel": [[8, 3, 1, "", "set_seasonality"]], "merlion.models.base": [[4, 1, 1, "", "Config"], [4, 1, 1, "", "ModelBase"], [4, 1, 1, "", "MultipleTimeseriesModelMixin"], [4, 1, 1, "", "NormalizingConfig"]], "merlion.models.base.Config": [[4, 2, 1, "", "dim"], [4, 2, 1, "", "filename"], [4, 3, 1, "", "from_dict"], [4, 3, 1, "", "get_unused_kwargs"], [4, 3, 1, "", "to_dict"], [4, 2, 1, "", "transform"]], "merlion.models.base.ModelBase": [[4, 4, 1, "", "auto_align"], [4, 4, 1, "", "base_model"], [4, 2, 1, "", "config_class"], [4, 4, 1, "", "dim"], [4, 2, 1, "", "filename"], [4, 3, 1, "", "from_bytes"], [4, 4, 1, "", "last_train_time"], [4, 3, 1, "", "load"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "save"], [4, 4, 1, "", "supports_exog"], [4, 4, 1, "", "timedelta"], [4, 3, 1, "", "to_bytes"], [4, 3, 1, "", "train"], [4, 2, 1, "", "train_data"], [4, 3, 1, "", "train_post_process"], [4, 3, 1, "", "train_pre_process"], [4, 4, 1, "", "transform"], [4, 3, 1, "", "transform_time_series"]], "merlion.models.base.MultipleTimeseriesModelMixin": [[4, 3, 1, "", "train_multiple"]], "merlion.models.base.NormalizingConfig": [[4, 4, 1, "", "full_transform"], [4, 4, 1, "", "transform"]], "merlion.models.defaults": [[4, 1, 1, "", "DefaultDetector"], [4, 1, 1, "", "DefaultDetectorConfig"], [4, 1, 1, "", "DefaultForecaster"], [4, 1, 1, "", "DefaultForecasterConfig"]], "merlion.models.defaults.DefaultDetector": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "granularity"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "train"]], "merlion.models.defaults.DefaultForecaster": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "granularity"], [4, 3, 1, "", "reset"], [4, 4, 1, "", "supports_exog"], [4, 3, 1, "", "train"]], "merlion.models.ensemble": [[9, 0, 0, "-", "anomaly"], [9, 0, 0, "-", "base"], [9, 0, 0, "-", "combine"], [9, 0, 0, "-", "forecast"]], "merlion.models.ensemble.anomaly": [[9, 1, 1, "", "DetectorEnsemble"], [9, 1, 1, "", "DetectorEnsembleConfig"], [9, 1, 1, "", "DetectorEnsembleTrainConfig"]], "merlion.models.ensemble.anomaly.DetectorEnsemble": [[9, 2, 1, "", "config_class"], [9, 4, 1, "", "per_model_threshold"], [9, 4, 1, "", "require_even_sampling"], [9, 4, 1, "", "require_univariate"]], "merlion.models.ensemble.anomaly.DetectorEnsembleConfig": [[9, 4, 1, "", "per_model_threshold"]], "merlion.models.ensemble.base": [[9, 1, 1, "", "EnsembleBase"], [9, 1, 1, "", "EnsembleConfig"], [9, 1, 1, "", "EnsembleTrainConfig"]], "merlion.models.ensemble.base.EnsembleBase": [[9, 4, 1, "", "combiner"], [9, 2, 1, "", "config_class"], [9, 3, 1, "", "get_max_common_horizon"], [9, 4, 1, "", "models"], [9, 4, 1, "", "models_used"], [9, 3, 1, "", "reset"], [9, 3, 1, "", "save"], [9, 3, 1, "", "to_bytes"], [9, 3, 1, "", "train_combiner"], [9, 3, 1, "", "train_valid_split"]], "merlion.models.ensemble.base.EnsembleConfig": [[9, 2, 1, "", "models"], [9, 3, 1, "", "to_dict"]], "merlion.models.ensemble.combine": [[9, 1, 1, "", "CombinerBase"], [9, 1, 1, "", "CombinerFactory"], [9, 1, 1, "", "Max"], [9, 1, 1, "", "Mean"], [9, 1, 1, "", "Median"], [9, 1, 1, "", "MetricWeightedMean"], [9, 1, 1, "", "ModelSelector"]], "merlion.models.ensemble.combine.CombinerBase": [[9, 3, 1, "", "__call__"], [9, 3, 1, "", "from_dict"], [9, 3, 1, "", "get_model_used"], [9, 4, 1, "", "models_used"], [9, 4, 1, "", "requires_training"], [9, 3, 1, "", "reset"], [9, 3, 1, "", "set_model_used"], [9, 3, 1, "", "to_dict"], [9, 3, 1, "", "train"]], "merlion.models.ensemble.combine.CombinerFactory": [[9, 3, 1, "", "create"]], "merlion.models.ensemble.combine.Mean": [[9, 4, 1, "", "weights"]], "merlion.models.ensemble.combine.MetricWeightedMean": [[9, 4, 1, "", "weights"]], "merlion.models.ensemble.combine.ModelSelector": [[9, 3, 1, "", "from_dict"], [9, 4, 1, "", "invert"], [9, 4, 1, "", "requires_training"], [9, 3, 1, "", "to_dict"], [9, 3, 1, "", "train"]], "merlion.models.ensemble.forecast": [[9, 1, 1, "", "ForecasterEnsemble"], [9, 1, 1, "", "ForecasterEnsembleConfig"]], "merlion.models.ensemble.forecast.ForecasterEnsemble": [[9, 2, 1, "", "config_class"], [9, 4, 1, "", "require_even_sampling"], [9, 3, 1, "", "resample_time_stamps"], [9, 3, 1, "", "train_combiner"], [9, 3, 1, "", "train_pre_process"]], "merlion.models.ensemble.forecast.ForecasterEnsembleConfig": [[9, 4, 1, "", "target_seq_index"]], "merlion.models.factory": [[4, 1, 1, "", "ModelFactory"], [4, 5, 1, "", "instantiate_or_copy_model"]], "merlion.models.factory.ModelFactory": [[4, 3, 1, "", "create"], [4, 3, 1, "", "get_model_class"], [4, 3, 1, "", "load"], [4, 3, 1, "", "load_bytes"]], "merlion.models.forecast": [[10, 0, 0, "-", "arima"], [10, 0, 0, "-", "base"], [10, 0, 0, "-", "ets"], [10, 0, 0, "-", "lstm"], [10, 0, 0, "-", "prophet"], [10, 0, 0, "-", "sarima"], [10, 0, 0, "-", "sklearn_base"], [10, 0, 0, "-", "smoother"], [10, 0, 0, "-", "trees"], [10, 0, 0, "-", "vector_ar"]], "merlion.models.forecast.arima": [[10, 1, 1, "", "Arima"], [10, 1, 1, "", "ArimaConfig"]], "merlion.models.forecast.arima.Arima": [[10, 2, 1, "", "config_class"]], "merlion.models.forecast.arima.ArimaConfig": [[10, 4, 1, "", "seasonal_order"]], "merlion.models.forecast.base": [[10, 1, 1, "", "ForecasterBase"], [10, 1, 1, "", "ForecasterConfig"], [10, 1, 1, "", "ForecasterExogBase"], [10, 1, 1, "", "ForecasterExogConfig"]], "merlion.models.forecast.base.ForecasterBase": [[10, 3, 1, "", "batch_forecast"], [10, 2, 1, "", "config_class"], [10, 3, 1, "", "forecast"], [10, 3, 1, "", "get_figure"], [10, 4, 1, "", "invert_transform"], [10, 4, 1, "", "max_forecast_steps"], [10, 3, 1, "", "plot_forecast"], [10, 3, 1, "", "plot_forecast_plotly"], [10, 4, 1, "", "require_univariate"], [10, 3, 1, "", "resample_time_stamps"], [10, 2, 1, "", "target_name"], [10, 4, 1, "", "target_seq_index"], [10, 3, 1, "", "train"], [10, 3, 1, "", "train_post_process"], [10, 3, 1, "", "train_pre_process"], [10, 3, 1, "", "transform_exog_data"]], "merlion.models.forecast.base.ForecasterConfig": [[10, 2, 1, "", "invert_transform"], [10, 2, 1, "", "max_forecast_steps"], [10, 2, 1, "", "target_seq_index"]], "merlion.models.forecast.base.ForecasterExogBase": [[10, 4, 1, "", "exog_aggregation_policy"], [10, 4, 1, "", "exog_missing_value_policy"], [10, 4, 1, "", "exog_transform"], [10, 4, 1, "", "supports_exog"], [10, 3, 1, "", "transform_exog_data"]], "merlion.models.forecast.base.ForecasterExogConfig": [[10, 4, 1, "", "exog_aggregation_policy"], [10, 4, 1, "", "exog_missing_value_policy"], [10, 2, 1, "", "exog_transform"]], "merlion.models.forecast.ets": [[10, 1, 1, "", "ETS"], [10, 1, 1, "", "ETSConfig"]], "merlion.models.forecast.ets.ETS": [[10, 2, 1, "", "config_class"], [10, 4, 1, "", "damped_trend"], [10, 4, 1, "", "error"], [10, 4, 1, "", "require_even_sampling"], [10, 4, 1, "", "seasonal"], [10, 4, 1, "", "seasonal_periods"], [10, 3, 1, "", "set_seasonality"], [10, 4, 1, "", "trend"]], "merlion.models.forecast.lstm": [[10, 1, 1, "", "LSTM"], [10, 1, 1, "", "LSTMConfig"], [10, 1, 1, "", "LSTMTrainConfig"]], "merlion.models.forecast.lstm.LSTM": [[10, 2, 1, "", "config_class"], [10, 4, 1, "", "require_even_sampling"]], "merlion.models.forecast.prophet": [[10, 1, 1, "", "Prophet"], [10, 1, 1, "", "ProphetConfig"]], "merlion.models.forecast.prophet.Prophet": [[10, 4, 1, "", "add_seasonality"], [10, 2, 1, "", "config_class"], [10, 4, 1, "", "daily_seasonality"], [10, 4, 1, "", "holidays"], [10, 4, 1, "", "require_even_sampling"], [10, 3, 1, "", "resample_time_stamps"], [10, 4, 1, "", "seasonality_mode"], [10, 3, 1, "", "set_seasonality"], [10, 4, 1, "", "uncertainty_samples"], [10, 4, 1, "", "weekly_seasonality"], [10, 4, 1, "", "yearly_seasonality"]], "merlion.models.forecast.sarima": [[10, 1, 1, "", "Sarima"], [10, 1, 1, "", "SarimaConfig"]], "merlion.models.forecast.sarima.Sarima": [[10, 2, 1, "", "config_class"], [10, 4, 1, "", "order"], [10, 4, 1, "", "require_even_sampling"], [10, 4, 1, "", "seasonal_order"], [10, 3, 1, "", "set_seasonality"]], "merlion.models.forecast.sklearn_base": [[10, 1, 1, "", "SKLearnForecaster"], [10, 1, 1, "", "SKLearnForecasterConfig"]], "merlion.models.forecast.sklearn_base.SKLearnForecaster": [[10, 2, 1, "", "config_class"], [10, 4, 1, "", "maxlags"], [10, 2, 1, "", "model"], [10, 4, 1, "", "prediction_stride"], [10, 4, 1, "", "require_even_sampling"], [10, 4, 1, "", "require_univariate"]], "merlion.models.forecast.smoother": [[10, 1, 1, "", "DeltaEstimator"], [10, 1, 1, "", "DeltaStats"], [10, 1, 1, "", "MSES"], [10, 1, 1, "", "MSESConfig"], [10, 1, 1, "", "MSESTrainConfig"]], "merlion.models.forecast.smoother.DeltaEstimator": [[10, 4, 1, "", "acc_max_scale"], [10, 3, 1, "", "acceleration"], [10, 4, 1, "", "data"], [10, 3, 1, "", "delta_hat"], [10, 3, 1, "", "loss_err"], [10, 4, 1, "", "max_scale"], [10, 3, 1, "", "neg_err"], [10, 3, 1, "", "pos_err"], [10, 3, 1, "", "process_losses"], [10, 3, 1, "", "train"], [10, 3, 1, "", "vel_err"], [10, 3, 1, "", "velocity"], [10, 4, 1, "", "x"]], "merlion.models.forecast.smoother.DeltaStats": [[10, 4, 1, "", "lag"], [10, 3, 1, "", "tune"], [10, 3, 1, "", "update_acceleration"], [10, 3, 1, "", "update_loss"], [10, 3, 1, "", "update_velocity"]], "merlion.models.forecast.smoother.MSES": [[10, 4, 1, "", "backsteps"], [10, 2, 1, "", "config_class"], [10, 3, 1, "", "marginalize_xhat_h"], [10, 4, 1, "", "max_horizon"], [10, 4, 1, "", "require_even_sampling"], [10, 4, 1, "", "rho"], [10, 3, 1, "", "update"], [10, 3, 1, "", "xhat_h"]], "merlion.models.forecast.smoother.MSESConfig": [[10, 4, 1, "", "backsteps"], [10, 4, 1, "", "max_scale"]], "merlion.models.forecast.trees": [[10, 1, 1, "", "ExtraTreesForecaster"], [10, 1, 1, "", "ExtraTreesForecasterConfig"], [10, 1, 1, "", "LGBMForecaster"], [10, 1, 1, "", "LGBMForecasterConfig"], [10, 1, 1, "", "RandomForestForecaster"], [10, 1, 1, "", "RandomForestForecasterConfig"]], "merlion.models.forecast.trees.ExtraTreesForecaster": [[10, 2, 1, "", "config_class"]], "merlion.models.forecast.trees.LGBMForecaster": [[10, 2, 1, "", "config_class"]], "merlion.models.forecast.trees.RandomForestForecaster": [[10, 2, 1, "", "config_class"]], "merlion.models.forecast.vector_ar": [[10, 1, 1, "", "VectorAR"], [10, 1, 1, "", "VectorARConfig"]], "merlion.models.forecast.vector_ar.VectorAR": [[10, 2, 1, "", "config_class"], [10, 4, 1, "", "maxlags"], [10, 4, 1, "", "require_even_sampling"]], "merlion.models.layers": [[4, 1, 1, "", "LayeredDetector"], [4, 1, 1, "", "LayeredForecaster"], [4, 1, 1, "", "LayeredForecastingDetector"], [4, 1, 1, "", "LayeredModel"], [4, 1, 1, "", "LayeredModelConfig"]], "merlion.models.layers.LayeredDetector": [[4, 3, 1, "", "get_anomaly_score"]], "merlion.models.layers.LayeredForecaster": [[4, 3, 1, "", "forecast"]], "merlion.models.layers.LayeredModel": [[4, 4, 1, "", "base_model"], [4, 2, 1, "", "config_class"], [4, 4, 1, "", "model"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"], [4, 3, 1, "", "reset"], [4, 4, 1, "", "train_data"], [4, 3, 1, "", "train_post_process"], [4, 3, 1, "", "train_pre_process"]], "merlion.models.layers.LayeredModelConfig": [[4, 4, 1, "", "base_model"], [4, 3, 1, "", "from_dict"], [4, 3, 1, "", "get_unused_kwargs"], [4, 3, 1, "", "to_dict"]], "merlion.models.utils": [[11, 0, 0, "-", "autosarima_utils"], [11, 0, 0, "-", "rolling_window_dataset"]], "merlion.models.utils.autosarima_utils": [[11, 5, 1, "", "KPSS_stationaritytest"], [11, 5, 1, "", "detect_maxiter_sarima_model"], [11, 5, 1, "", "diff"], [11, 5, 1, "", "ndiffs"], [11, 5, 1, "", "nsdiffs"], [11, 5, 1, "", "seas_seasonalstationaritytest"]], "merlion.models.utils.rolling_window_dataset": [[11, 1, 1, "", "RollingWindowDataset"]], "merlion.models.utils.rolling_window_dataset.RollingWindowDataset": [[11, 4, 1, "", "autoregressive"], [11, 3, 1, "", "collate_batch"], [11, 4, 1, "", "n_points"]], "merlion.plot": [[1, 1, 1, "", "Figure"], [1, 1, 1, "", "MTSFigure"], [1, 5, 1, "", "plot_anoms"], [1, 5, 1, "", "plot_anoms_plotly"]], "merlion.plot.Figure": [[1, 3, 1, "", "get_y"], [1, 3, 1, "", "get_yhat"], [1, 3, 1, "", "get_yhat_iqr"], [1, 3, 1, "", "plot"], [1, 3, 1, "", "plot_plotly"], [1, 4, 1, "", "t0"], [1, 4, 1, "", "t_split"], [1, 4, 1, "", "tf"]], "merlion.plot.MTSFigure": [[1, 3, 1, "", "get_y"], [1, 3, 1, "", "get_yhat"], [1, 3, 1, "", "get_yhat_iqr"], [1, 3, 1, "", "plot_plotly"], [1, 4, 1, "", "t0"], [1, 4, 1, "", "t_split"], [1, 4, 1, "", "tf"]], "merlion.post_process": [[12, 0, 0, "-", "base"], [12, 0, 0, "-", "calibrate"], [12, 0, 0, "-", "factory"], [12, 0, 0, "-", "sequence"], [12, 0, 0, "-", "threshold"]], "merlion.post_process.base": [[12, 1, 1, "", "PostRuleBase"]], "merlion.post_process.base.PostRuleBase": [[12, 3, 1, "", "from_dict"], [12, 3, 1, "", "to_dict"], [12, 3, 1, "", "train"]], "merlion.post_process.calibrate": [[12, 1, 1, "", "AnomScoreCalibrator"]], "merlion.post_process.calibrate.AnomScoreCalibrator": [[12, 4, 1, "", "anchors"], [12, 3, 1, "", "train"]], "merlion.post_process.factory": [[12, 1, 1, "", "PostRuleFactory"]], "merlion.post_process.factory.PostRuleFactory": [[12, 3, 1, "", "create"], [12, 3, 1, "", "get_post_rule_class"]], "merlion.post_process.sequence": [[12, 1, 1, "", "PostRuleSequence"]], "merlion.post_process.sequence.PostRuleSequence": [[12, 3, 1, "", "from_dict"], [12, 3, 1, "", "to_dict"], [12, 3, 1, "", "train"]], "merlion.post_process.threshold": [[12, 1, 1, "", "AdaptiveAggregateAlarms"], [12, 1, 1, "", "AdaptiveThreshold"], [12, 1, 1, "", "AggregateAlarms"], [12, 1, 1, "", "Threshold"], [12, 5, 1, "", "get_adaptive_thres"]], "merlion.post_process.threshold.AdaptiveAggregateAlarms": [[12, 4, 1, "", "bin_sz"], [12, 4, 1, "", "default_hist_gap_thres"], [12, 2, 1, "", "threshold_class"]], "merlion.post_process.threshold.AdaptiveThreshold": [[12, 3, 1, "", "train"]], "merlion.post_process.threshold.AggregateAlarms": [[12, 4, 1, "", "abs_score"], [12, 4, 1, "", "alm_threshold"], [12, 3, 1, "", "filter"], [12, 4, 1, "", "suppress_secs"], [12, 2, 1, "", "threshold_class"], [12, 3, 1, "", "to_simple_threshold"], [12, 3, 1, "", "train"], [12, 4, 1, "", "window_secs"]], "merlion.post_process.threshold.Threshold": [[12, 1, 1, "", "TSADMetric"], [12, 3, 1, "", "to_simple_threshold"], [12, 3, 1, "", "train"]], "merlion.post_process.threshold.Threshold.TSADMetric": [[12, 2, 1, "", "F1"], [12, 2, 1, "", "F2"], [12, 2, 1, "", "F5"], [12, 2, 1, "", "MeanTimeToDetect"], [12, 2, 1, "", "NABScore"], [12, 2, 1, "", "NABScoreLowFN"], [12, 2, 1, "", "NABScoreLowFP"], [12, 2, 1, "", "PointAdjustedF1"], [12, 2, 1, "", "PointAdjustedPrecision"], [12, 2, 1, "", "PointAdjustedRecall"], [12, 2, 1, "", "PointwiseF1"], [12, 2, 1, "", "PointwisePrecision"], [12, 2, 1, "", "PointwiseRecall"], [12, 2, 1, "", "Precision"], [12, 2, 1, "", "Recall"]], "merlion.spark": [[13, 0, 0, "-", "dataset"], [13, 0, 0, "-", "pandas_udf"]], "merlion.spark.dataset": [[13, 6, 1, "", "TSID_COL_NAME"], [13, 5, 1, "", "add_tsid_column"], [13, 5, 1, "", "create_hier_dataset"], [13, 5, 1, "", "read_dataset"], [13, 5, 1, "", "write_dataset"]], "merlion.spark.pandas_udf": [[13, 5, 1, "", "anomaly"], [13, 5, 1, "", "forecast"], [13, 5, 1, "", "reconciliation"]], "merlion.transform": [[14, 0, 0, "-", "anomalize"], [14, 0, 0, "-", "base"], [14, 0, 0, "-", "bound"], [14, 0, 0, "-", "factory"], [14, 0, 0, "-", "moving_average"], [14, 0, 0, "-", "normalize"], [14, 0, 0, "-", "resample"], [14, 0, 0, "-", "sequence"]], "merlion.transform.anomalize": [[14, 1, 1, "", "Anomalize"], [14, 1, 1, "", "LevelShift"], [14, 1, 1, "", "Shock"], [14, 1, 1, "", "TrendChange"]], "merlion.transform.anomalize.Anomalize": [[14, 4, 1, "", "is_trained"], [14, 4, 1, "", "natural_bounds"], [14, 3, 1, "", "random_is_anom"]], "merlion.transform.anomalize.Shock": [[14, 4, 1, "", "anom_width_range"], [14, 3, 1, "", "random_anom_width"], [14, 3, 1, "", "random_is_anom"], [14, 3, 1, "", "random_sd_units"], [14, 4, 1, "", "sd_range"], [14, 3, 1, "", "train"]], "merlion.transform.anomalize.TrendChange": [[14, 3, 1, "", "random_scale"], [14, 4, 1, "", "scale_range"], [14, 3, 1, "", "train"]], "merlion.transform.base": [[14, 1, 1, "", "Identity"], [14, 1, 1, "", "InvertibleTransformBase"], [14, 1, 1, "", "TransformBase"]], "merlion.transform.base.Identity": [[14, 4, 1, "", "identity_inversion"], [14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "train"]], "merlion.transform.base.InvertibleTransformBase": [[14, 3, 1, "", "_invert"], [14, 4, 1, "", "identity_inversion"], [14, 4, 1, "", "proper_inversion"]], "merlion.transform.base.TransformBase": [[14, 3, 1, "", "_invert"], [14, 3, 1, "", "from_dict"], [14, 4, 1, "", "identity_inversion"], [14, 3, 1, "", "invert"], [14, 4, 1, "", "proper_inversion"], [14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "train"]], "merlion.transform.bound": [[14, 1, 1, "", "LowerUpperClip"]], "merlion.transform.bound.LowerUpperClip": [[14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "train"]], "merlion.transform.factory": [[14, 1, 1, "", "TransformFactory"]], "merlion.transform.factory.TransformFactory": [[14, 3, 1, "", "create"], [14, 3, 1, "", "get_transform_class"]], "merlion.transform.moving_average": [[14, 1, 1, "", "DifferenceTransform"], [14, 1, 1, "", "ExponentialMovingAverage"], [14, 1, 1, "", "LagTransform"], [14, 1, 1, "", "MovingAverage"], [14, 1, 1, "", "MovingPercentile"]], "merlion.transform.moving_average.DifferenceTransform": [[14, 3, 1, "", "train"]], "merlion.transform.moving_average.ExponentialMovingAverage": [[14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "train"]], "merlion.transform.moving_average.LagTransform": [[14, 3, 1, "", "compute_lag"], [14, 3, 1, "", "train"]], "merlion.transform.moving_average.MovingAverage": [[14, 3, 1, "", "train"]], "merlion.transform.moving_average.MovingPercentile": [[14, 3, 1, "", "train"]], "merlion.transform.normalize": [[14, 1, 1, "", "AbsVal"], [14, 1, 1, "", "BoxCoxTransform"], [14, 1, 1, "", "MeanVarNormalize"], [14, 1, 1, "", "MinMaxNormalize"], [14, 1, 1, "", "Rescale"]], "merlion.transform.normalize.AbsVal": [[14, 4, 1, "", "identity_inversion"], [14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "train"]], "merlion.transform.normalize.BoxCoxTransform": [[14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "train"]], "merlion.transform.normalize.MeanVarNormalize": [[14, 3, 1, "", "train"]], "merlion.transform.normalize.MinMaxNormalize": [[14, 3, 1, "", "train"]], "merlion.transform.normalize.Rescale": [[14, 4, 1, "", "is_trained"], [14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "train"]], "merlion.transform.resample": [[14, 1, 1, "", "Shingle"], [14, 1, 1, "", "TemporalResample"]], "merlion.transform.resample.Shingle": [[14, 3, 1, "", "train"]], "merlion.transform.resample.TemporalResample": [[14, 4, 1, "", "aggregation_policy"], [14, 4, 1, "", "granularity"], [14, 4, 1, "", "missing_value_policy"], [14, 4, 1, "", "proper_inversion"], [14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "train"]], "merlion.transform.sequence": [[14, 1, 1, "", "TransformSequence"], [14, 1, 1, "", "TransformStack"]], "merlion.transform.sequence.TransformSequence": [[14, 3, 1, "", "append"], [14, 3, 1, "", "from_dict"], [14, 4, 1, "", "identity_inversion"], [14, 3, 1, "", "invert"], [14, 4, 1, "", "proper_inversion"], [14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "train"]], "merlion.transform.sequence.TransformStack": [[14, 3, 1, "", "invert"], [14, 4, 1, "", "proper_inversion"], [14, 4, 1, "", "requires_inversion_state"], [14, 3, 1, "", "train"]], "merlion.utils": [[15, 0, 0, "-", "conj_priors"], [15, 0, 0, "-", "data_io"], [15, 0, 0, "-", "hts"], [15, 0, 0, "-", "istat"], [15, 0, 0, "-", "resample"], [15, 0, 0, "-", "time_series"], [15, 0, 0, "-", "ts_generator"]], "merlion.utils.conj_priors": [[15, 1, 1, "", "BayesianLinReg"], [15, 1, 1, "", "BayesianMVLinReg"], [15, 1, 1, "", "BetaBernoulli"], [15, 1, 1, "", "ConjPrior"], [15, 1, 1, "", "MVNormInvWishart"], [15, 1, 1, "", "NormInvGamma"], [15, 1, 1, "", "ScalarConjPrior"]], "merlion.utils.conj_priors.BayesianLinReg": [[15, 3, 1, "", "forecast"], [15, 3, 1, "", "posterior"], [15, 3, 1, "", "posterior_explicit"], [15, 3, 1, "", "update"]], "merlion.utils.conj_priors.BayesianMVLinReg": [[15, 3, 1, "", "forecast"], [15, 3, 1, "", "posterior"], [15, 3, 1, "", "posterior_explicit"], [15, 3, 1, "", "process_time_series"], [15, 3, 1, "", "update"]], "merlion.utils.conj_priors.BetaBernoulli": [[15, 3, 1, "", "forecast"], [15, 3, 1, "", "posterior"], [15, 3, 1, "", "theta_posterior"], [15, 3, 1, "", "update"]], "merlion.utils.conj_priors.ConjPrior": [[15, 3, 1, "", "forecast"], [15, 3, 1, "", "from_dict"], [15, 3, 1, "", "get_time_series_values"], [15, 3, 1, "", "posterior"], [15, 3, 1, "", "process_time_series"], [15, 3, 1, "", "to_dict"], [15, 3, 1, "", "update"]], "merlion.utils.conj_priors.MVNormInvWishart": [[15, 3, 1, "", "Sigma_posterior"], [15, 3, 1, "", "forecast"], [15, 3, 1, "", "mu_posterior"], [15, 3, 1, "", "posterior"], [15, 3, 1, "", "process_time_series"], [15, 3, 1, "", "update"]], "merlion.utils.conj_priors.NormInvGamma": [[15, 3, 1, "", "forecast"], [15, 3, 1, "", "mu_posterior"], [15, 3, 1, "", "posterior"], [15, 3, 1, "", "sigma2_posterior"], [15, 3, 1, "", "update"]], "merlion.utils.conj_priors.ScalarConjPrior": [[15, 3, 1, "", "get_time_series_values"], [15, 3, 1, "", "process_time_series"]], "merlion.utils.data_io": [[15, 5, 1, "", "csv_to_time_series"], [15, 5, 1, "", "data_io_decorator"], [15, 5, 1, "", "df_to_time_series"]], "merlion.utils.hts": [[15, 5, 1, "", "minT_reconciliation"]], "merlion.utils.istat": [[15, 1, 1, "", "ExponentialMovingAverage"], [15, 1, 1, "", "IStat"], [15, 1, 1, "", "Mean"], [15, 1, 1, "", "RecencyWeightedVariance"], [15, 1, 1, "", "Variance"]], "merlion.utils.istat.ExponentialMovingAverage": [[15, 3, 1, "", "drop"], [15, 4, 1, "", "recency_weight"], [15, 4, 1, "", "value"]], "merlion.utils.istat.IStat": [[15, 3, 1, "", "add"], [15, 3, 1, "", "add_batch"], [15, 3, 1, "", "drop"], [15, 3, 1, "", "drop_batch"], [15, 4, 1, "", "n"], [15, 4, 1, "", "value"]], "merlion.utils.istat.Mean": [[15, 3, 1, "", "add"], [15, 3, 1, "", "drop"], [15, 4, 1, "", "value"]], "merlion.utils.istat.RecencyWeightedVariance": [[15, 3, 1, "", "drop"], [15, 2, 1, "", "mean_class"], [15, 4, 1, "", "recency_weight"]], "merlion.utils.istat.Variance": [[15, 3, 1, "", "add"], [15, 4, 1, "", "corrected_value"], [15, 3, 1, "", "drop"], [15, 2, 1, "", "mean_class"], [15, 4, 1, "", "sd"], [15, 4, 1, "", "se"], [15, 4, 1, "", "true_value"], [15, 4, 1, "", "value"]], "merlion.utils.resample": [[15, 1, 1, "", "AggregationPolicy"], [15, 1, 1, "", "AlignPolicy"], [15, 1, 1, "", "MissingValuePolicy"], [15, 5, 1, "", "get_gcd_timedelta"], [15, 5, 1, "", "granularity_str_to_seconds"], [15, 5, 1, "", "infer_granularity"], [15, 5, 1, "", "reindex_df"], [15, 5, 1, "", "to_pd_datetime"], [15, 5, 1, "", "to_timestamp"]], "merlion.utils.resample.AggregationPolicy": [[15, 2, 1, "", "First"], [15, 2, 1, "", "Last"], [15, 2, 1, "", "Max"], [15, 2, 1, "", "Mean"], [15, 2, 1, "", "Median"], [15, 2, 1, "", "Min"], [15, 2, 1, "", "Sum"]], "merlion.utils.resample.AlignPolicy": [[15, 2, 1, "", "FixedGranularity"], [15, 2, 1, "", "FixedReference"], [15, 2, 1, "", "InnerJoin"], [15, 2, 1, "", "OuterJoin"]], "merlion.utils.resample.MissingValuePolicy": [[15, 2, 1, "", "BFill"], [15, 2, 1, "", "FFill"], [15, 2, 1, "", "Interpolate"], [15, 2, 1, "", "Nearest"], [15, 2, 1, "", "ZFill"]], "merlion.utils.time_series": [[15, 1, 1, "", "TimeSeries"], [15, 1, 1, "", "UnivariateTimeSeries"], [15, 5, 1, "", "assert_equal_timedeltas"]], "merlion.utils.time_series.TimeSeries": [[15, 3, 1, "", "__getitem__"], [15, 3, 1, "", "__iter__"], [15, 3, 1, "", "align"], [15, 3, 1, "", "bisect"], [15, 3, 1, "", "concat"], [15, 4, 1, "", "dim"], [15, 3, 1, "", "from_pd"], [15, 3, 1, "", "from_ts_list"], [15, 4, 1, "", "is_aligned"], [15, 3, 1, "", "is_empty"], [15, 3, 1, "", "items"], [15, 4, 1, "", "names"], [15, 4, 1, "", "np_time_stamps"], [15, 3, 1, "", "rename"], [15, 4, 1, "", "shape"], [15, 3, 1, "", "squeeze"], [15, 4, 1, "", "t0"], [15, 4, 1, "", "tf"], [15, 4, 1, "", "time_stamps"], [15, 3, 1, "", "to_csv"], [15, 3, 1, "", "to_pd"], [15, 3, 1, "", "window"]], "merlion.utils.time_series.UnivariateTimeSeries": [[15, 3, 1, "", "__getitem__"], [15, 3, 1, "", "__iter__"], [15, 3, 1, "", "bisect"], [15, 3, 1, "", "concat"], [15, 3, 1, "", "copy"], [15, 3, 1, "", "empty"], [15, 3, 1, "", "from_dict"], [15, 3, 1, "", "from_pd"], [15, 3, 1, "", "is_empty"], [15, 4, 1, "", "np_time_stamps"], [15, 4, 1, "", "np_values"], [15, 4, 1, "", "t0"], [15, 4, 1, "", "tf"], [15, 4, 1, "", "time_stamps"], [15, 3, 1, "", "to_dict"], [15, 3, 1, "", "to_pd"], [15, 3, 1, "", "to_ts"], [15, 4, 1, "", "values"], [15, 3, 1, "", "window"]], "merlion.utils.ts_generator": [[15, 1, 1, "", "GeneratorComposer"], [15, 1, 1, "", "GeneratorConcatenator"], [15, 1, 1, "", "TimeSeriesGenerator"]], "merlion.utils.ts_generator.GeneratorComposer": [[15, 4, 1, "", "generators"]], "merlion.utils.ts_generator.GeneratorConcatenator": [[15, 4, 1, "", "generators"], [15, 3, 1, "", "y"]], "merlion.utils.ts_generator.TimeSeriesGenerator": [[15, 3, 1, "", "generate"], [15, 4, 1, "", "n"], [15, 4, 1, "", "step"], [15, 4, 1, "", "x0"], [15, 3, 1, "", "y"]], "ts_datasets": [[17, 0, 0, "-", "anomaly"], [16, 0, 0, "-", "base"], [18, 0, 0, "-", "forecast"]], "ts_datasets.anomaly": [[17, 1, 1, "", "CustomAnomalyDataset"], [17, 1, 1, "", "IOpsCompetition"], [17, 1, 1, "", "MSL"], [17, 1, 1, "", "NAB"], [17, 1, 1, "", "SMAP"], [17, 1, 1, "", "SMD"], [17, 1, 1, "", "Synthetic"], [17, 1, 1, "", "TSADBaseDataset"], [17, 1, 1, "", "UCR"], [17, 5, 1, "", "get_dataset"]], "ts_datasets.anomaly.CustomAnomalyDataset": [[17, 3, 1, "", "check_ts_for_metadata"], [17, 4, 1, "", "metadata_cols"]], "ts_datasets.anomaly.IOpsCompetition": [[17, 4, 1, "", "max_lag_sec"]], "ts_datasets.anomaly.MSL": [[17, 2, 1, "", "url"]], "ts_datasets.anomaly.NAB": [[17, 3, 1, "", "download"], [17, 3, 1, "", "load_labels"], [17, 4, 1, "", "max_lead_sec"], [17, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.SMAP": [[17, 2, 1, "", "url"]], "ts_datasets.anomaly.SMD": [[17, 2, 1, "", "filename"], [17, 2, 1, "", "url"], [17, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.Synthetic": [[17, 2, 1, "", "anomaly_subsets"], [17, 2, 1, "", "base_ts_subsets"], [17, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.TSADBaseDataset": [[17, 3, 1, "", "describe"], [17, 4, 1, "", "max_lag_sec"], [17, 4, 1, "", "max_lead_sec"]], "ts_datasets.anomaly.UCR": [[17, 3, 1, "", "download"]], "ts_datasets.base": [[16, 1, 1, "", "BaseDataset"]], "ts_datasets.base.BaseDataset": [[16, 3, 1, "", "describe"], [16, 2, 1, "", "metadata"], [16, 2, 1, "", "time_series"]], "ts_datasets.forecast": [[18, 1, 1, "", "CustomDataset"], [18, 1, 1, "", "EnergyPower"], [18, 1, 1, "", "M4"], [18, 1, 1, "", "SeattleTrail"], [18, 1, 1, "", "SolarPlant"], [18, 5, 1, "", "get_dataset"]], "ts_datasets.forecast.CustomDataset": [[18, 3, 1, "", "check_ts_for_metadata"], [18, 4, 1, "", "metadata_cols"]], "ts_datasets.forecast.M4": [[18, 2, 1, "", "url"], [18, 2, 1, "", "valid_subsets"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"welcom": 0, "merlion": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 24, 25, 28, 29], "": [0, 21], "document": 0, "instal": 0, "get": 0, "start": 0, "content": 0, "indic": 0, "tabl": 0, "time": [1, 21, 26, 30], "seri": [1, 21, 26, 30], "intellig": 1, "subpackag": [1, 4, 5, 16], "submodul": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "plot": 1, "modul": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "dashboard": 2, "packag": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18], "evalu": [3, 25, 26, 27, 29, 30, 32], "base": [3, 4, 5, 7, 8, 9, 10, 12, 14, 16, 32], "anomali": [3, 5, 6, 7, 9, 17, 19, 20, 24, 25, 26, 27, 32], "forecast": [3, 9, 10, 18, 19, 20, 22, 23, 28, 29, 30, 31, 32], "model": [4, 5, 6, 7, 8, 9, 10, 11, 22, 25, 26, 27, 29, 30, 32], "default": [4, 22], "factori": [4, 12, 14], "layer": 4, "dbl": 5, "windstat": 5, "isolation_forest": 5, "random_cut_forest": 5, "spectral_residu": 5, "stat_threshold": 5, "zm": 5, "autoencod": 5, "vae": 5, "dagmm": 5, "lstm_ed": 5, "deep_point_anomaly_detector": 5, "change_point": 6, "bocpd": 6, "forecast_bas": 7, "arima": [7, 10], "sarima": [7, 10], "et": [7, 10], "prophet": [7, 10], "lstm": [7, 10], "mse": 7, "automl": 8, "season": 8, "search": 8, "autoet": 8, "autoprophet": 8, "autosarima": [8, 22], "ensembl": 9, "combin": 9, "sklearn_bas": 10, "smoother": 10, "vector_ar": 10, "tree": 10, "util": [11, 15], "rolling_window_dataset": 11, "autosarima_util": 11, "post_process": 12, "sequenc": [12, 14], "calibr": 12, "threshold": 12, "spark": 13, "dataset": [13, 16, 20, 22], "pandas_udf": 13, "transform": [14, 23], "bound": 14, "moving_averag": 14, "normal": 14, "resampl": [14, 15], "anom": 14, "time_seri": 15, "data_io": 15, "ht": 15, "ts_gener": 15, "conj_prior": 15, "istat": 15, "ts_dataset": [16, 17, 18], "easi": 16, "data": [16, 21], "load": [16, 20, 25, 29], "tutori": [19, 22], "exampl": [19, 27, 32], "code": 19, "basic": [19, 21], "detect": [19, 20, 24, 26, 27], "advanc": 19, "featur": [19, 21], "custom": [20, 27], "gener": 20, "purpos": 20, "broader": 20, "takeawai": 20, "format": 21, "univariatetimeseri": 21, "The": 21, "build": 21, "block": 21, "timeseri": 21, "standard": 21, "class": [21, 27, 32], "index": 21, "align": 21, "A": [21, 24, 27, 28, 32], "few": 21, "us": [21, 25, 29], "prepar": 22, "train": [22, 25, 26, 29, 30], "full": 22, "approxim": 22, "suggest": 22, "without": 22, "slower": 22, "partial": 22, "proof": 23, "concept": 23, "invers": 23, "gentl": [24, 28], "introduct": [24, 28], "how": [25, 29], "detector": [25, 32], "initi": [25, 26, 29, 30], "infer": [25, 26, 29, 30], "quantit": [25, 26, 27, 29, 30, 32], "visual": [25, 27, 29, 32], "save": [25, 29], "simul": [25, 29], "live": [25, 29], "deploy": [25, 29], "multivari": [26, 30], "ad": [27, 32], "new": [27, 32], "config": [27, 32], "run": [27, 32], "simpl": [27, 32], "post": 27, "rule": 27, "With": 31, "exogen": 31, "regressor": 31, "defin": 32}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 3, "sphinx": 57}, "alltitles": {"Welcome to Merlion\u2019s documentation!": [[0, "welcome-to-merlion-s-documentation"]], "Installation": [[0, "installation"]], "Getting Started": [[0, "getting-started"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "merlion: Time Series Intelligence": [[1, "merlion-time-series-intelligence"]], "Subpackages": [[1, "subpackages"], [4, "subpackages"], [5, "subpackages"], [16, "subpackages"]], "Submodules": [[1, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"], [16, "submodules"]], "merlion.plot module": [[1, "module-merlion.plot"]], "merlion.dashboard package": [[2, "merlion-dashboard-package"]], "merlion.evaluate package": [[3, "merlion-evaluate-package"]], "merlion.evaluate.base module": [[3, "module-merlion.evaluate.base"]], "merlion.evaluate.anomaly module": [[3, "module-merlion.evaluate.anomaly"]], "merlion.evaluate.forecast module": [[3, "module-merlion.evaluate.forecast"]], "merlion.models package": [[4, "merlion-models-package"]], "merlion.models.defaults module": [[4, "module-merlion.models.defaults"]], "merlion.models.factory module": [[4, "module-merlion.models.factory"]], "merlion.models.base module": [[4, "module-merlion.models.base"]], "merlion.models.layers module": [[4, "module-merlion.models.layers"]], "merlion.models.anomaly package": [[5, "module-merlion.models.anomaly"]], "merlion.models.anomaly.base module": [[5, "module-merlion.models.anomaly.base"]], "merlion.models.anomaly.dbl module": [[5, "module-merlion.models.anomaly.dbl"]], "merlion.models.anomaly.windstats module": [[5, "module-merlion.models.anomaly.windstats"]], "merlion.models.anomaly.isolation_forest module": [[5, "module-merlion.models.anomaly.isolation_forest"]], "merlion.models.anomaly.random_cut_forest module": [[5, "module-merlion.models.anomaly.random_cut_forest"]], "merlion.models.anomaly.spectral_residual module": [[5, "module-merlion.models.anomaly.spectral_residual"]], "merlion.models.anomaly.stat_threshold module": [[5, "module-merlion.models.anomaly.stat_threshold"]], "merlion.models.anomaly.zms module": [[5, "module-merlion.models.anomaly.zms"]], "merlion.models.anomaly.autoencoder module": [[5, "module-merlion.models.anomaly.autoencoder"]], "merlion.models.anomaly.vae module": [[5, "module-merlion.models.anomaly.vae"]], "merlion.models.anomaly.dagmm module": [[5, "module-merlion.models.anomaly.dagmm"]], "merlion.models.anomaly.lstm_ed module": [[5, "module-merlion.models.anomaly.lstm_ed"]], "merlion.models.anomaly.deep_point_anomaly_detector module": [[5, "module-merlion.models.anomaly.deep_point_anomaly_detector"]], "merlion.models.anomaly.change_point package": [[6, "module-merlion.models.anomaly.change_point"]], "merlion.models.anomaly.change_point.bocpd module": [[6, "module-merlion.models.anomaly.change_point.bocpd"]], "merlion.models.anomaly.forecast_based package": [[7, "module-merlion.models.anomaly.forecast_based"]], "merlion.models.anomaly.forecast_based.base module": [[7, "module-merlion.models.anomaly.forecast_based.base"]], "merlion.models.anomaly.forecast_based.arima module": [[7, "module-merlion.models.anomaly.forecast_based.arima"]], "merlion.models.anomaly.forecast_based.sarima module": [[7, "module-merlion.models.anomaly.forecast_based.sarima"]], "merlion.models.anomaly.forecast_based.ets module": [[7, "module-merlion.models.anomaly.forecast_based.ets"]], "merlion.models.anomaly.forecast_based.prophet module": [[7, "module-merlion.models.anomaly.forecast_based.prophet"]], "merlion.models.anomaly.forecast_based.lstm module": [[7, "module-merlion.models.anomaly.forecast_based.lstm"]], "merlion.models.anomaly.forecast_based.mses module": [[7, "module-merlion.models.anomaly.forecast_based.mses"]], "merlion.models.automl package": [[8, "module-merlion.models.automl"]], "merlion.models.automl.base module": [[8, "module-merlion.models.automl.base"]], "merlion.models.automl.seasonality module": [[8, "module-merlion.models.automl.seasonality"]], "merlion.models.automl.search module": [[8, "module-merlion.models.automl.search"]], "merlion.models.automl.autoets module": [[8, "module-merlion.models.automl.autoets"]], "merlion.models.automl.autoprophet module": [[8, "module-merlion.models.automl.autoprophet"]], "merlion.models.automl.autosarima module": [[8, "module-merlion.models.automl.autosarima"]], "merlion.models.ensemble package": [[9, "module-merlion.models.ensemble"]], "merlion.models.ensemble.base module": [[9, "module-merlion.models.ensemble.base"]], "merlion.models.ensemble.combine module": [[9, "module-merlion.models.ensemble.combine"]], "merlion.models.ensemble.anomaly module": [[9, "module-merlion.models.ensemble.anomaly"]], "merlion.models.ensemble.forecast module": [[9, "module-merlion.models.ensemble.forecast"]], "merlion.models.forecast package": [[10, "module-merlion.models.forecast"]], "merlion.models.forecast.base module": [[10, "module-merlion.models.forecast.base"]], "merlion.models.forecast.sklearn_base module": [[10, "module-merlion.models.forecast.sklearn_base"]], "merlion.models.forecast.arima module": [[10, "module-merlion.models.forecast.arima"]], "merlion.models.forecast.sarima module": [[10, "module-merlion.models.forecast.sarima"]], "merlion.models.forecast.ets module": [[10, "module-merlion.models.forecast.ets"]], "merlion.models.forecast.prophet module": [[10, "module-merlion.models.forecast.prophet"]], "merlion.models.forecast.smoother module": [[10, "module-merlion.models.forecast.smoother"]], "merlion.models.forecast.vector_ar module": [[10, "module-merlion.models.forecast.vector_ar"]], "merlion.models.forecast.trees module": [[10, "module-merlion.models.forecast.trees"]], "merlion.models.forecast.lstm module": [[10, "module-merlion.models.forecast.lstm"]], "merlion.models.utils package": [[11, "module-merlion.models.utils"]], "merlion.models.utils.rolling_window_dataset module": [[11, "module-merlion.models.utils.rolling_window_dataset"]], "merlion.models.utils.autosarima_utils module": [[11, "module-merlion.models.utils.autosarima_utils"]], "merlion.post_process package": [[12, "merlion-post-process-package"]], "merlion.post_process.base module": [[12, "module-merlion.post_process.base"]], "merlion.post_process.factory module": [[12, "module-merlion.post_process.factory"]], "merlion.post_process.sequence module": [[12, "module-merlion.post_process.sequence"]], "merlion.post_process.calibrate module": [[12, "module-merlion.post_process.calibrate"]], "merlion.post_process.threshold module": [[12, "module-merlion.post_process.threshold"]], "merlion.spark package": [[13, "merlion-spark-package"]], "merlion.spark.dataset module": [[13, "module-merlion.spark.dataset"]], "merlion.spark.pandas_udf module": [[13, "module-merlion.spark.pandas_udf"]], "merlion.transform package": [[14, "merlion-transform-package"]], "merlion.transform.base module": [[14, "module-merlion.transform.base"]], "merlion.transform.bound module": [[14, "module-merlion.transform.bound"]], "merlion.transform.factory module": [[14, "module-merlion.transform.factory"]], "merlion.transform.moving_average module": [[14, "module-merlion.transform.moving_average"]], "merlion.transform.normalize module": [[14, "module-merlion.transform.normalize"]], "merlion.transform.resample module": [[14, "module-merlion.transform.resample"]], "merlion.transform.sequence module": [[14, "module-merlion.transform.sequence"]], "merlion.transform.anomalize module": [[14, "module-merlion.transform.anomalize"]], "merlion.utils package": [[15, "merlion-utils-package"]], "merlion.utils.time_series module": [[15, "module-merlion.utils.time_series"]], "merlion.utils.resample module": [[15, "module-merlion.utils.resample"]], "merlion.utils.data_io module": [[15, "module-merlion.utils.data_io"]], "merlion.utils.hts module": [[15, "module-merlion.utils.hts"]], "merlion.utils.ts_generator module": [[15, "module-merlion.utils.ts_generator"]], "merlion.utils.conj_priors module": [[15, "module-merlion.utils.conj_priors"]], "merlion.utils.istat module": [[15, "module-merlion.utils.istat"]], "ts_datasets: Easy Data Loading": [[16, "ts-datasets-easy-data-loading"]], "datasets.base module": [[16, "module-ts_datasets.base"]], "ts_datasets.anomaly package": [[17, "module-ts_datasets.anomaly"]], "ts_datasets.forecast package": [[18, "module-ts_datasets.forecast"]], "Tutorials & Example Code": [[19, "tutorials-example-code"]], "Basics": [[19, "basics"]], "Anomaly Detection": [[19, "anomaly-detection"]], "Forecasting": [[19, "forecasting"]], "Advanced Features": [[19, "advanced-features"]], "Loading Custom Datasets": [[20, "Loading-Custom-Datasets"]], "Anomaly Detection Datasets": [[20, "Anomaly-Detection-Datasets"]], "General Purpose (Forecasting) Datasets": [[20, "General-Purpose-(Forecasting)-Datasets"]], "Broader Takeaways": [[20, "Broader-Takeaways"]], "Merlion\u2019s Data Format": [[21, "Merlion\u2019s-Data-Format"]], "UnivariateTimeSeries: The Basic Building Block": [[21, "UnivariateTimeSeries:-The-Basic-Building-Block"]], "TimeSeries: Merlion\u2019s Standard Data Class": [[21, "TimeSeries:-Merlion\u2019s-Standard-Data-Class"]], "Time Series Indexing & Alignment": [[21, "Time-Series-Indexing-&-Alignment"]], "TimeSeries: A Few Useful Features": [[21, "TimeSeries:-A-Few-Useful-Features"]], "Tutorial for AutoSARIMA Forecasting Model": [[22, "Tutorial-for-AutoSARIMA-Forecasting-Model"]], "Prepare dataset": [[22, "Prepare-dataset"]], "Train a full AutoSarima model with approximation (suggested, default)": [[22, "Train-a-full-AutoSarima-model-with-approximation-(suggested,-default)"]], "Train a full AutoSarima model without approximation (slower)": [[22, "Train-a-full-AutoSarima-model-without-approximation-(slower)"]], "Train a partial autosarima model": [[22, "Train-a-partial-autosarima-model"]], "Proof of Concept: Inverse Transforms for Forecasters": [[23, "Proof-of-Concept:-Inverse-Transforms-for-Forecasters"]], "A Gentle Introduction to Anomaly Detection in Merlion": [[24, "A-Gentle-Introduction-to-Anomaly-Detection-in-Merlion"]], "How to Use Anomaly Detectors in Merlion": [[25, "How-to-Use-Anomaly-Detectors-in-Merlion"]], "Model Initialization": [[25, "Model-Initialization"], [29, "Model-Initialization"]], "Model Training": [[25, "Model-Training"], [29, "Model-Training"]], "Model Inference": [[25, "Model-Inference"], [29, "Model-Inference"]], "Quantitative Evaluation": [[25, "Quantitative-Evaluation"], [27, "Quantitative-Evaluation"], [32, "Quantitative-Evaluation"]], "Model Visualization": [[25, "Model-Visualization"]], "Saving & Loading Models": [[25, "Saving-&-Loading-Models"], [29, "Saving-&-Loading-Models"]], "Simulating Live Model Deployment": [[25, "Simulating-Live-Model-Deployment"], [29, "Simulating-Live-Model-Deployment"]], "Multivariate Time Series Anomaly Detection": [[26, "Multivariate-Time-Series-Anomaly-Detection"]], "Model Initialization and Training": [[26, "Model-Initialization-and-Training"], [30, "Model-Initialization-and-Training"]], "Model Inference and Quantitative Evaluation": [[26, "Model-Inference-and-Quantitative-Evaluation"], [30, "Model-Inference-and-Quantitative-Evaluation"]], "Adding New Anomaly Detection Models": [[27, "Adding-New-Anomaly-Detection-Models"]], "Model Config Class": [[27, "Model-Config-Class"], [32, "Model-Config-Class"]], "Model Class": [[27, "Model-Class"], [32, "Model-Class"]], "Running the Model: A Simple Example": [[27, "Running-the-Model:-A-Simple-Example"], [32, "Running-the-Model:-A-Simple-Example"]], "Visualization": [[27, "Visualization"], [32, "Visualization"]], "Customizing the Post-Rule": [[27, "Customizing-the-Post-Rule"]], "A Gentle Introduction to Forecasting in Merlion": [[28, "A-Gentle-Introduction-to-Forecasting-in-Merlion"]], "How to Use Forecasters in Merlion": [[29, "How-to-Use-Forecasters-in-Merlion"]], "Model Visualization and Quantitative Evaluation": [[29, "Model-Visualization-and-Quantitative-Evaluation"]], "Multivariate Time Series Forecasting": [[30, "Multivariate-Time-Series-Forecasting"]], "Forecasting With Exogenous Regressors": [[31, "Forecasting-With-Exogenous-Regressors"]], "Adding a New Forecasting Model": [[32, "Adding-a-New-Forecasting-Model"]], "Defining a Forecaster-Based Anomaly Detector": [[32, "Defining-a-Forecaster-Based-Anomaly-Detector"]]}, "indexentries": {"figure (class in merlion.plot)": [[1, "merlion.plot.Figure"]], "mtsfigure (class in merlion.plot)": [[1, "merlion.plot.MTSFigure"]], "get_y() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.get_y"]], "get_y() (merlion.plot.mtsfigure method)": [[1, "merlion.plot.MTSFigure.get_y"]], "get_yhat() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.get_yhat"]], "get_yhat() (merlion.plot.mtsfigure method)": [[1, "merlion.plot.MTSFigure.get_yhat"]], "get_yhat_iqr() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.get_yhat_iqr"]], "get_yhat_iqr() (merlion.plot.mtsfigure method)": [[1, "merlion.plot.MTSFigure.get_yhat_iqr"]], "merlion": [[1, "module-merlion"]], "merlion.plot": [[1, "module-merlion.plot"]], "module": [[1, "module-merlion"], [1, "module-merlion.plot"], [3, "module-merlion.evaluate"], [3, "module-merlion.evaluate.anomaly"], [3, "module-merlion.evaluate.base"], [3, "module-merlion.evaluate.forecast"], [4, "module-merlion.models"], [4, "module-merlion.models.base"], [4, "module-merlion.models.defaults"], [4, "module-merlion.models.factory"], [4, "module-merlion.models.layers"], [5, "module-merlion.models.anomaly"], [5, "module-merlion.models.anomaly.autoencoder"], [5, "module-merlion.models.anomaly.base"], [5, "module-merlion.models.anomaly.dagmm"], [5, "module-merlion.models.anomaly.dbl"], [5, "module-merlion.models.anomaly.deep_point_anomaly_detector"], [5, "module-merlion.models.anomaly.isolation_forest"], [5, "module-merlion.models.anomaly.lstm_ed"], [5, "module-merlion.models.anomaly.random_cut_forest"], [5, "module-merlion.models.anomaly.spectral_residual"], [5, "module-merlion.models.anomaly.stat_threshold"], [5, "module-merlion.models.anomaly.vae"], [5, "module-merlion.models.anomaly.windstats"], [5, "module-merlion.models.anomaly.zms"], [6, "module-merlion.models.anomaly.change_point"], [6, "module-merlion.models.anomaly.change_point.bocpd"], [7, "module-merlion.models.anomaly.forecast_based"], [7, "module-merlion.models.anomaly.forecast_based.arima"], [7, "module-merlion.models.anomaly.forecast_based.base"], [7, "module-merlion.models.anomaly.forecast_based.ets"], [7, "module-merlion.models.anomaly.forecast_based.lstm"], [7, "module-merlion.models.anomaly.forecast_based.mses"], [7, "module-merlion.models.anomaly.forecast_based.prophet"], [7, "module-merlion.models.anomaly.forecast_based.sarima"], [8, "module-merlion.models.automl"], [8, "module-merlion.models.automl.autoets"], [8, "module-merlion.models.automl.autoprophet"], [8, "module-merlion.models.automl.autosarima"], [8, "module-merlion.models.automl.base"], [8, "module-merlion.models.automl.search"], [8, "module-merlion.models.automl.seasonality"], [9, "module-merlion.models.ensemble"], [9, "module-merlion.models.ensemble.anomaly"], [9, "module-merlion.models.ensemble.base"], [9, "module-merlion.models.ensemble.combine"], [9, "module-merlion.models.ensemble.forecast"], [10, "module-merlion.models.forecast"], [10, "module-merlion.models.forecast.arima"], [10, "module-merlion.models.forecast.base"], [10, "module-merlion.models.forecast.ets"], [10, "module-merlion.models.forecast.lstm"], [10, "module-merlion.models.forecast.prophet"], [10, "module-merlion.models.forecast.sarima"], [10, "module-merlion.models.forecast.sklearn_base"], [10, "module-merlion.models.forecast.smoother"], [10, "module-merlion.models.forecast.trees"], [10, "module-merlion.models.forecast.vector_ar"], [11, "module-merlion.models.utils"], [11, "module-merlion.models.utils.autosarima_utils"], [11, "module-merlion.models.utils.rolling_window_dataset"], [12, "module-merlion.post_process"], [12, "module-merlion.post_process.base"], [12, "module-merlion.post_process.calibrate"], [12, "module-merlion.post_process.factory"], [12, "module-merlion.post_process.sequence"], [12, "module-merlion.post_process.threshold"], [13, "module-merlion.spark"], [13, "module-merlion.spark.dataset"], [13, "module-merlion.spark.pandas_udf"], [14, "module-merlion.transform"], [14, "module-merlion.transform.anomalize"], [14, "module-merlion.transform.base"], [14, "module-merlion.transform.bound"], [14, "module-merlion.transform.factory"], [14, "module-merlion.transform.moving_average"], [14, "module-merlion.transform.normalize"], [14, "module-merlion.transform.resample"], [14, "module-merlion.transform.sequence"], [15, "module-merlion.utils"], [15, "module-merlion.utils.conj_priors"], [15, "module-merlion.utils.data_io"], [15, "module-merlion.utils.hts"], [15, "module-merlion.utils.istat"], [15, "module-merlion.utils.resample"], [15, "module-merlion.utils.time_series"], [15, "module-merlion.utils.ts_generator"], [16, "module-ts_datasets"], [16, "module-ts_datasets.base"], [17, "module-ts_datasets.anomaly"], [18, "module-ts_datasets.forecast"]], "plot() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.plot"]], "plot_anoms() (in module merlion.plot)": [[1, "merlion.plot.plot_anoms"]], "plot_anoms_plotly() (in module merlion.plot)": [[1, "merlion.plot.plot_anoms_plotly"]], "plot_plotly() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.plot_plotly"]], "plot_plotly() (merlion.plot.mtsfigure method)": [[1, "merlion.plot.MTSFigure.plot_plotly"]], "t0 (merlion.plot.figure property)": [[1, "merlion.plot.Figure.t0"]], "t0 (merlion.plot.mtsfigure property)": [[1, "merlion.plot.MTSFigure.t0"]], "t_split (merlion.plot.figure property)": [[1, "merlion.plot.Figure.t_split"]], "t_split (merlion.plot.mtsfigure property)": [[1, "merlion.plot.MTSFigure.t_split"]], "tf (merlion.plot.figure property)": [[1, "merlion.plot.Figure.tf"]], "tf (merlion.plot.mtsfigure property)": [[1, "merlion.plot.MTSFigure.tf"]], "evaluatorbase (class in merlion.evaluate.base)": [[3, "merlion.evaluate.base.EvaluatorBase"]], "evaluatorconfig (class in merlion.evaluate.base)": [[3, "merlion.evaluate.base.EvaluatorConfig"]], "f1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.F1"]], "f2 (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.F2"]], "f5 (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.F5"]], "forecastevaluator (class in merlion.evaluate.forecast)": [[3, "merlion.evaluate.forecast.ForecastEvaluator"]], "forecastevaluatorconfig (class in merlion.evaluate.forecast)": [[3, "merlion.evaluate.forecast.ForecastEvaluatorConfig"]], "forecastmetric (class in merlion.evaluate.forecast)": [[3, "merlion.evaluate.forecast.ForecastMetric"]], "forecastscoreaccumulator (class in merlion.evaluate.forecast)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator"]], "mae (merlion.evaluate.forecast.forecastmetric attribute)": [[3, "merlion.evaluate.forecast.ForecastMetric.MAE"]], "marre (merlion.evaluate.forecast.forecastmetric attribute)": [[3, "merlion.evaluate.forecast.ForecastMetric.MARRE"]], "mase (merlion.evaluate.forecast.forecastmetric attribute)": [[3, "merlion.evaluate.forecast.ForecastMetric.MASE"]], "msis (merlion.evaluate.forecast.forecastmetric attribute)": [[3, "merlion.evaluate.forecast.ForecastMetric.MSIS"]], "meantimetodetect (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.MeanTimeToDetect"]], "nabscore (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.NABScore"]], "nabscorelowfn (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.NABScoreLowFN"]], "nabscorelowfp (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.NABScoreLowFP"]], "pointadjusted (merlion.evaluate.anomaly.scoretype attribute)": [[3, "merlion.evaluate.anomaly.ScoreType.PointAdjusted"]], "pointadjustedf1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedF1"]], "pointadjustedprecision (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedPrecision"]], "pointadjustedrecall (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedRecall"]], "pointwise (merlion.evaluate.anomaly.scoretype attribute)": [[3, "merlion.evaluate.anomaly.ScoreType.Pointwise"]], "pointwisef1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.PointwiseF1"]], "pointwiseprecision (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.PointwisePrecision"]], "pointwiserecall (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.PointwiseRecall"]], "precision (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.Precision"]], "rmse (merlion.evaluate.forecast.forecastmetric attribute)": [[3, "merlion.evaluate.forecast.ForecastMetric.RMSE"]], "rmspe (merlion.evaluate.forecast.forecastmetric attribute)": [[3, "merlion.evaluate.forecast.ForecastMetric.RMSPE"]], "recall (merlion.evaluate.anomaly.tsadmetric attribute)": [[3, "merlion.evaluate.anomaly.TSADMetric.Recall"]], "revisedpointadjusted (merlion.evaluate.anomaly.scoretype attribute)": [[3, "merlion.evaluate.anomaly.ScoreType.RevisedPointAdjusted"]], "scoretype (class in merlion.evaluate.anomaly)": [[3, "merlion.evaluate.anomaly.ScoreType"]], "tsadevaluator (class in merlion.evaluate.anomaly)": [[3, "merlion.evaluate.anomaly.TSADEvaluator"]], "tsadevaluatorconfig (class in merlion.evaluate.anomaly)": [[3, "merlion.evaluate.anomaly.TSADEvaluatorConfig"]], "tsadmetric (class in merlion.evaluate.anomaly)": [[3, "merlion.evaluate.anomaly.TSADMetric"]], "tsadscoreaccumulator (class in merlion.evaluate.anomaly)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator"]], "accumulate_forecast_score() (in module merlion.evaluate.forecast)": [[3, "merlion.evaluate.forecast.accumulate_forecast_score"]], "accumulate_tsad_score() (in module merlion.evaluate.anomaly)": [[3, "merlion.evaluate.anomaly.accumulate_tsad_score"]], "cadence (merlion.evaluate.base.evaluatorbase property)": [[3, "merlion.evaluate.base.EvaluatorBase.cadence"]], "cadence (merlion.evaluate.base.evaluatorconfig property)": [[3, "merlion.evaluate.base.EvaluatorConfig.cadence"]], "cadence (merlion.evaluate.forecast.forecastevaluator property)": [[3, "merlion.evaluate.forecast.ForecastEvaluator.cadence"]], "cadence (merlion.evaluate.forecast.forecastevaluatorconfig property)": [[3, "merlion.evaluate.forecast.ForecastEvaluatorConfig.cadence"]], "check_before_eval() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator.check_before_eval"]], "config_class (merlion.evaluate.anomaly.tsadevaluator attribute)": [[3, "merlion.evaluate.anomaly.TSADEvaluator.config_class"]], "config_class (merlion.evaluate.base.evaluatorbase attribute)": [[3, "merlion.evaluate.base.EvaluatorBase.config_class"]], "config_class (merlion.evaluate.forecast.forecastevaluator attribute)": [[3, "merlion.evaluate.forecast.ForecastEvaluator.config_class"]], "default_retrain_kwargs() (merlion.evaluate.anomaly.tsadevaluator method)": [[3, "merlion.evaluate.anomaly.TSADEvaluator.default_retrain_kwargs"]], "default_retrain_kwargs() (merlion.evaluate.base.evaluatorbase method)": [[3, "merlion.evaluate.base.EvaluatorBase.default_retrain_kwargs"]], "default_train_kwargs() (merlion.evaluate.base.evaluatorbase method)": [[3, "merlion.evaluate.base.EvaluatorBase.default_train_kwargs"]], "evaluate() (merlion.evaluate.anomaly.tsadevaluator method)": [[3, "merlion.evaluate.anomaly.TSADEvaluator.evaluate"]], "evaluate() (merlion.evaluate.base.evaluatorbase method)": [[3, "merlion.evaluate.base.EvaluatorBase.evaluate"]], "evaluate() (merlion.evaluate.forecast.forecastevaluator method)": [[3, "merlion.evaluate.forecast.ForecastEvaluator.evaluate"]], "f1() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator.f1"]], "f_beta() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator.f_beta"]], "get_predict() (merlion.evaluate.anomaly.tsadevaluator method)": [[3, "merlion.evaluate.anomaly.TSADEvaluator.get_predict"]], "get_predict() (merlion.evaluate.base.evaluatorbase method)": [[3, "merlion.evaluate.base.EvaluatorBase.get_predict"]], "horizon (merlion.evaluate.base.evaluatorbase property)": [[3, "merlion.evaluate.base.EvaluatorBase.horizon"]], "horizon (merlion.evaluate.base.evaluatorconfig property)": [[3, "merlion.evaluate.base.EvaluatorConfig.horizon"]], "horizon (merlion.evaluate.forecast.forecastevaluator property)": [[3, "merlion.evaluate.forecast.ForecastEvaluator.horizon"]], "horizon (merlion.evaluate.forecast.forecastevaluatorconfig property)": [[3, "merlion.evaluate.forecast.ForecastEvaluatorConfig.horizon"]], "mae() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator.mae"]], "marre() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator.marre"]], "mase() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator.mase"]], "max_delay_sec (merlion.evaluate.anomaly.tsadevaluator property)": [[3, "merlion.evaluate.anomaly.TSADEvaluator.max_delay_sec"]], "max_early_sec (merlion.evaluate.anomaly.tsadevaluator property)": [[3, "merlion.evaluate.anomaly.TSADEvaluator.max_early_sec"]], "mean_anomaly_duration() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_anomaly_duration"]], "mean_detected_anomaly_duration() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_detected_anomaly_duration"]], "mean_time_to_detect() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_time_to_detect"]], "merlion.evaluate": [[3, "module-merlion.evaluate"]], "merlion.evaluate.anomaly": [[3, "module-merlion.evaluate.anomaly"]], "merlion.evaluate.base": [[3, "module-merlion.evaluate.base"]], "merlion.evaluate.forecast": [[3, "module-merlion.evaluate.forecast"]], "msis() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator.msis"]], "nab_score() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator.nab_score"]], "precision() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator.precision"]], "recall() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[3, "merlion.evaluate.anomaly.TSADScoreAccumulator.recall"]], "retrain_freq (merlion.evaluate.base.evaluatorbase property)": [[3, "merlion.evaluate.base.EvaluatorBase.retrain_freq"]], "rmse() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator.rmse"]], "rmspe() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator.rmspe"]], "smape (merlion.evaluate.forecast.forecastmetric attribute)": [[3, "merlion.evaluate.forecast.ForecastMetric.sMAPE"]], "smape() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[3, "merlion.evaluate.forecast.ForecastScoreAccumulator.smape"]], "to_dict() (merlion.evaluate.base.evaluatorconfig method)": [[3, "merlion.evaluate.base.EvaluatorConfig.to_dict"]], "train_window (merlion.evaluate.base.evaluatorbase property)": [[3, "merlion.evaluate.base.EvaluatorBase.train_window"]], "config (class in merlion.models.base)": [[4, "merlion.models.base.Config"]], "defaultdetector (class in merlion.models.defaults)": [[4, "merlion.models.defaults.DefaultDetector"]], "defaultdetectorconfig (class in merlion.models.defaults)": [[4, "merlion.models.defaults.DefaultDetectorConfig"]], "defaultforecaster (class in merlion.models.defaults)": [[4, "merlion.models.defaults.DefaultForecaster"]], "defaultforecasterconfig (class in merlion.models.defaults)": [[4, "merlion.models.defaults.DefaultForecasterConfig"]], "layereddetector (class in merlion.models.layers)": [[4, "merlion.models.layers.LayeredDetector"]], "layeredforecaster (class in merlion.models.layers)": [[4, "merlion.models.layers.LayeredForecaster"]], "layeredforecastingdetector (class in merlion.models.layers)": [[4, "merlion.models.layers.LayeredForecastingDetector"]], "layeredmodel (class in merlion.models.layers)": [[4, "merlion.models.layers.LayeredModel"]], "layeredmodelconfig (class in merlion.models.layers)": [[4, "merlion.models.layers.LayeredModelConfig"]], "modelbase (class in merlion.models.base)": [[4, "merlion.models.base.ModelBase"]], "modelfactory (class in merlion.models.factory)": [[4, "merlion.models.factory.ModelFactory"]], "multipletimeseriesmodelmixin (class in merlion.models.base)": [[4, "merlion.models.base.MultipleTimeseriesModelMixin"]], "normalizingconfig (class in merlion.models.base)": [[4, "merlion.models.base.NormalizingConfig"]], "auto_align (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.auto_align"]], "base_model (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.base_model"]], "base_model (merlion.models.layers.layeredmodel property)": [[4, "merlion.models.layers.LayeredModel.base_model"]], "base_model (merlion.models.layers.layeredmodelconfig property)": [[4, "merlion.models.layers.LayeredModelConfig.base_model"]], "config_class (merlion.models.base.modelbase attribute)": [[4, "merlion.models.base.ModelBase.config_class"]], "config_class (merlion.models.defaults.defaultdetector attribute)": [[4, "merlion.models.defaults.DefaultDetector.config_class"]], "config_class (merlion.models.defaults.defaultforecaster attribute)": [[4, "merlion.models.defaults.DefaultForecaster.config_class"]], "config_class (merlion.models.layers.layeredmodel attribute)": [[4, "merlion.models.layers.LayeredModel.config_class"]], "create() (merlion.models.factory.modelfactory class method)": [[4, "merlion.models.factory.ModelFactory.create"]], "dim (merlion.models.base.config attribute)": [[4, "merlion.models.base.Config.dim"]], "dim (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.dim"]], "filename (merlion.models.base.config attribute)": [[4, "merlion.models.base.Config.filename"]], "filename (merlion.models.base.modelbase attribute)": [[4, "merlion.models.base.ModelBase.filename"]], "forecast() (merlion.models.layers.layeredforecaster method)": [[4, "merlion.models.layers.LayeredForecaster.forecast"]], "from_bytes() (merlion.models.base.modelbase class method)": [[4, "merlion.models.base.ModelBase.from_bytes"]], "from_dict() (merlion.models.base.config class method)": [[4, "merlion.models.base.Config.from_dict"]], "from_dict() (merlion.models.layers.layeredmodelconfig class method)": [[4, "merlion.models.layers.LayeredModelConfig.from_dict"]], "full_transform (merlion.models.base.normalizingconfig property)": [[4, "merlion.models.base.NormalizingConfig.full_transform"]], "get_anomaly_score() (merlion.models.layers.layereddetector method)": [[4, "merlion.models.layers.LayeredDetector.get_anomaly_score"]], "get_model_class() (merlion.models.factory.modelfactory class method)": [[4, "merlion.models.factory.ModelFactory.get_model_class"]], "get_unused_kwargs() (merlion.models.base.config method)": [[4, "merlion.models.base.Config.get_unused_kwargs"]], "get_unused_kwargs() (merlion.models.layers.layeredmodelconfig method)": [[4, "merlion.models.layers.LayeredModelConfig.get_unused_kwargs"]], "granularity (merlion.models.defaults.defaultdetector property)": [[4, "merlion.models.defaults.DefaultDetector.granularity"]], "granularity (merlion.models.defaults.defaultforecaster property)": [[4, "merlion.models.defaults.DefaultForecaster.granularity"]], "instantiate_or_copy_model() (in module merlion.models.factory)": [[4, "merlion.models.factory.instantiate_or_copy_model"]], "last_train_time (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.last_train_time"]], "load() (merlion.models.base.modelbase class method)": [[4, "merlion.models.base.ModelBase.load"]], "load() (merlion.models.factory.modelfactory class method)": [[4, "merlion.models.factory.ModelFactory.load"]], "load_bytes() (merlion.models.factory.modelfactory class method)": [[4, "merlion.models.factory.ModelFactory.load_bytes"]], "merlion.models": [[4, "module-merlion.models"]], "merlion.models.base": [[4, "module-merlion.models.base"]], "merlion.models.defaults": [[4, "module-merlion.models.defaults"]], "merlion.models.factory": [[4, "module-merlion.models.factory"]], "merlion.models.layers": [[4, "module-merlion.models.layers"]], "model (merlion.models.layers.layeredmodel property)": [[4, "merlion.models.layers.LayeredModel.model"]], "require_even_sampling (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.require_even_sampling"]], "require_even_sampling (merlion.models.layers.layeredmodel property)": [[4, "merlion.models.layers.LayeredModel.require_even_sampling"]], "require_univariate (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.require_univariate"]], "require_univariate (merlion.models.layers.layeredmodel property)": [[4, "merlion.models.layers.LayeredModel.require_univariate"]], "reset() (merlion.models.base.modelbase method)": [[4, "merlion.models.base.ModelBase.reset"]], "reset() (merlion.models.defaults.defaultdetector method)": [[4, "merlion.models.defaults.DefaultDetector.reset"]], "reset() (merlion.models.defaults.defaultforecaster method)": [[4, "merlion.models.defaults.DefaultForecaster.reset"]], "reset() (merlion.models.layers.layeredmodel method)": [[4, "merlion.models.layers.LayeredModel.reset"]], "save() (merlion.models.base.modelbase method)": [[4, "merlion.models.base.ModelBase.save"]], "supports_exog (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.supports_exog"]], "supports_exog (merlion.models.defaults.defaultforecaster property)": [[4, "merlion.models.defaults.DefaultForecaster.supports_exog"]], "timedelta (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.timedelta"]], "to_bytes() (merlion.models.base.modelbase method)": [[4, "merlion.models.base.ModelBase.to_bytes"]], "to_dict() (merlion.models.base.config method)": [[4, "merlion.models.base.Config.to_dict"]], "to_dict() (merlion.models.layers.layeredmodelconfig method)": [[4, "merlion.models.layers.LayeredModelConfig.to_dict"]], "train() (merlion.models.base.modelbase method)": [[4, "merlion.models.base.ModelBase.train"]], "train() (merlion.models.defaults.defaultdetector method)": [[4, "merlion.models.defaults.DefaultDetector.train"]], "train() (merlion.models.defaults.defaultforecaster method)": [[4, "merlion.models.defaults.DefaultForecaster.train"]], "train_data (merlion.models.base.modelbase attribute)": [[4, "merlion.models.base.ModelBase.train_data"]], "train_data (merlion.models.layers.layeredmodel property)": [[4, "merlion.models.layers.LayeredModel.train_data"]], "train_multiple() (merlion.models.base.multipletimeseriesmodelmixin method)": [[4, "merlion.models.base.MultipleTimeseriesModelMixin.train_multiple"]], "train_post_process() (merlion.models.base.modelbase method)": [[4, "merlion.models.base.ModelBase.train_post_process"]], "train_post_process() (merlion.models.layers.layeredmodel method)": [[4, "merlion.models.layers.LayeredModel.train_post_process"]], "train_pre_process() (merlion.models.base.modelbase method)": [[4, "merlion.models.base.ModelBase.train_pre_process"]], "train_pre_process() (merlion.models.layers.layeredmodel method)": [[4, "merlion.models.layers.LayeredModel.train_pre_process"]], "transform (merlion.models.base.config attribute)": [[4, "merlion.models.base.Config.transform"]], "transform (merlion.models.base.modelbase property)": [[4, "merlion.models.base.ModelBase.transform"]], "transform (merlion.models.base.normalizingconfig property)": [[4, "merlion.models.base.NormalizingConfig.transform"]], "transform_time_series() (merlion.models.base.modelbase method)": [[4, "merlion.models.base.ModelBase.transform_time_series"]], "autoencoder (class in merlion.models.anomaly.autoencoder)": [[5, "merlion.models.anomaly.autoencoder.AutoEncoder"]], "autoencoderconfig (class in merlion.models.anomaly.autoencoder)": [[5, "merlion.models.anomaly.autoencoder.AutoEncoderConfig"]], "dagmm (class in merlion.models.anomaly.dagmm)": [[5, "merlion.models.anomaly.dagmm.DAGMM"]], "dagmmconfig (class in merlion.models.anomaly.dagmm)": [[5, "merlion.models.anomaly.dagmm.DAGMMConfig"]], "deeppointanomalydetector (class in merlion.models.anomaly.deep_point_anomaly_detector)": [[5, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector"]], "deeppointanomalydetectorconfig (class in merlion.models.anomaly.deep_point_anomaly_detector)": [[5, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetectorConfig"]], "detectorbase (class in merlion.models.anomaly.base)": [[5, "merlion.models.anomaly.base.DetectorBase"]], "detectorconfig (class in merlion.models.anomaly.base)": [[5, "merlion.models.anomaly.base.DetectorConfig"]], "dynamicbaseline (class in merlion.models.anomaly.dbl)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline"]], "dynamicbaselineconfig (class in merlion.models.anomaly.dbl)": [[5, "merlion.models.anomaly.dbl.DynamicBaselineConfig"]], "isolationforest (class in merlion.models.anomaly.isolation_forest)": [[5, "merlion.models.anomaly.isolation_forest.IsolationForest"]], "isolationforestconfig (class in merlion.models.anomaly.isolation_forest)": [[5, "merlion.models.anomaly.isolation_forest.IsolationForestConfig"]], "jvmsingleton (class in merlion.models.anomaly.random_cut_forest)": [[5, "merlion.models.anomaly.random_cut_forest.JVMSingleton"]], "lstmed (class in merlion.models.anomaly.lstm_ed)": [[5, "merlion.models.anomaly.lstm_ed.LSTMED"]], "lstmedconfig (class in merlion.models.anomaly.lstm_ed)": [[5, "merlion.models.anomaly.lstm_ed.LSTMEDConfig"]], "multipletimeseriesdetectormixin (class in merlion.models.anomaly.base)": [[5, "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin"]], "nocalibrationdetectorconfig (class in merlion.models.anomaly.base)": [[5, "merlion.models.anomaly.base.NoCalibrationDetectorConfig"]], "randomcutforest (class in merlion.models.anomaly.random_cut_forest)": [[5, "merlion.models.anomaly.random_cut_forest.RandomCutForest"]], "randomcutforestconfig (class in merlion.models.anomaly.random_cut_forest)": [[5, "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig"]], "segment (class in merlion.models.anomaly.dbl)": [[5, "merlion.models.anomaly.dbl.Segment"]], "segmenter (class in merlion.models.anomaly.dbl)": [[5, "merlion.models.anomaly.dbl.Segmenter"]], "spectralresidual (class in merlion.models.anomaly.spectral_residual)": [[5, "merlion.models.anomaly.spectral_residual.SpectralResidual"]], "spectralresidualconfig (class in merlion.models.anomaly.spectral_residual)": [[5, "merlion.models.anomaly.spectral_residual.SpectralResidualConfig"]], "statthreshold (class in merlion.models.anomaly.stat_threshold)": [[5, "merlion.models.anomaly.stat_threshold.StatThreshold"]], "statthresholdconfig (class in merlion.models.anomaly.stat_threshold)": [[5, "merlion.models.anomaly.stat_threshold.StatThresholdConfig"]], "trend (class in merlion.models.anomaly.dbl)": [[5, "merlion.models.anomaly.dbl.Trend"]], "vae (class in merlion.models.anomaly.vae)": [[5, "merlion.models.anomaly.vae.VAE"]], "vaeconfig (class in merlion.models.anomaly.vae)": [[5, "merlion.models.anomaly.vae.VAEConfig"]], "windstats (class in merlion.models.anomaly.windstats)": [[5, "merlion.models.anomaly.windstats.WindStats"]], "windstatsconfig (class in merlion.models.anomaly.windstats)": [[5, "merlion.models.anomaly.windstats.WindStatsConfig"]], "zms (class in merlion.models.anomaly.zms)": [[5, "merlion.models.anomaly.zms.ZMS"]], "zmsconfig (class in merlion.models.anomaly.zms)": [[5, "merlion.models.anomaly.zms.ZMSConfig"]], "add() (merlion.models.anomaly.dbl.segment method)": [[5, "merlion.models.anomaly.dbl.Segment.add"]], "add() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.add"]], "adjust_z_scores (merlion.models.anomaly.zms.zms property)": [[5, "merlion.models.anomaly.zms.ZMS.adjust_z_scores"]], "calibrator (merlion.models.anomaly.base.detectorbase property)": [[5, "merlion.models.anomaly.base.DetectorBase.calibrator"]], "calibrator (merlion.models.anomaly.base.detectorconfig attribute)": [[5, "merlion.models.anomaly.base.DetectorConfig.calibrator"]], "calibrator (merlion.models.anomaly.base.nocalibrationdetectorconfig property)": [[5, "merlion.models.anomaly.base.NoCalibrationDetectorConfig.calibrator"]], "config_class (merlion.models.anomaly.autoencoder.autoencoder attribute)": [[5, "merlion.models.anomaly.autoencoder.AutoEncoder.config_class"]], "config_class (merlion.models.anomaly.base.detectorbase attribute)": [[5, "merlion.models.anomaly.base.DetectorBase.config_class"]], "config_class (merlion.models.anomaly.dagmm.dagmm attribute)": [[5, "merlion.models.anomaly.dagmm.DAGMM.config_class"]], "config_class (merlion.models.anomaly.dbl.dynamicbaseline attribute)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.config_class"]], "config_class (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector attribute)": [[5, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.config_class"]], "config_class (merlion.models.anomaly.isolation_forest.isolationforest attribute)": [[5, "merlion.models.anomaly.isolation_forest.IsolationForest.config_class"]], "config_class (merlion.models.anomaly.lstm_ed.lstmed attribute)": [[5, "merlion.models.anomaly.lstm_ed.LSTMED.config_class"]], "config_class (merlion.models.anomaly.random_cut_forest.randomcutforest attribute)": [[5, "merlion.models.anomaly.random_cut_forest.RandomCutForest.config_class"]], "config_class (merlion.models.anomaly.spectral_residual.spectralresidual attribute)": [[5, "merlion.models.anomaly.spectral_residual.SpectralResidual.config_class"]], "config_class (merlion.models.anomaly.stat_threshold.statthreshold attribute)": [[5, "merlion.models.anomaly.stat_threshold.StatThreshold.config_class"]], "config_class (merlion.models.anomaly.vae.vae attribute)": [[5, "merlion.models.anomaly.vae.VAE.config_class"]], "config_class (merlion.models.anomaly.windstats.windstats attribute)": [[5, "merlion.models.anomaly.windstats.WindStats.config_class"]], "config_class (merlion.models.anomaly.zms.zms attribute)": [[5, "merlion.models.anomaly.zms.ZMS.config_class"]], "daily (merlion.models.anomaly.dbl.trend attribute)": [[5, "merlion.models.anomaly.dbl.Trend.daily"]], "data (merlion.models.anomaly.dbl.dynamicbaseline property)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.data"]], "day_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[5, "merlion.models.anomaly.dbl.Segmenter.day_delta"]], "day_key() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.day_key"]], "determine_train_window() (merlion.models.anomaly.dbl.dynamicbaselineconfig method)": [[5, "merlion.models.anomaly.dbl.DynamicBaselineConfig.determine_train_window"]], "drop() (merlion.models.anomaly.dbl.segment method)": [[5, "merlion.models.anomaly.dbl.Segment.drop"]], "drop() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.drop"]], "enable_calibrator (merlion.models.anomaly.base.detectorconfig attribute)": [[5, "merlion.models.anomaly.base.DetectorConfig.enable_calibrator"]], "enable_calibrator (merlion.models.anomaly.base.nocalibrationdetectorconfig property)": [[5, "merlion.models.anomaly.base.NoCalibrationDetectorConfig.enable_calibrator"]], "enable_threshold (merlion.models.anomaly.base.detectorconfig attribute)": [[5, "merlion.models.anomaly.base.DetectorConfig.enable_threshold"]], "fixed_period (merlion.models.anomaly.dbl.dynamicbaseline property)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.fixed_period"]], "fixed_period (merlion.models.anomaly.dbl.dynamicbaselineconfig property)": [[5, "merlion.models.anomaly.dbl.DynamicBaselineConfig.fixed_period"]], "from_dict() (merlion.models.anomaly.base.detectorconfig class method)": [[5, "merlion.models.anomaly.base.DetectorConfig.from_dict"]], "full_transform (merlion.models.anomaly.zms.zmsconfig property)": [[5, "merlion.models.anomaly.zms.ZMSConfig.full_transform"]], "gateway() (merlion.models.anomaly.random_cut_forest.jvmsingleton class method)": [[5, "merlion.models.anomaly.random_cut_forest.JVMSingleton.gateway"]], "get_anomaly_label() (merlion.models.anomaly.base.detectorbase method)": [[5, "merlion.models.anomaly.base.DetectorBase.get_anomaly_label"]], "get_anomaly_score() (merlion.models.anomaly.base.detectorbase method)": [[5, "merlion.models.anomaly.base.DetectorBase.get_anomaly_score"]], "get_baseline() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.get_baseline"]], "get_baseline() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.get_baseline"]], "get_baseline_figure() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.get_baseline_figure"]], "get_figure() (merlion.models.anomaly.base.detectorbase method)": [[5, "merlion.models.anomaly.base.DetectorBase.get_figure"]], "get_relevant() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.get_relevant"]], "has_fixed_period (merlion.models.anomaly.dbl.dynamicbaseline property)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.has_fixed_period"]], "hour_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[5, "merlion.models.anomaly.dbl.Segmenter.hour_delta"]], "java_params (merlion.models.anomaly.random_cut_forest.randomcutforestconfig property)": [[5, "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig.java_params"]], "lag_inflation (merlion.models.anomaly.zms.zms property)": [[5, "merlion.models.anomaly.zms.ZMS.lag_inflation"]], "lag_scales (merlion.models.anomaly.zms.zms property)": [[5, "merlion.models.anomaly.zms.ZMS.lag_scales"]], "merlion.models.anomaly": [[5, "module-merlion.models.anomaly"]], "merlion.models.anomaly.autoencoder": [[5, "module-merlion.models.anomaly.autoencoder"]], "merlion.models.anomaly.base": [[5, "module-merlion.models.anomaly.base"]], "merlion.models.anomaly.dagmm": [[5, "module-merlion.models.anomaly.dagmm"]], "merlion.models.anomaly.dbl": [[5, "module-merlion.models.anomaly.dbl"]], "merlion.models.anomaly.deep_point_anomaly_detector": [[5, "module-merlion.models.anomaly.deep_point_anomaly_detector"]], "merlion.models.anomaly.isolation_forest": [[5, "module-merlion.models.anomaly.isolation_forest"]], "merlion.models.anomaly.lstm_ed": [[5, "module-merlion.models.anomaly.lstm_ed"]], "merlion.models.anomaly.random_cut_forest": [[5, "module-merlion.models.anomaly.random_cut_forest"]], "merlion.models.anomaly.spectral_residual": [[5, "module-merlion.models.anomaly.spectral_residual"]], "merlion.models.anomaly.stat_threshold": [[5, "module-merlion.models.anomaly.stat_threshold"]], "merlion.models.anomaly.vae": [[5, "module-merlion.models.anomaly.vae"]], "merlion.models.anomaly.windstats": [[5, "module-merlion.models.anomaly.windstats"]], "merlion.models.anomaly.zms": [[5, "module-merlion.models.anomaly.zms"]], "min_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[5, "merlion.models.anomaly.dbl.Segmenter.min_delta"]], "monthly (merlion.models.anomaly.dbl.trend attribute)": [[5, "merlion.models.anomaly.dbl.Trend.monthly"]], "n_lags (merlion.models.anomaly.zms.zms property)": [[5, "merlion.models.anomaly.zms.ZMS.n_lags"]], "n_lags (merlion.models.anomaly.zms.zmsconfig property)": [[5, "merlion.models.anomaly.zms.ZMSConfig.n_lags"]], "online_updates (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[5, "merlion.models.anomaly.random_cut_forest.RandomCutForest.online_updates"]], "plot_anomaly() (merlion.models.anomaly.base.detectorbase method)": [[5, "merlion.models.anomaly.base.DetectorBase.plot_anomaly"]], "plot_anomaly_plotly() (merlion.models.anomaly.base.detectorbase method)": [[5, "merlion.models.anomaly.base.DetectorBase.plot_anomaly_plotly"]], "post_rule (merlion.models.anomaly.base.detectorbase property)": [[5, "merlion.models.anomaly.base.DetectorBase.post_rule"]], "post_rule (merlion.models.anomaly.base.detectorconfig property)": [[5, "merlion.models.anomaly.base.DetectorConfig.post_rule"]], "require_even_sampling (merlion.models.anomaly.autoencoder.autoencoder property)": [[5, "merlion.models.anomaly.autoencoder.AutoEncoder.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.dagmm.dagmm property)": [[5, "merlion.models.anomaly.dagmm.DAGMM.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.dbl.dynamicbaseline property)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector property)": [[5, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.isolation_forest.isolationforest property)": [[5, "merlion.models.anomaly.isolation_forest.IsolationForest.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.lstm_ed.lstmed property)": [[5, "merlion.models.anomaly.lstm_ed.LSTMED.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[5, "merlion.models.anomaly.random_cut_forest.RandomCutForest.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[5, "merlion.models.anomaly.spectral_residual.SpectralResidual.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.stat_threshold.statthreshold property)": [[5, "merlion.models.anomaly.stat_threshold.StatThreshold.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.vae.vae property)": [[5, "merlion.models.anomaly.vae.VAE.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.windstats.windstats property)": [[5, "merlion.models.anomaly.windstats.WindStats.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.zms.zms property)": [[5, "merlion.models.anomaly.zms.ZMS.require_even_sampling"]], "require_univariate (merlion.models.anomaly.autoencoder.autoencoder property)": [[5, "merlion.models.anomaly.autoencoder.AutoEncoder.require_univariate"]], "require_univariate (merlion.models.anomaly.dagmm.dagmm property)": [[5, "merlion.models.anomaly.dagmm.DAGMM.require_univariate"]], "require_univariate (merlion.models.anomaly.dbl.dynamicbaseline property)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.require_univariate"]], "require_univariate (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector property)": [[5, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.require_univariate"]], "require_univariate (merlion.models.anomaly.isolation_forest.isolationforest property)": [[5, "merlion.models.anomaly.isolation_forest.IsolationForest.require_univariate"]], "require_univariate (merlion.models.anomaly.lstm_ed.lstmed property)": [[5, "merlion.models.anomaly.lstm_ed.LSTMED.require_univariate"]], "require_univariate (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[5, "merlion.models.anomaly.random_cut_forest.RandomCutForest.require_univariate"]], "require_univariate (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[5, "merlion.models.anomaly.spectral_residual.SpectralResidual.require_univariate"]], "require_univariate (merlion.models.anomaly.stat_threshold.statthreshold property)": [[5, "merlion.models.anomaly.stat_threshold.StatThreshold.require_univariate"]], "require_univariate (merlion.models.anomaly.vae.vae property)": [[5, "merlion.models.anomaly.vae.VAE.require_univariate"]], "require_univariate (merlion.models.anomaly.windstats.windstats property)": [[5, "merlion.models.anomaly.windstats.WindStats.require_univariate"]], "require_univariate (merlion.models.anomaly.zms.zms property)": [[5, "merlion.models.anomaly.zms.ZMS.require_univariate"]], "reset() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.reset"]], "score() (merlion.models.anomaly.dbl.segment method)": [[5, "merlion.models.anomaly.dbl.Segment.score"]], "score() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.score"]], "segment_key() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.segment_key"]], "target_seq_index (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[5, "merlion.models.anomaly.spectral_residual.SpectralResidual.target_seq_index"]], "threshold (merlion.models.anomaly.base.detectorbase property)": [[5, "merlion.models.anomaly.base.DetectorBase.threshold"]], "threshold (merlion.models.anomaly.base.detectorconfig attribute)": [[5, "merlion.models.anomaly.base.DetectorConfig.threshold"]], "to_dict() (merlion.models.anomaly.dbl.dynamicbaselineconfig method)": [[5, "merlion.models.anomaly.dbl.DynamicBaselineConfig.to_dict"]], "to_dict() (merlion.models.anomaly.zms.zmsconfig method)": [[5, "merlion.models.anomaly.zms.ZMSConfig.to_dict"]], "train() (merlion.models.anomaly.base.detectorbase method)": [[5, "merlion.models.anomaly.base.DetectorBase.train"]], "train() (merlion.models.anomaly.zms.zms method)": [[5, "merlion.models.anomaly.zms.ZMS.train"]], "train_multiple() (merlion.models.anomaly.base.multipletimeseriesdetectormixin method)": [[5, "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin.train_multiple"]], "train_multiple() (merlion.models.anomaly.dagmm.dagmm method)": [[5, "merlion.models.anomaly.dagmm.DAGMM.train_multiple"]], "train_post_process() (merlion.models.anomaly.base.detectorbase method)": [[5, "merlion.models.anomaly.base.DetectorBase.train_post_process"]], "train_window (merlion.models.anomaly.dbl.dynamicbaseline property)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.train_window"]], "trend (merlion.models.anomaly.dbl.segmenter property)": [[5, "merlion.models.anomaly.dbl.Segmenter.trend"]], "trends (merlion.models.anomaly.dbl.dynamicbaselineconfig property)": [[5, "merlion.models.anomaly.dbl.DynamicBaselineConfig.trends"]], "trends (merlion.models.anomaly.dbl.segmenter property)": [[5, "merlion.models.anomaly.dbl.Segmenter.trends"]], "update() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[5, "merlion.models.anomaly.dbl.DynamicBaseline.update"]], "weekday_key() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.weekday_key"]], "weekly (merlion.models.anomaly.dbl.trend attribute)": [[5, "merlion.models.anomaly.dbl.Trend.weekly"]], "wind_delta (merlion.models.anomaly.dbl.segmenter property)": [[5, "merlion.models.anomaly.dbl.Segmenter.wind_delta"]], "window_key() (merlion.models.anomaly.dbl.segmenter method)": [[5, "merlion.models.anomaly.dbl.Segmenter.window_key"]], "zero_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[5, "merlion.models.anomaly.dbl.Segmenter.zero_delta"]], "auto (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[6, "merlion.models.anomaly.change_point.bocpd.ChangeKind.Auto"]], "bocpd (class in merlion.models.anomaly.change_point.bocpd)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD"]], "bocpdconfig (class in merlion.models.anomaly.change_point.bocpd)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPDConfig"]], "changekind (class in merlion.models.anomaly.change_point.bocpd)": [[6, "merlion.models.anomaly.change_point.bocpd.ChangeKind"]], "levelshift (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[6, "merlion.models.anomaly.change_point.bocpd.ChangeKind.LevelShift"]], "trendchange (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[6, "merlion.models.anomaly.change_point.bocpd.ChangeKind.TrendChange"]], "change_kind (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.change_kind"]], "change_kind (merlion.models.anomaly.change_point.bocpd.bocpdconfig property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPDConfig.change_kind"]], "config_class (merlion.models.anomaly.change_point.bocpd.bocpd attribute)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.config_class"]], "cp_prior (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.cp_prior"]], "get_anomaly_score() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.get_anomaly_score"]], "get_figure() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.get_figure"]], "lag (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.lag"]], "last_train_time (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.last_train_time"]], "merlion.models.anomaly.change_point": [[6, "module-merlion.models.anomaly.change_point"]], "merlion.models.anomaly.change_point.bocpd": [[6, "module-merlion.models.anomaly.change_point.bocpd"]], "min_likelihood (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.min_likelihood"]], "n_seen (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.n_seen"]], "require_even_sampling (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.require_even_sampling"]], "require_univariate (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.require_univariate"]], "train_pre_process() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.train_pre_process"]], "update() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[6, "merlion.models.anomaly.change_point.bocpd.BOCPD.update"]], "arimadetector (class in merlion.models.anomaly.forecast_based.arima)": [[7, "merlion.models.anomaly.forecast_based.arima.ArimaDetector"]], "arimadetectorconfig (class in merlion.models.anomaly.forecast_based.arima)": [[7, "merlion.models.anomaly.forecast_based.arima.ArimaDetectorConfig"]], "etsdetector (class in merlion.models.anomaly.forecast_based.ets)": [[7, "merlion.models.anomaly.forecast_based.ets.ETSDetector"]], "etsdetectorconfig (class in merlion.models.anomaly.forecast_based.ets)": [[7, "merlion.models.anomaly.forecast_based.ets.ETSDetectorConfig"]], "forecastingdetectorbase (class in merlion.models.anomaly.forecast_based.base)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase"]], "lstmdetector (class in merlion.models.anomaly.forecast_based.lstm)": [[7, "merlion.models.anomaly.forecast_based.lstm.LSTMDetector"]], "lstmdetectorconfig (class in merlion.models.anomaly.forecast_based.lstm)": [[7, "merlion.models.anomaly.forecast_based.lstm.LSTMDetectorConfig"]], "msesdetector (class in merlion.models.anomaly.forecast_based.mses)": [[7, "merlion.models.anomaly.forecast_based.mses.MSESDetector"]], "msesdetectorconfig (class in merlion.models.anomaly.forecast_based.mses)": [[7, "merlion.models.anomaly.forecast_based.mses.MSESDetectorConfig"]], "prophetdetector (class in merlion.models.anomaly.forecast_based.prophet)": [[7, "merlion.models.anomaly.forecast_based.prophet.ProphetDetector"]], "prophetdetectorconfig (class in merlion.models.anomaly.forecast_based.prophet)": [[7, "merlion.models.anomaly.forecast_based.prophet.ProphetDetectorConfig"]], "sarimadetector (class in merlion.models.anomaly.forecast_based.sarima)": [[7, "merlion.models.anomaly.forecast_based.sarima.SarimaDetector"]], "sarimadetectorconfig (class in merlion.models.anomaly.forecast_based.sarima)": [[7, "merlion.models.anomaly.forecast_based.sarima.SarimaDetectorConfig"]], "config_class (merlion.models.anomaly.forecast_based.arima.arimadetector attribute)": [[7, "merlion.models.anomaly.forecast_based.arima.ArimaDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.ets.etsdetector attribute)": [[7, "merlion.models.anomaly.forecast_based.ets.ETSDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.lstm.lstmdetector attribute)": [[7, "merlion.models.anomaly.forecast_based.lstm.LSTMDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.mses.msesdetector attribute)": [[7, "merlion.models.anomaly.forecast_based.mses.MSESDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.prophet.prophetdetector attribute)": [[7, "merlion.models.anomaly.forecast_based.prophet.ProphetDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.sarima.sarimadetector attribute)": [[7, "merlion.models.anomaly.forecast_based.sarima.SarimaDetector.config_class"]], "forecast_to_anom_score() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.forecast_to_anom_score"]], "get_anomaly_label() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_anomaly_label"]], "get_anomaly_score() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_anomaly_score"]], "get_anomaly_score() (merlion.models.anomaly.forecast_based.mses.msesdetector method)": [[7, "merlion.models.anomaly.forecast_based.mses.MSESDetector.get_anomaly_score"]], "get_figure() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_figure"]], "merlion.models.anomaly.forecast_based": [[7, "module-merlion.models.anomaly.forecast_based"]], "merlion.models.anomaly.forecast_based.arima": [[7, "module-merlion.models.anomaly.forecast_based.arima"]], "merlion.models.anomaly.forecast_based.base": [[7, "module-merlion.models.anomaly.forecast_based.base"]], "merlion.models.anomaly.forecast_based.ets": [[7, "module-merlion.models.anomaly.forecast_based.ets"]], "merlion.models.anomaly.forecast_based.lstm": [[7, "module-merlion.models.anomaly.forecast_based.lstm"]], "merlion.models.anomaly.forecast_based.mses": [[7, "module-merlion.models.anomaly.forecast_based.mses"]], "merlion.models.anomaly.forecast_based.prophet": [[7, "module-merlion.models.anomaly.forecast_based.prophet"]], "merlion.models.anomaly.forecast_based.sarima": [[7, "module-merlion.models.anomaly.forecast_based.sarima"]], "online_updates (merlion.models.anomaly.forecast_based.mses.msesdetector property)": [[7, "merlion.models.anomaly.forecast_based.mses.MSESDetector.online_updates"]], "plot_anomaly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_anomaly"]], "plot_anomaly_plotly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_anomaly_plotly"]], "plot_forecast() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_forecast"]], "plot_forecast_plotly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_forecast_plotly"]], "train() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.train"]], "train_post_process() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[7, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.train_post_process"]], "acf (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[8, "merlion.models.automl.seasonality.PeriodicityStrategy.ACF"]], "aic (merlion.models.automl.base.informationcriterion attribute)": [[8, "merlion.models.automl.base.InformationCriterion.AIC"]], "aicc (merlion.models.automl.base.informationcriterion attribute)": [[8, "merlion.models.automl.base.InformationCriterion.AICc"]], "all (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[8, "merlion.models.automl.seasonality.PeriodicityStrategy.All"]], "autoets (class in merlion.models.automl.autoets)": [[8, "merlion.models.automl.autoets.AutoETS"]], "autoetsconfig (class in merlion.models.automl.autoets)": [[8, "merlion.models.automl.autoets.AutoETSConfig"]], "automlmixin (class in merlion.models.automl.base)": [[8, "merlion.models.automl.base.AutoMLMixIn"]], "autoprophet (class in merlion.models.automl.autoprophet)": [[8, "merlion.models.automl.autoprophet.AutoProphet"]], "autoprophetconfig (class in merlion.models.automl.autoprophet)": [[8, "merlion.models.automl.autoprophet.AutoProphetConfig"]], "autosarima (class in merlion.models.automl.autosarima)": [[8, "merlion.models.automl.autosarima.AutoSarima"]], "autosarimaconfig (class in merlion.models.automl.autosarima)": [[8, "merlion.models.automl.autosarima.AutoSarimaConfig"]], "bic (merlion.models.automl.base.informationcriterion attribute)": [[8, "merlion.models.automl.base.InformationCriterion.BIC"]], "gridsearch (class in merlion.models.automl.search)": [[8, "merlion.models.automl.search.GridSearch"]], "icautomlforecaster (class in merlion.models.automl.base)": [[8, "merlion.models.automl.base.ICAutoMLForecaster"]], "icconfig (class in merlion.models.automl.base)": [[8, "merlion.models.automl.base.ICConfig"]], "informationcriterion (class in merlion.models.automl.base)": [[8, "merlion.models.automl.base.InformationCriterion"]], "max (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[8, "merlion.models.automl.seasonality.PeriodicityStrategy.Max"]], "min (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[8, "merlion.models.automl.seasonality.PeriodicityStrategy.Min"]], "periodicitystrategy (class in merlion.models.automl.seasonality)": [[8, "merlion.models.automl.seasonality.PeriodicityStrategy"]], "seasonalityconfig (class in merlion.models.automl.seasonality)": [[8, "merlion.models.automl.seasonality.SeasonalityConfig"]], "seasonalitylayer (class in merlion.models.automl.seasonality)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer"]], "seasonalitymodel (class in merlion.models.automl.seasonality)": [[8, "merlion.models.automl.seasonality.SeasonalityModel"]], "config_class (merlion.models.automl.autoets.autoets attribute)": [[8, "merlion.models.automl.autoets.AutoETS.config_class"]], "config_class (merlion.models.automl.autoprophet.autoprophet attribute)": [[8, "merlion.models.automl.autoprophet.AutoProphet.config_class"]], "config_class (merlion.models.automl.autosarima.autosarima attribute)": [[8, "merlion.models.automl.autosarima.AutoSarima.config_class"]], "config_class (merlion.models.automl.base.icautomlforecaster attribute)": [[8, "merlion.models.automl.base.ICAutoMLForecaster.config_class"]], "config_class (merlion.models.automl.seasonality.seasonalitylayer attribute)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.config_class"]], "detect_seasonality() (merlion.models.automl.seasonality.seasonalitylayer static method)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.detect_seasonality"]], "evaluate_theta() (merlion.models.automl.autosarima.autosarima method)": [[8, "merlion.models.automl.autosarima.AutoSarima.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.base.automlmixin method)": [[8, "merlion.models.automl.base.AutoMLMixIn.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.base.icautomlforecaster method)": [[8, "merlion.models.automl.base.ICAutoMLForecaster.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.evaluate_theta"]], "generate_theta() (merlion.models.automl.autoets.autoets method)": [[8, "merlion.models.automl.autoets.AutoETS.generate_theta"]], "generate_theta() (merlion.models.automl.autoprophet.autoprophet method)": [[8, "merlion.models.automl.autoprophet.AutoProphet.generate_theta"]], "generate_theta() (merlion.models.automl.autosarima.autosarima method)": [[8, "merlion.models.automl.autosarima.AutoSarima.generate_theta"]], "generate_theta() (merlion.models.automl.base.automlmixin method)": [[8, "merlion.models.automl.base.AutoMLMixIn.generate_theta"]], "generate_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.generate_theta"]], "get_ic() (merlion.models.automl.autoets.autoets method)": [[8, "merlion.models.automl.autoets.AutoETS.get_ic"]], "get_ic() (merlion.models.automl.autoprophet.autoprophet method)": [[8, "merlion.models.automl.autoprophet.AutoProphet.get_ic"]], "get_ic() (merlion.models.automl.base.icautomlforecaster method)": [[8, "merlion.models.automl.base.ICAutoMLForecaster.get_ic"]], "information_criterion (merlion.models.automl.base.icautomlforecaster property)": [[8, "merlion.models.automl.base.ICAutoMLForecaster.information_criterion"]], "information_criterion (merlion.models.automl.base.icconfig property)": [[8, "merlion.models.automl.base.ICConfig.information_criterion"]], "max_lag (merlion.models.automl.seasonality.seasonalitylayer property)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.max_lag"]], "merlion.models.automl": [[8, "module-merlion.models.automl"]], "merlion.models.automl.autoets": [[8, "module-merlion.models.automl.autoets"]], "merlion.models.automl.autoprophet": [[8, "module-merlion.models.automl.autoprophet"]], "merlion.models.automl.autosarima": [[8, "module-merlion.models.automl.autosarima"]], "merlion.models.automl.base": [[8, "module-merlion.models.automl.base"]], "merlion.models.automl.search": [[8, "module-merlion.models.automl.search"]], "merlion.models.automl.seasonality": [[8, "module-merlion.models.automl.seasonality"]], "multi_seasonality (merlion.models.automl.autoprophet.autoprophetconfig property)": [[8, "merlion.models.automl.autoprophet.AutoProphetConfig.multi_seasonality"]], "multi_seasonality (merlion.models.automl.seasonality.seasonalityconfig property)": [[8, "merlion.models.automl.seasonality.SeasonalityConfig.multi_seasonality"]], "multi_seasonality (merlion.models.automl.seasonality.seasonalitylayer property)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.multi_seasonality"]], "order (merlion.models.automl.autosarima.autosarimaconfig property)": [[8, "merlion.models.automl.autosarima.AutoSarimaConfig.order"]], "periodicity_strategy (merlion.models.automl.seasonality.seasonalityconfig property)": [[8, "merlion.models.automl.seasonality.SeasonalityConfig.periodicity_strategy"]], "periodicity_strategy (merlion.models.automl.seasonality.seasonalitylayer property)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.periodicity_strategy"]], "pval (merlion.models.automl.seasonality.seasonalitylayer property)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.pval"]], "require_even_sampling (merlion.models.automl.seasonality.seasonalitylayer property)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.require_even_sampling"]], "require_univariate (merlion.models.automl.seasonality.seasonalitylayer property)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.require_univariate"]], "seasonal_order (merlion.models.automl.autosarima.autosarimaconfig property)": [[8, "merlion.models.automl.autosarima.AutoSarimaConfig.seasonal_order"]], "set_seasonality() (merlion.models.automl.seasonality.seasonalitymodel method)": [[8, "merlion.models.automl.seasonality.SeasonalityModel.set_seasonality"]], "set_theta() (merlion.models.automl.autoets.autoets method)": [[8, "merlion.models.automl.autoets.AutoETS.set_theta"]], "set_theta() (merlion.models.automl.autoprophet.autoprophet method)": [[8, "merlion.models.automl.autoprophet.AutoProphet.set_theta"]], "set_theta() (merlion.models.automl.autosarima.autosarima method)": [[8, "merlion.models.automl.autosarima.AutoSarima.set_theta"]], "set_theta() (merlion.models.automl.base.automlmixin method)": [[8, "merlion.models.automl.base.AutoMLMixIn.set_theta"]], "set_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[8, "merlion.models.automl.seasonality.SeasonalityLayer.set_theta"]], "supports_exog (merlion.models.automl.autoprophet.autoprophet property)": [[8, "merlion.models.automl.autoprophet.AutoProphet.supports_exog"]], "supports_exog (merlion.models.automl.autosarima.autosarima property)": [[8, "merlion.models.automl.autosarima.AutoSarima.supports_exog"]], "combinerbase (class in merlion.models.ensemble.combine)": [[9, "merlion.models.ensemble.combine.CombinerBase"]], "combinerfactory (class in merlion.models.ensemble.combine)": [[9, "merlion.models.ensemble.combine.CombinerFactory"]], "detectorensemble (class in merlion.models.ensemble.anomaly)": [[9, "merlion.models.ensemble.anomaly.DetectorEnsemble"]], "detectorensembleconfig (class in merlion.models.ensemble.anomaly)": [[9, "merlion.models.ensemble.anomaly.DetectorEnsembleConfig"]], "detectorensembletrainconfig (class in merlion.models.ensemble.anomaly)": [[9, "merlion.models.ensemble.anomaly.DetectorEnsembleTrainConfig"]], "ensemblebase (class in merlion.models.ensemble.base)": [[9, "merlion.models.ensemble.base.EnsembleBase"]], "ensembleconfig (class in merlion.models.ensemble.base)": [[9, "merlion.models.ensemble.base.EnsembleConfig"]], "ensembletrainconfig (class in merlion.models.ensemble.base)": [[9, "merlion.models.ensemble.base.EnsembleTrainConfig"]], "forecasterensemble (class in merlion.models.ensemble.forecast)": [[9, "merlion.models.ensemble.forecast.ForecasterEnsemble"]], "forecasterensembleconfig (class in merlion.models.ensemble.forecast)": [[9, "merlion.models.ensemble.forecast.ForecasterEnsembleConfig"]], "max (class in merlion.models.ensemble.combine)": [[9, "merlion.models.ensemble.combine.Max"]], "mean (class in merlion.models.ensemble.combine)": [[9, "merlion.models.ensemble.combine.Mean"]], "median (class in merlion.models.ensemble.combine)": [[9, "merlion.models.ensemble.combine.Median"]], "metricweightedmean (class in merlion.models.ensemble.combine)": [[9, "merlion.models.ensemble.combine.MetricWeightedMean"]], "modelselector (class in merlion.models.ensemble.combine)": [[9, "merlion.models.ensemble.combine.ModelSelector"]], "__call__() (merlion.models.ensemble.combine.combinerbase method)": [[9, "merlion.models.ensemble.combine.CombinerBase.__call__"]], "combiner (merlion.models.ensemble.base.ensemblebase property)": [[9, "merlion.models.ensemble.base.EnsembleBase.combiner"]], "config_class (merlion.models.ensemble.anomaly.detectorensemble attribute)": [[9, "merlion.models.ensemble.anomaly.DetectorEnsemble.config_class"]], "config_class (merlion.models.ensemble.base.ensemblebase attribute)": [[9, "merlion.models.ensemble.base.EnsembleBase.config_class"]], "config_class (merlion.models.ensemble.forecast.forecasterensemble attribute)": [[9, "merlion.models.ensemble.forecast.ForecasterEnsemble.config_class"]], "create() (merlion.models.ensemble.combine.combinerfactory class method)": [[9, "merlion.models.ensemble.combine.CombinerFactory.create"]], "from_dict() (merlion.models.ensemble.combine.combinerbase class method)": [[9, "merlion.models.ensemble.combine.CombinerBase.from_dict"]], "from_dict() (merlion.models.ensemble.combine.modelselector class method)": [[9, "merlion.models.ensemble.combine.ModelSelector.from_dict"]], "get_max_common_horizon() (merlion.models.ensemble.base.ensemblebase method)": [[9, "merlion.models.ensemble.base.EnsembleBase.get_max_common_horizon"]], "get_model_used() (merlion.models.ensemble.combine.combinerbase method)": [[9, "merlion.models.ensemble.combine.CombinerBase.get_model_used"]], "invert (merlion.models.ensemble.combine.modelselector property)": [[9, "merlion.models.ensemble.combine.ModelSelector.invert"]], "merlion.models.ensemble": [[9, "module-merlion.models.ensemble"]], "merlion.models.ensemble.anomaly": [[9, "module-merlion.models.ensemble.anomaly"]], "merlion.models.ensemble.base": [[9, "module-merlion.models.ensemble.base"]], "merlion.models.ensemble.combine": [[9, "module-merlion.models.ensemble.combine"]], "merlion.models.ensemble.forecast": [[9, "module-merlion.models.ensemble.forecast"]], "models (merlion.models.ensemble.base.ensemblebase property)": [[9, "merlion.models.ensemble.base.EnsembleBase.models"]], "models (merlion.models.ensemble.base.ensembleconfig attribute)": [[9, "merlion.models.ensemble.base.EnsembleConfig.models"]], "models_used (merlion.models.ensemble.base.ensemblebase property)": [[9, "merlion.models.ensemble.base.EnsembleBase.models_used"]], "models_used (merlion.models.ensemble.combine.combinerbase property)": [[9, "merlion.models.ensemble.combine.CombinerBase.models_used"]], "per_model_threshold (merlion.models.ensemble.anomaly.detectorensemble property)": [[9, "merlion.models.ensemble.anomaly.DetectorEnsemble.per_model_threshold"]], "per_model_threshold (merlion.models.ensemble.anomaly.detectorensembleconfig property)": [[9, "merlion.models.ensemble.anomaly.DetectorEnsembleConfig.per_model_threshold"]], "require_even_sampling (merlion.models.ensemble.anomaly.detectorensemble property)": [[9, "merlion.models.ensemble.anomaly.DetectorEnsemble.require_even_sampling"]], "require_even_sampling (merlion.models.ensemble.forecast.forecasterensemble property)": [[9, "merlion.models.ensemble.forecast.ForecasterEnsemble.require_even_sampling"]], "require_univariate (merlion.models.ensemble.anomaly.detectorensemble property)": [[9, "merlion.models.ensemble.anomaly.DetectorEnsemble.require_univariate"]], "requires_training (merlion.models.ensemble.combine.combinerbase property)": [[9, "merlion.models.ensemble.combine.CombinerBase.requires_training"]], "requires_training (merlion.models.ensemble.combine.modelselector property)": [[9, "merlion.models.ensemble.combine.ModelSelector.requires_training"]], "resample_time_stamps() (merlion.models.ensemble.forecast.forecasterensemble method)": [[9, "merlion.models.ensemble.forecast.ForecasterEnsemble.resample_time_stamps"]], "reset() (merlion.models.ensemble.base.ensemblebase method)": [[9, "merlion.models.ensemble.base.EnsembleBase.reset"]], "reset() (merlion.models.ensemble.combine.combinerbase method)": [[9, "merlion.models.ensemble.combine.CombinerBase.reset"]], "save() (merlion.models.ensemble.base.ensemblebase method)": [[9, "merlion.models.ensemble.base.EnsembleBase.save"]], "set_model_used() (merlion.models.ensemble.combine.combinerbase method)": [[9, "merlion.models.ensemble.combine.CombinerBase.set_model_used"]], "target_seq_index (merlion.models.ensemble.forecast.forecasterensembleconfig property)": [[9, "merlion.models.ensemble.forecast.ForecasterEnsembleConfig.target_seq_index"]], "to_bytes() (merlion.models.ensemble.base.ensemblebase method)": [[9, "merlion.models.ensemble.base.EnsembleBase.to_bytes"]], "to_dict() (merlion.models.ensemble.base.ensembleconfig method)": [[9, "merlion.models.ensemble.base.EnsembleConfig.to_dict"]], "to_dict() (merlion.models.ensemble.combine.combinerbase method)": [[9, "merlion.models.ensemble.combine.CombinerBase.to_dict"]], "to_dict() (merlion.models.ensemble.combine.modelselector method)": [[9, "merlion.models.ensemble.combine.ModelSelector.to_dict"]], "train() (merlion.models.ensemble.combine.combinerbase method)": [[9, "merlion.models.ensemble.combine.CombinerBase.train"]], "train() (merlion.models.ensemble.combine.modelselector method)": [[9, "merlion.models.ensemble.combine.ModelSelector.train"]], "train_combiner() (merlion.models.ensemble.base.ensemblebase method)": [[9, "merlion.models.ensemble.base.EnsembleBase.train_combiner"]], "train_combiner() (merlion.models.ensemble.forecast.forecasterensemble method)": [[9, "merlion.models.ensemble.forecast.ForecasterEnsemble.train_combiner"]], "train_pre_process() (merlion.models.ensemble.forecast.forecasterensemble method)": [[9, "merlion.models.ensemble.forecast.ForecasterEnsemble.train_pre_process"]], "train_valid_split() (merlion.models.ensemble.base.ensemblebase method)": [[9, "merlion.models.ensemble.base.EnsembleBase.train_valid_split"]], "weights (merlion.models.ensemble.combine.mean property)": [[9, "merlion.models.ensemble.combine.Mean.weights"]], "weights (merlion.models.ensemble.combine.metricweightedmean property)": [[9, "merlion.models.ensemble.combine.MetricWeightedMean.weights"]], "arima (class in merlion.models.forecast.arima)": [[10, "merlion.models.forecast.arima.Arima"]], "arimaconfig (class in merlion.models.forecast.arima)": [[10, "merlion.models.forecast.arima.ArimaConfig"]], "deltaestimator (class in merlion.models.forecast.smoother)": [[10, "merlion.models.forecast.smoother.DeltaEstimator"]], "deltastats (class in merlion.models.forecast.smoother)": [[10, "merlion.models.forecast.smoother.DeltaStats"]], "ets (class in merlion.models.forecast.ets)": [[10, "merlion.models.forecast.ets.ETS"]], "etsconfig (class in merlion.models.forecast.ets)": [[10, "merlion.models.forecast.ets.ETSConfig"]], "extratreesforecaster (class in merlion.models.forecast.trees)": [[10, "merlion.models.forecast.trees.ExtraTreesForecaster"]], "extratreesforecasterconfig (class in merlion.models.forecast.trees)": [[10, "merlion.models.forecast.trees.ExtraTreesForecasterConfig"]], "forecasterbase (class in merlion.models.forecast.base)": [[10, "merlion.models.forecast.base.ForecasterBase"]], "forecasterconfig (class in merlion.models.forecast.base)": [[10, "merlion.models.forecast.base.ForecasterConfig"]], "forecasterexogbase (class in merlion.models.forecast.base)": [[10, "merlion.models.forecast.base.ForecasterExogBase"]], "forecasterexogconfig (class in merlion.models.forecast.base)": [[10, "merlion.models.forecast.base.ForecasterExogConfig"]], "lgbmforecaster (class in merlion.models.forecast.trees)": [[10, "merlion.models.forecast.trees.LGBMForecaster"]], "lgbmforecasterconfig (class in merlion.models.forecast.trees)": [[10, "merlion.models.forecast.trees.LGBMForecasterConfig"]], "lstm (class in merlion.models.forecast.lstm)": [[10, "merlion.models.forecast.lstm.LSTM"]], "lstmconfig (class in merlion.models.forecast.lstm)": [[10, "merlion.models.forecast.lstm.LSTMConfig"]], "lstmtrainconfig (class in merlion.models.forecast.lstm)": [[10, "merlion.models.forecast.lstm.LSTMTrainConfig"]], "mses (class in merlion.models.forecast.smoother)": [[10, "merlion.models.forecast.smoother.MSES"]], "msesconfig (class in merlion.models.forecast.smoother)": [[10, "merlion.models.forecast.smoother.MSESConfig"]], "msestrainconfig (class in merlion.models.forecast.smoother)": [[10, "merlion.models.forecast.smoother.MSESTrainConfig"]], "prophet (class in merlion.models.forecast.prophet)": [[10, "merlion.models.forecast.prophet.Prophet"]], "prophetconfig (class in merlion.models.forecast.prophet)": [[10, "merlion.models.forecast.prophet.ProphetConfig"]], "randomforestforecaster (class in merlion.models.forecast.trees)": [[10, "merlion.models.forecast.trees.RandomForestForecaster"]], "randomforestforecasterconfig (class in merlion.models.forecast.trees)": [[10, "merlion.models.forecast.trees.RandomForestForecasterConfig"]], "sklearnforecaster (class in merlion.models.forecast.sklearn_base)": [[10, "merlion.models.forecast.sklearn_base.SKLearnForecaster"]], "sklearnforecasterconfig (class in merlion.models.forecast.sklearn_base)": [[10, "merlion.models.forecast.sklearn_base.SKLearnForecasterConfig"]], "sarima (class in merlion.models.forecast.sarima)": [[10, "merlion.models.forecast.sarima.Sarima"]], "sarimaconfig (class in merlion.models.forecast.sarima)": [[10, "merlion.models.forecast.sarima.SarimaConfig"]], "vectorar (class in merlion.models.forecast.vector_ar)": [[10, "merlion.models.forecast.vector_ar.VectorAR"]], "vectorarconfig (class in merlion.models.forecast.vector_ar)": [[10, "merlion.models.forecast.vector_ar.VectorARConfig"]], "acc_max_scale (merlion.models.forecast.smoother.deltaestimator property)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.acc_max_scale"]], "acceleration() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.acceleration"]], "add_seasonality (merlion.models.forecast.prophet.prophet property)": [[10, "merlion.models.forecast.prophet.Prophet.add_seasonality"]], "backsteps (merlion.models.forecast.smoother.mses property)": [[10, "merlion.models.forecast.smoother.MSES.backsteps"]], "backsteps (merlion.models.forecast.smoother.msesconfig property)": [[10, "merlion.models.forecast.smoother.MSESConfig.backsteps"]], "batch_forecast() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.batch_forecast"]], "config_class (merlion.models.forecast.arima.arima attribute)": [[10, "merlion.models.forecast.arima.Arima.config_class"]], "config_class (merlion.models.forecast.base.forecasterbase attribute)": [[10, "merlion.models.forecast.base.ForecasterBase.config_class"]], "config_class (merlion.models.forecast.ets.ets attribute)": [[10, "merlion.models.forecast.ets.ETS.config_class"]], "config_class (merlion.models.forecast.lstm.lstm attribute)": [[10, "merlion.models.forecast.lstm.LSTM.config_class"]], "config_class (merlion.models.forecast.prophet.prophet attribute)": [[10, "merlion.models.forecast.prophet.Prophet.config_class"]], "config_class (merlion.models.forecast.sarima.sarima attribute)": [[10, "merlion.models.forecast.sarima.Sarima.config_class"]], "config_class (merlion.models.forecast.sklearn_base.sklearnforecaster attribute)": [[10, "merlion.models.forecast.sklearn_base.SKLearnForecaster.config_class"]], "config_class (merlion.models.forecast.smoother.mses attribute)": [[10, "merlion.models.forecast.smoother.MSES.config_class"]], "config_class (merlion.models.forecast.trees.extratreesforecaster attribute)": [[10, "merlion.models.forecast.trees.ExtraTreesForecaster.config_class"]], "config_class (merlion.models.forecast.trees.lgbmforecaster attribute)": [[10, "merlion.models.forecast.trees.LGBMForecaster.config_class"]], "config_class (merlion.models.forecast.trees.randomforestforecaster attribute)": [[10, "merlion.models.forecast.trees.RandomForestForecaster.config_class"]], "config_class (merlion.models.forecast.vector_ar.vectorar attribute)": [[10, "merlion.models.forecast.vector_ar.VectorAR.config_class"]], "daily_seasonality (merlion.models.forecast.prophet.prophet property)": [[10, "merlion.models.forecast.prophet.Prophet.daily_seasonality"]], "damped_trend (merlion.models.forecast.ets.ets property)": [[10, "merlion.models.forecast.ets.ETS.damped_trend"]], "data (merlion.models.forecast.smoother.deltaestimator property)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.data"]], "delta_hat() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.delta_hat"]], "error (merlion.models.forecast.ets.ets property)": [[10, "merlion.models.forecast.ets.ETS.error"]], "exog_aggregation_policy (merlion.models.forecast.base.forecasterexogbase property)": [[10, "merlion.models.forecast.base.ForecasterExogBase.exog_aggregation_policy"]], "exog_aggregation_policy (merlion.models.forecast.base.forecasterexogconfig property)": [[10, "merlion.models.forecast.base.ForecasterExogConfig.exog_aggregation_policy"]], "exog_missing_value_policy (merlion.models.forecast.base.forecasterexogbase property)": [[10, "merlion.models.forecast.base.ForecasterExogBase.exog_missing_value_policy"]], "exog_missing_value_policy (merlion.models.forecast.base.forecasterexogconfig property)": [[10, "merlion.models.forecast.base.ForecasterExogConfig.exog_missing_value_policy"]], "exog_transform (merlion.models.forecast.base.forecasterexogbase property)": [[10, "merlion.models.forecast.base.ForecasterExogBase.exog_transform"]], "exog_transform (merlion.models.forecast.base.forecasterexogconfig attribute)": [[10, "merlion.models.forecast.base.ForecasterExogConfig.exog_transform"]], "forecast() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.forecast"]], "get_figure() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.get_figure"]], "holidays (merlion.models.forecast.prophet.prophet property)": [[10, "merlion.models.forecast.prophet.Prophet.holidays"]], "invert_transform (merlion.models.forecast.base.forecasterbase property)": [[10, "merlion.models.forecast.base.ForecasterBase.invert_transform"]], "invert_transform (merlion.models.forecast.base.forecasterconfig attribute)": [[10, "merlion.models.forecast.base.ForecasterConfig.invert_transform"]], "lag (merlion.models.forecast.smoother.deltastats property)": [[10, "merlion.models.forecast.smoother.DeltaStats.lag"]], "loss_err() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.loss_err"]], "marginalize_xhat_h() (merlion.models.forecast.smoother.mses method)": [[10, "merlion.models.forecast.smoother.MSES.marginalize_xhat_h"]], "max_forecast_steps (merlion.models.forecast.base.forecasterbase property)": [[10, "merlion.models.forecast.base.ForecasterBase.max_forecast_steps"]], "max_forecast_steps (merlion.models.forecast.base.forecasterconfig attribute)": [[10, "merlion.models.forecast.base.ForecasterConfig.max_forecast_steps"]], "max_horizon (merlion.models.forecast.smoother.mses property)": [[10, "merlion.models.forecast.smoother.MSES.max_horizon"]], "max_scale (merlion.models.forecast.smoother.deltaestimator property)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.max_scale"]], "max_scale (merlion.models.forecast.smoother.msesconfig property)": [[10, "merlion.models.forecast.smoother.MSESConfig.max_scale"]], "maxlags (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[10, "merlion.models.forecast.sklearn_base.SKLearnForecaster.maxlags"]], "maxlags (merlion.models.forecast.vector_ar.vectorar property)": [[10, "merlion.models.forecast.vector_ar.VectorAR.maxlags"]], "merlion.models.forecast": [[10, "module-merlion.models.forecast"]], "merlion.models.forecast.arima": [[10, "module-merlion.models.forecast.arima"]], "merlion.models.forecast.base": [[10, "module-merlion.models.forecast.base"]], "merlion.models.forecast.ets": [[10, "module-merlion.models.forecast.ets"]], "merlion.models.forecast.lstm": [[10, "module-merlion.models.forecast.lstm"]], "merlion.models.forecast.prophet": [[10, "module-merlion.models.forecast.prophet"]], "merlion.models.forecast.sarima": [[10, "module-merlion.models.forecast.sarima"]], "merlion.models.forecast.sklearn_base": [[10, "module-merlion.models.forecast.sklearn_base"]], "merlion.models.forecast.smoother": [[10, "module-merlion.models.forecast.smoother"]], "merlion.models.forecast.trees": [[10, "module-merlion.models.forecast.trees"]], "merlion.models.forecast.vector_ar": [[10, "module-merlion.models.forecast.vector_ar"]], "model (merlion.models.forecast.sklearn_base.sklearnforecaster attribute)": [[10, "merlion.models.forecast.sklearn_base.SKLearnForecaster.model"]], "neg_err() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.neg_err"]], "order (merlion.models.forecast.sarima.sarima property)": [[10, "merlion.models.forecast.sarima.Sarima.order"]], "plot_forecast() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.plot_forecast"]], "plot_forecast_plotly() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.plot_forecast_plotly"]], "pos_err() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.pos_err"]], "prediction_stride (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[10, "merlion.models.forecast.sklearn_base.SKLearnForecaster.prediction_stride"]], "process_losses() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.process_losses"]], "require_even_sampling (merlion.models.forecast.ets.ets property)": [[10, "merlion.models.forecast.ets.ETS.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.lstm.lstm property)": [[10, "merlion.models.forecast.lstm.LSTM.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.prophet.prophet property)": [[10, "merlion.models.forecast.prophet.Prophet.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.sarima.sarima property)": [[10, "merlion.models.forecast.sarima.Sarima.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[10, "merlion.models.forecast.sklearn_base.SKLearnForecaster.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.smoother.mses property)": [[10, "merlion.models.forecast.smoother.MSES.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.vector_ar.vectorar property)": [[10, "merlion.models.forecast.vector_ar.VectorAR.require_even_sampling"]], "require_univariate (merlion.models.forecast.base.forecasterbase property)": [[10, "merlion.models.forecast.base.ForecasterBase.require_univariate"]], "require_univariate (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[10, "merlion.models.forecast.sklearn_base.SKLearnForecaster.require_univariate"]], "resample_time_stamps() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.resample_time_stamps"]], "resample_time_stamps() (merlion.models.forecast.prophet.prophet method)": [[10, "merlion.models.forecast.prophet.Prophet.resample_time_stamps"]], "rho (merlion.models.forecast.smoother.mses property)": [[10, "merlion.models.forecast.smoother.MSES.rho"]], "seasonal (merlion.models.forecast.ets.ets property)": [[10, "merlion.models.forecast.ets.ETS.seasonal"]], "seasonal_order (merlion.models.forecast.arima.arimaconfig property)": [[10, "merlion.models.forecast.arima.ArimaConfig.seasonal_order"]], "seasonal_order (merlion.models.forecast.sarima.sarima property)": [[10, "merlion.models.forecast.sarima.Sarima.seasonal_order"]], "seasonal_periods (merlion.models.forecast.ets.ets property)": [[10, "merlion.models.forecast.ets.ETS.seasonal_periods"]], "seasonality_mode (merlion.models.forecast.prophet.prophet property)": [[10, "merlion.models.forecast.prophet.Prophet.seasonality_mode"]], "set_seasonality() (merlion.models.forecast.ets.ets method)": [[10, "merlion.models.forecast.ets.ETS.set_seasonality"]], "set_seasonality() (merlion.models.forecast.prophet.prophet method)": [[10, "merlion.models.forecast.prophet.Prophet.set_seasonality"]], "set_seasonality() (merlion.models.forecast.sarima.sarima method)": [[10, "merlion.models.forecast.sarima.Sarima.set_seasonality"]], "supports_exog (merlion.models.forecast.base.forecasterexogbase property)": [[10, "merlion.models.forecast.base.ForecasterExogBase.supports_exog"]], "target_name (merlion.models.forecast.base.forecasterbase attribute)": [[10, "merlion.models.forecast.base.ForecasterBase.target_name"]], "target_seq_index (merlion.models.forecast.base.forecasterbase property)": [[10, "merlion.models.forecast.base.ForecasterBase.target_seq_index"]], "target_seq_index (merlion.models.forecast.base.forecasterconfig attribute)": [[10, "merlion.models.forecast.base.ForecasterConfig.target_seq_index"]], "train() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.train"]], "train() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.train"]], "train_post_process() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.train_post_process"]], "train_pre_process() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.train_pre_process"]], "transform_exog_data() (merlion.models.forecast.base.forecasterbase method)": [[10, "merlion.models.forecast.base.ForecasterBase.transform_exog_data"]], "transform_exog_data() (merlion.models.forecast.base.forecasterexogbase method)": [[10, "merlion.models.forecast.base.ForecasterExogBase.transform_exog_data"]], "trend (merlion.models.forecast.ets.ets property)": [[10, "merlion.models.forecast.ets.ETS.trend"]], "tune() (merlion.models.forecast.smoother.deltastats method)": [[10, "merlion.models.forecast.smoother.DeltaStats.tune"]], "uncertainty_samples (merlion.models.forecast.prophet.prophet property)": [[10, "merlion.models.forecast.prophet.Prophet.uncertainty_samples"]], "update() (merlion.models.forecast.smoother.mses method)": [[10, "merlion.models.forecast.smoother.MSES.update"]], "update_acceleration() (merlion.models.forecast.smoother.deltastats method)": [[10, "merlion.models.forecast.smoother.DeltaStats.update_acceleration"]], "update_loss() (merlion.models.forecast.smoother.deltastats method)": [[10, "merlion.models.forecast.smoother.DeltaStats.update_loss"]], "update_velocity() (merlion.models.forecast.smoother.deltastats method)": [[10, "merlion.models.forecast.smoother.DeltaStats.update_velocity"]], "vel_err() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.vel_err"]], "velocity() (merlion.models.forecast.smoother.deltaestimator method)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.velocity"]], "weekly_seasonality (merlion.models.forecast.prophet.prophet property)": [[10, "merlion.models.forecast.prophet.Prophet.weekly_seasonality"]], "x (merlion.models.forecast.smoother.deltaestimator property)": [[10, "merlion.models.forecast.smoother.DeltaEstimator.x"]], "xhat_h() (merlion.models.forecast.smoother.mses method)": [[10, "merlion.models.forecast.smoother.MSES.xhat_h"]], "yearly_seasonality (merlion.models.forecast.prophet.prophet property)": [[10, "merlion.models.forecast.prophet.Prophet.yearly_seasonality"]], "kpss_stationaritytest() (in module merlion.models.utils.autosarima_utils)": [[11, "merlion.models.utils.autosarima_utils.KPSS_stationaritytest"]], "rollingwindowdataset (class in merlion.models.utils.rolling_window_dataset)": [[11, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset"]], "autoregressive (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[11, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.autoregressive"]], "collate_batch() (merlion.models.utils.rolling_window_dataset.rollingwindowdataset method)": [[11, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.collate_batch"]], "detect_maxiter_sarima_model() (in module merlion.models.utils.autosarima_utils)": [[11, "merlion.models.utils.autosarima_utils.detect_maxiter_sarima_model"]], "diff() (in module merlion.models.utils.autosarima_utils)": [[11, "merlion.models.utils.autosarima_utils.diff"]], "merlion.models.utils": [[11, "module-merlion.models.utils"]], "merlion.models.utils.autosarima_utils": [[11, "module-merlion.models.utils.autosarima_utils"]], "merlion.models.utils.rolling_window_dataset": [[11, "module-merlion.models.utils.rolling_window_dataset"]], "n_points (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[11, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.n_points"]], "ndiffs() (in module merlion.models.utils.autosarima_utils)": [[11, "merlion.models.utils.autosarima_utils.ndiffs"]], "nsdiffs() (in module merlion.models.utils.autosarima_utils)": [[11, "merlion.models.utils.autosarima_utils.nsdiffs"]], "seas_seasonalstationaritytest() (in module merlion.models.utils.autosarima_utils)": [[11, "merlion.models.utils.autosarima_utils.seas_seasonalstationaritytest"]], "adaptiveaggregatealarms (class in merlion.post_process.threshold)": [[12, "merlion.post_process.threshold.AdaptiveAggregateAlarms"]], "adaptivethreshold (class in merlion.post_process.threshold)": [[12, "merlion.post_process.threshold.AdaptiveThreshold"]], "aggregatealarms (class in merlion.post_process.threshold)": [[12, "merlion.post_process.threshold.AggregateAlarms"]], "anomscorecalibrator (class in merlion.post_process.calibrate)": [[12, "merlion.post_process.calibrate.AnomScoreCalibrator"]], "f1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.F1"]], "f2 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.F2"]], "f5 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.F5"]], "meantimetodetect (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.MeanTimeToDetect"]], "nabscore (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.NABScore"]], "nabscorelowfn (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.NABScoreLowFN"]], "nabscorelowfp (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.NABScoreLowFP"]], "pointadjustedf1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedF1"]], "pointadjustedprecision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedPrecision"]], "pointadjustedrecall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedRecall"]], "pointwisef1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.PointwiseF1"]], "pointwiseprecision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.PointwisePrecision"]], "pointwiserecall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.PointwiseRecall"]], "postrulebase (class in merlion.post_process.base)": [[12, "merlion.post_process.base.PostRuleBase"]], "postrulefactory (class in merlion.post_process.factory)": [[12, "merlion.post_process.factory.PostRuleFactory"]], "postrulesequence (class in merlion.post_process.sequence)": [[12, "merlion.post_process.sequence.PostRuleSequence"]], "precision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.Precision"]], "recall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric.Recall"]], "threshold (class in merlion.post_process.threshold)": [[12, "merlion.post_process.threshold.Threshold"]], "threshold.tsadmetric (class in merlion.post_process.threshold)": [[12, "merlion.post_process.threshold.Threshold.TSADMetric"]], "abs_score (merlion.post_process.threshold.aggregatealarms property)": [[12, "merlion.post_process.threshold.AggregateAlarms.abs_score"]], "alm_threshold (merlion.post_process.threshold.aggregatealarms property)": [[12, "merlion.post_process.threshold.AggregateAlarms.alm_threshold"]], "anchors (merlion.post_process.calibrate.anomscorecalibrator property)": [[12, "merlion.post_process.calibrate.AnomScoreCalibrator.anchors"]], "bin_sz (merlion.post_process.threshold.adaptiveaggregatealarms property)": [[12, "merlion.post_process.threshold.AdaptiveAggregateAlarms.bin_sz"]], "create() (merlion.post_process.factory.postrulefactory class method)": [[12, "merlion.post_process.factory.PostRuleFactory.create"]], "default_hist_gap_thres (merlion.post_process.threshold.adaptiveaggregatealarms property)": [[12, "merlion.post_process.threshold.AdaptiveAggregateAlarms.default_hist_gap_thres"]], "filter() (merlion.post_process.threshold.aggregatealarms method)": [[12, "merlion.post_process.threshold.AggregateAlarms.filter"]], "from_dict() (merlion.post_process.base.postrulebase class method)": [[12, "merlion.post_process.base.PostRuleBase.from_dict"]], "from_dict() (merlion.post_process.sequence.postrulesequence class method)": [[12, "merlion.post_process.sequence.PostRuleSequence.from_dict"]], "get_adaptive_thres() (in module merlion.post_process.threshold)": [[12, "merlion.post_process.threshold.get_adaptive_thres"]], "get_post_rule_class() (merlion.post_process.factory.postrulefactory class method)": [[12, "merlion.post_process.factory.PostRuleFactory.get_post_rule_class"]], "merlion.post_process": [[12, "module-merlion.post_process"]], "merlion.post_process.base": [[12, "module-merlion.post_process.base"]], "merlion.post_process.calibrate": [[12, "module-merlion.post_process.calibrate"]], "merlion.post_process.factory": [[12, "module-merlion.post_process.factory"]], "merlion.post_process.sequence": [[12, "module-merlion.post_process.sequence"]], "merlion.post_process.threshold": [[12, "module-merlion.post_process.threshold"]], "suppress_secs (merlion.post_process.threshold.aggregatealarms property)": [[12, "merlion.post_process.threshold.AggregateAlarms.suppress_secs"]], "threshold_class (merlion.post_process.threshold.adaptiveaggregatealarms attribute)": [[12, "merlion.post_process.threshold.AdaptiveAggregateAlarms.threshold_class"]], "threshold_class (merlion.post_process.threshold.aggregatealarms attribute)": [[12, "merlion.post_process.threshold.AggregateAlarms.threshold_class"]], "to_dict() (merlion.post_process.base.postrulebase method)": [[12, "merlion.post_process.base.PostRuleBase.to_dict"]], "to_dict() (merlion.post_process.sequence.postrulesequence method)": [[12, "merlion.post_process.sequence.PostRuleSequence.to_dict"]], "to_simple_threshold() (merlion.post_process.threshold.aggregatealarms method)": [[12, "merlion.post_process.threshold.AggregateAlarms.to_simple_threshold"]], "to_simple_threshold() (merlion.post_process.threshold.threshold method)": [[12, "merlion.post_process.threshold.Threshold.to_simple_threshold"]], "train() (merlion.post_process.base.postrulebase method)": [[12, "merlion.post_process.base.PostRuleBase.train"]], "train() (merlion.post_process.calibrate.anomscorecalibrator method)": [[12, "merlion.post_process.calibrate.AnomScoreCalibrator.train"]], "train() (merlion.post_process.sequence.postrulesequence method)": [[12, "merlion.post_process.sequence.PostRuleSequence.train"]], "train() (merlion.post_process.threshold.adaptivethreshold method)": [[12, "merlion.post_process.threshold.AdaptiveThreshold.train"]], "train() (merlion.post_process.threshold.aggregatealarms method)": [[12, "merlion.post_process.threshold.AggregateAlarms.train"]], "train() (merlion.post_process.threshold.threshold method)": [[12, "merlion.post_process.threshold.Threshold.train"]], "window_secs (merlion.post_process.threshold.aggregatealarms property)": [[12, "merlion.post_process.threshold.AggregateAlarms.window_secs"]], "tsid_col_name (in module merlion.spark.dataset)": [[13, "merlion.spark.dataset.TSID_COL_NAME"]], "add_tsid_column() (in module merlion.spark.dataset)": [[13, "merlion.spark.dataset.add_tsid_column"]], "anomaly() (in module merlion.spark.pandas_udf)": [[13, "merlion.spark.pandas_udf.anomaly"]], "create_hier_dataset() (in module merlion.spark.dataset)": [[13, "merlion.spark.dataset.create_hier_dataset"]], "forecast() (in module merlion.spark.pandas_udf)": [[13, "merlion.spark.pandas_udf.forecast"]], "merlion.spark": [[13, "module-merlion.spark"]], "merlion.spark.dataset": [[13, "module-merlion.spark.dataset"]], "merlion.spark.pandas_udf": [[13, "module-merlion.spark.pandas_udf"]], "read_dataset() (in module merlion.spark.dataset)": [[13, "merlion.spark.dataset.read_dataset"]], "reconciliation() (in module merlion.spark.pandas_udf)": [[13, "merlion.spark.pandas_udf.reconciliation"]], "write_dataset() (in module merlion.spark.dataset)": [[13, "merlion.spark.dataset.write_dataset"]], "absval (class in merlion.transform.normalize)": [[14, "merlion.transform.normalize.AbsVal"]], "anomalize (class in merlion.transform.anomalize)": [[14, "merlion.transform.anomalize.Anomalize"]], "boxcoxtransform (class in merlion.transform.normalize)": [[14, "merlion.transform.normalize.BoxCoxTransform"]], "differencetransform (class in merlion.transform.moving_average)": [[14, "merlion.transform.moving_average.DifferenceTransform"]], "exponentialmovingaverage (class in merlion.transform.moving_average)": [[14, "merlion.transform.moving_average.ExponentialMovingAverage"]], "identity (class in merlion.transform.base)": [[14, "merlion.transform.base.Identity"]], "invertibletransformbase (class in merlion.transform.base)": [[14, "merlion.transform.base.InvertibleTransformBase"]], "lagtransform (class in merlion.transform.moving_average)": [[14, "merlion.transform.moving_average.LagTransform"]], "levelshift (class in merlion.transform.anomalize)": [[14, "merlion.transform.anomalize.LevelShift"]], "lowerupperclip (class in merlion.transform.bound)": [[14, "merlion.transform.bound.LowerUpperClip"]], "meanvarnormalize (class in merlion.transform.normalize)": [[14, "merlion.transform.normalize.MeanVarNormalize"]], "minmaxnormalize (class in merlion.transform.normalize)": [[14, "merlion.transform.normalize.MinMaxNormalize"]], "movingaverage (class in merlion.transform.moving_average)": [[14, "merlion.transform.moving_average.MovingAverage"]], "movingpercentile (class in merlion.transform.moving_average)": [[14, "merlion.transform.moving_average.MovingPercentile"]], "rescale (class in merlion.transform.normalize)": [[14, "merlion.transform.normalize.Rescale"]], "shingle (class in merlion.transform.resample)": [[14, "merlion.transform.resample.Shingle"]], "shock (class in merlion.transform.anomalize)": [[14, "merlion.transform.anomalize.Shock"]], "temporalresample (class in merlion.transform.resample)": [[14, "merlion.transform.resample.TemporalResample"]], "transformbase (class in merlion.transform.base)": [[14, "merlion.transform.base.TransformBase"]], "transformfactory (class in merlion.transform.factory)": [[14, "merlion.transform.factory.TransformFactory"]], "transformsequence (class in merlion.transform.sequence)": [[14, "merlion.transform.sequence.TransformSequence"]], "transformstack (class in merlion.transform.sequence)": [[14, "merlion.transform.sequence.TransformStack"]], "trendchange (class in merlion.transform.anomalize)": [[14, "merlion.transform.anomalize.TrendChange"]], "_invert() (merlion.transform.base.invertibletransformbase method)": [[14, "merlion.transform.base.InvertibleTransformBase._invert"]], "_invert() (merlion.transform.base.transformbase method)": [[14, "merlion.transform.base.TransformBase._invert"]], "aggregation_policy (merlion.transform.resample.temporalresample property)": [[14, "merlion.transform.resample.TemporalResample.aggregation_policy"]], "anom_width_range (merlion.transform.anomalize.shock property)": [[14, "merlion.transform.anomalize.Shock.anom_width_range"]], "append() (merlion.transform.sequence.transformsequence method)": [[14, "merlion.transform.sequence.TransformSequence.append"]], "compute_lag() (merlion.transform.moving_average.lagtransform method)": [[14, "merlion.transform.moving_average.LagTransform.compute_lag"]], "create() (merlion.transform.factory.transformfactory class method)": [[14, "merlion.transform.factory.TransformFactory.create"]], "from_dict() (merlion.transform.base.transformbase class method)": [[14, "merlion.transform.base.TransformBase.from_dict"]], "from_dict() (merlion.transform.sequence.transformsequence class method)": [[14, "merlion.transform.sequence.TransformSequence.from_dict"]], "get_transform_class() (merlion.transform.factory.transformfactory class method)": [[14, "merlion.transform.factory.TransformFactory.get_transform_class"]], "granularity (merlion.transform.resample.temporalresample property)": [[14, "merlion.transform.resample.TemporalResample.granularity"]], "identity_inversion (merlion.transform.base.identity property)": [[14, "merlion.transform.base.Identity.identity_inversion"]], "identity_inversion (merlion.transform.base.invertibletransformbase property)": [[14, "merlion.transform.base.InvertibleTransformBase.identity_inversion"]], "identity_inversion (merlion.transform.base.transformbase property)": [[14, "merlion.transform.base.TransformBase.identity_inversion"]], "identity_inversion (merlion.transform.normalize.absval property)": [[14, "merlion.transform.normalize.AbsVal.identity_inversion"]], "identity_inversion (merlion.transform.sequence.transformsequence property)": [[14, "merlion.transform.sequence.TransformSequence.identity_inversion"]], "invert() (merlion.transform.base.transformbase method)": [[14, "merlion.transform.base.TransformBase.invert"]], "invert() (merlion.transform.sequence.transformsequence method)": [[14, "merlion.transform.sequence.TransformSequence.invert"]], "invert() (merlion.transform.sequence.transformstack method)": [[14, "merlion.transform.sequence.TransformStack.invert"]], "is_trained (merlion.transform.anomalize.anomalize property)": [[14, "merlion.transform.anomalize.Anomalize.is_trained"]], "is_trained (merlion.transform.normalize.rescale property)": [[14, "merlion.transform.normalize.Rescale.is_trained"]], "merlion.transform": [[14, "module-merlion.transform"]], "merlion.transform.anomalize": [[14, "module-merlion.transform.anomalize"]], "merlion.transform.base": [[14, "module-merlion.transform.base"]], "merlion.transform.bound": [[14, "module-merlion.transform.bound"]], "merlion.transform.factory": [[14, "module-merlion.transform.factory"]], "merlion.transform.moving_average": [[14, "module-merlion.transform.moving_average"]], "merlion.transform.normalize": [[14, "module-merlion.transform.normalize"]], "merlion.transform.resample": [[14, "module-merlion.transform.resample"]], "merlion.transform.sequence": [[14, "module-merlion.transform.sequence"]], "missing_value_policy (merlion.transform.resample.temporalresample property)": [[14, "merlion.transform.resample.TemporalResample.missing_value_policy"]], "natural_bounds (merlion.transform.anomalize.anomalize property)": [[14, "merlion.transform.anomalize.Anomalize.natural_bounds"]], "proper_inversion (merlion.transform.base.invertibletransformbase property)": [[14, "merlion.transform.base.InvertibleTransformBase.proper_inversion"]], "proper_inversion (merlion.transform.base.transformbase property)": [[14, "merlion.transform.base.TransformBase.proper_inversion"]], "proper_inversion (merlion.transform.resample.temporalresample property)": [[14, "merlion.transform.resample.TemporalResample.proper_inversion"]], "proper_inversion (merlion.transform.sequence.transformsequence property)": [[14, "merlion.transform.sequence.TransformSequence.proper_inversion"]], "proper_inversion (merlion.transform.sequence.transformstack property)": [[14, "merlion.transform.sequence.TransformStack.proper_inversion"]], "random_anom_width() (merlion.transform.anomalize.shock method)": [[14, "merlion.transform.anomalize.Shock.random_anom_width"]], "random_is_anom() (merlion.transform.anomalize.anomalize method)": [[14, "merlion.transform.anomalize.Anomalize.random_is_anom"]], "random_is_anom() (merlion.transform.anomalize.shock method)": [[14, "merlion.transform.anomalize.Shock.random_is_anom"]], "random_scale() (merlion.transform.anomalize.trendchange method)": [[14, "merlion.transform.anomalize.TrendChange.random_scale"]], "random_sd_units() (merlion.transform.anomalize.shock method)": [[14, "merlion.transform.anomalize.Shock.random_sd_units"]], "requires_inversion_state (merlion.transform.base.identity property)": [[14, "merlion.transform.base.Identity.requires_inversion_state"]], "requires_inversion_state (merlion.transform.base.transformbase property)": [[14, "merlion.transform.base.TransformBase.requires_inversion_state"]], "requires_inversion_state (merlion.transform.bound.lowerupperclip property)": [[14, "merlion.transform.bound.LowerUpperClip.requires_inversion_state"]], "requires_inversion_state (merlion.transform.moving_average.exponentialmovingaverage property)": [[14, "merlion.transform.moving_average.ExponentialMovingAverage.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.absval property)": [[14, "merlion.transform.normalize.AbsVal.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.boxcoxtransform property)": [[14, "merlion.transform.normalize.BoxCoxTransform.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.rescale property)": [[14, "merlion.transform.normalize.Rescale.requires_inversion_state"]], "requires_inversion_state (merlion.transform.resample.temporalresample property)": [[14, "merlion.transform.resample.TemporalResample.requires_inversion_state"]], "requires_inversion_state (merlion.transform.sequence.transformsequence property)": [[14, "merlion.transform.sequence.TransformSequence.requires_inversion_state"]], "requires_inversion_state (merlion.transform.sequence.transformstack property)": [[14, "merlion.transform.sequence.TransformStack.requires_inversion_state"]], "scale_range (merlion.transform.anomalize.trendchange property)": [[14, "merlion.transform.anomalize.TrendChange.scale_range"]], "sd_range (merlion.transform.anomalize.shock property)": [[14, "merlion.transform.anomalize.Shock.sd_range"]], "to_dict() (merlion.transform.base.transformbase method)": [[14, "merlion.transform.base.TransformBase.to_dict"]], "to_dict() (merlion.transform.sequence.transformsequence method)": [[14, "merlion.transform.sequence.TransformSequence.to_dict"]], "train() (merlion.transform.anomalize.shock method)": [[14, "merlion.transform.anomalize.Shock.train"]], "train() (merlion.transform.anomalize.trendchange method)": [[14, "merlion.transform.anomalize.TrendChange.train"]], "train() (merlion.transform.base.identity method)": [[14, "merlion.transform.base.Identity.train"]], "train() (merlion.transform.base.transformbase method)": [[14, "merlion.transform.base.TransformBase.train"]], "train() (merlion.transform.bound.lowerupperclip method)": [[14, "merlion.transform.bound.LowerUpperClip.train"]], "train() (merlion.transform.moving_average.differencetransform method)": [[14, "merlion.transform.moving_average.DifferenceTransform.train"]], "train() (merlion.transform.moving_average.exponentialmovingaverage method)": [[14, "merlion.transform.moving_average.ExponentialMovingAverage.train"]], "train() (merlion.transform.moving_average.lagtransform method)": [[14, "merlion.transform.moving_average.LagTransform.train"]], "train() (merlion.transform.moving_average.movingaverage method)": [[14, "merlion.transform.moving_average.MovingAverage.train"]], "train() (merlion.transform.moving_average.movingpercentile method)": [[14, "merlion.transform.moving_average.MovingPercentile.train"]], "train() (merlion.transform.normalize.absval method)": [[14, "merlion.transform.normalize.AbsVal.train"]], "train() (merlion.transform.normalize.boxcoxtransform method)": [[14, "merlion.transform.normalize.BoxCoxTransform.train"]], "train() (merlion.transform.normalize.meanvarnormalize method)": [[14, "merlion.transform.normalize.MeanVarNormalize.train"]], "train() (merlion.transform.normalize.minmaxnormalize method)": [[14, "merlion.transform.normalize.MinMaxNormalize.train"]], "train() (merlion.transform.normalize.rescale method)": [[14, "merlion.transform.normalize.Rescale.train"]], "train() (merlion.transform.resample.shingle method)": [[14, "merlion.transform.resample.Shingle.train"]], "train() (merlion.transform.resample.temporalresample method)": [[14, "merlion.transform.resample.TemporalResample.train"]], "train() (merlion.transform.sequence.transformsequence method)": [[14, "merlion.transform.sequence.TransformSequence.train"]], "train() (merlion.transform.sequence.transformstack method)": [[14, "merlion.transform.sequence.TransformStack.train"]], "aggregationpolicy (class in merlion.utils.resample)": [[15, "merlion.utils.resample.AggregationPolicy"]], "alignpolicy (class in merlion.utils.resample)": [[15, "merlion.utils.resample.AlignPolicy"]], "bfill (merlion.utils.resample.missingvaluepolicy attribute)": [[15, "merlion.utils.resample.MissingValuePolicy.BFill"]], "bayesianlinreg (class in merlion.utils.conj_priors)": [[15, "merlion.utils.conj_priors.BayesianLinReg"]], "bayesianmvlinreg (class in merlion.utils.conj_priors)": [[15, "merlion.utils.conj_priors.BayesianMVLinReg"]], "betabernoulli (class in merlion.utils.conj_priors)": [[15, "merlion.utils.conj_priors.BetaBernoulli"]], "conjprior (class in merlion.utils.conj_priors)": [[15, "merlion.utils.conj_priors.ConjPrior"]], "exponentialmovingaverage (class in merlion.utils.istat)": [[15, "merlion.utils.istat.ExponentialMovingAverage"]], "ffill (merlion.utils.resample.missingvaluepolicy attribute)": [[15, "merlion.utils.resample.MissingValuePolicy.FFill"]], "first (merlion.utils.resample.aggregationpolicy attribute)": [[15, "merlion.utils.resample.AggregationPolicy.First"]], "fixedgranularity (merlion.utils.resample.alignpolicy attribute)": [[15, "merlion.utils.resample.AlignPolicy.FixedGranularity"]], "fixedreference (merlion.utils.resample.alignpolicy attribute)": [[15, "merlion.utils.resample.AlignPolicy.FixedReference"]], "generatorcomposer (class in merlion.utils.ts_generator)": [[15, "merlion.utils.ts_generator.GeneratorComposer"]], "generatorconcatenator (class in merlion.utils.ts_generator)": [[15, "merlion.utils.ts_generator.GeneratorConcatenator"]], "istat (class in merlion.utils.istat)": [[15, "merlion.utils.istat.IStat"]], "innerjoin (merlion.utils.resample.alignpolicy attribute)": [[15, "merlion.utils.resample.AlignPolicy.InnerJoin"]], "interpolate (merlion.utils.resample.missingvaluepolicy attribute)": [[15, "merlion.utils.resample.MissingValuePolicy.Interpolate"]], "last (merlion.utils.resample.aggregationpolicy attribute)": [[15, "merlion.utils.resample.AggregationPolicy.Last"]], "mvnorminvwishart (class in merlion.utils.conj_priors)": [[15, "merlion.utils.conj_priors.MVNormInvWishart"]], "max (merlion.utils.resample.aggregationpolicy attribute)": [[15, "merlion.utils.resample.AggregationPolicy.Max"]], "mean (class in merlion.utils.istat)": [[15, "merlion.utils.istat.Mean"]], "mean (merlion.utils.resample.aggregationpolicy attribute)": [[15, "merlion.utils.resample.AggregationPolicy.Mean"]], "median (merlion.utils.resample.aggregationpolicy attribute)": [[15, "merlion.utils.resample.AggregationPolicy.Median"]], "min (merlion.utils.resample.aggregationpolicy attribute)": [[15, "merlion.utils.resample.AggregationPolicy.Min"]], "missingvaluepolicy (class in merlion.utils.resample)": [[15, "merlion.utils.resample.MissingValuePolicy"]], "nearest (merlion.utils.resample.missingvaluepolicy attribute)": [[15, "merlion.utils.resample.MissingValuePolicy.Nearest"]], "norminvgamma (class in merlion.utils.conj_priors)": [[15, "merlion.utils.conj_priors.NormInvGamma"]], "outerjoin (merlion.utils.resample.alignpolicy attribute)": [[15, "merlion.utils.resample.AlignPolicy.OuterJoin"]], "recencyweightedvariance (class in merlion.utils.istat)": [[15, "merlion.utils.istat.RecencyWeightedVariance"]], "scalarconjprior (class in merlion.utils.conj_priors)": [[15, "merlion.utils.conj_priors.ScalarConjPrior"]], "sigma_posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[15, "merlion.utils.conj_priors.MVNormInvWishart.Sigma_posterior"]], "sum (merlion.utils.resample.aggregationpolicy attribute)": [[15, "merlion.utils.resample.AggregationPolicy.Sum"]], "timeseries (class in merlion.utils.time_series)": [[15, "merlion.utils.time_series.TimeSeries"]], "timeseriesgenerator (class in merlion.utils.ts_generator)": [[15, "merlion.utils.ts_generator.TimeSeriesGenerator"]], "univariatetimeseries (class in merlion.utils.time_series)": [[15, "merlion.utils.time_series.UnivariateTimeSeries"]], "variance (class in merlion.utils.istat)": [[15, "merlion.utils.istat.Variance"]], "zfill (merlion.utils.resample.missingvaluepolicy attribute)": [[15, "merlion.utils.resample.MissingValuePolicy.ZFill"]], "__getitem__() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.__getitem__"]], "__getitem__() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.__getitem__"]], "__iter__() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.__iter__"]], "__iter__() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.__iter__"]], "add() (merlion.utils.istat.istat method)": [[15, "merlion.utils.istat.IStat.add"]], "add() (merlion.utils.istat.mean method)": [[15, "merlion.utils.istat.Mean.add"]], "add() (merlion.utils.istat.variance method)": [[15, "merlion.utils.istat.Variance.add"]], "add_batch() (merlion.utils.istat.istat method)": [[15, "merlion.utils.istat.IStat.add_batch"]], "align() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.align"]], "assert_equal_timedeltas() (in module merlion.utils.time_series)": [[15, "merlion.utils.time_series.assert_equal_timedeltas"]], "bisect() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.bisect"]], "bisect() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.bisect"]], "concat() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.concat"]], "concat() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.concat"]], "copy() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.copy"]], "corrected_value (merlion.utils.istat.variance property)": [[15, "merlion.utils.istat.Variance.corrected_value"]], "csv_to_time_series() (in module merlion.utils.data_io)": [[15, "merlion.utils.data_io.csv_to_time_series"]], "data_io_decorator() (in module merlion.utils.data_io)": [[15, "merlion.utils.data_io.data_io_decorator"]], "df_to_time_series() (in module merlion.utils.data_io)": [[15, "merlion.utils.data_io.df_to_time_series"]], "dim (merlion.utils.time_series.timeseries property)": [[15, "merlion.utils.time_series.TimeSeries.dim"]], "drop() (merlion.utils.istat.exponentialmovingaverage method)": [[15, "merlion.utils.istat.ExponentialMovingAverage.drop"]], "drop() (merlion.utils.istat.istat method)": [[15, "merlion.utils.istat.IStat.drop"]], "drop() (merlion.utils.istat.mean method)": [[15, "merlion.utils.istat.Mean.drop"]], "drop() (merlion.utils.istat.recencyweightedvariance method)": [[15, "merlion.utils.istat.RecencyWeightedVariance.drop"]], "drop() (merlion.utils.istat.variance method)": [[15, "merlion.utils.istat.Variance.drop"]], "drop_batch() (merlion.utils.istat.istat method)": [[15, "merlion.utils.istat.IStat.drop_batch"]], "empty() (merlion.utils.time_series.univariatetimeseries class method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.empty"]], "forecast() (merlion.utils.conj_priors.bayesianlinreg method)": [[15, "merlion.utils.conj_priors.BayesianLinReg.forecast"]], "forecast() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[15, "merlion.utils.conj_priors.BayesianMVLinReg.forecast"]], "forecast() (merlion.utils.conj_priors.betabernoulli method)": [[15, "merlion.utils.conj_priors.BetaBernoulli.forecast"]], "forecast() (merlion.utils.conj_priors.conjprior method)": [[15, "merlion.utils.conj_priors.ConjPrior.forecast"]], "forecast() (merlion.utils.conj_priors.mvnorminvwishart method)": [[15, "merlion.utils.conj_priors.MVNormInvWishart.forecast"]], "forecast() (merlion.utils.conj_priors.norminvgamma method)": [[15, "merlion.utils.conj_priors.NormInvGamma.forecast"]], "from_dict() (merlion.utils.conj_priors.conjprior class method)": [[15, "merlion.utils.conj_priors.ConjPrior.from_dict"]], "from_dict() (merlion.utils.time_series.univariatetimeseries class method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.from_dict"]], "from_pd() (merlion.utils.time_series.timeseries class method)": [[15, "merlion.utils.time_series.TimeSeries.from_pd"]], "from_pd() (merlion.utils.time_series.univariatetimeseries class method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.from_pd"]], "from_ts_list() (merlion.utils.time_series.timeseries class method)": [[15, "merlion.utils.time_series.TimeSeries.from_ts_list"]], "generate() (merlion.utils.ts_generator.timeseriesgenerator method)": [[15, "merlion.utils.ts_generator.TimeSeriesGenerator.generate"]], "generators (merlion.utils.ts_generator.generatorcomposer property)": [[15, "merlion.utils.ts_generator.GeneratorComposer.generators"]], "generators (merlion.utils.ts_generator.generatorconcatenator property)": [[15, "merlion.utils.ts_generator.GeneratorConcatenator.generators"]], "get_gcd_timedelta() (in module merlion.utils.resample)": [[15, "merlion.utils.resample.get_gcd_timedelta"]], "get_time_series_values() (merlion.utils.conj_priors.conjprior static method)": [[15, "merlion.utils.conj_priors.ConjPrior.get_time_series_values"]], "get_time_series_values() (merlion.utils.conj_priors.scalarconjprior static method)": [[15, "merlion.utils.conj_priors.ScalarConjPrior.get_time_series_values"]], "granularity_str_to_seconds() (in module merlion.utils.resample)": [[15, "merlion.utils.resample.granularity_str_to_seconds"]], "infer_granularity() (in module merlion.utils.resample)": [[15, "merlion.utils.resample.infer_granularity"]], "is_aligned (merlion.utils.time_series.timeseries property)": [[15, "merlion.utils.time_series.TimeSeries.is_aligned"]], "is_empty() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.is_empty"]], "is_empty() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.is_empty"]], "items() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.items"]], "mean_class (merlion.utils.istat.recencyweightedvariance attribute)": [[15, "merlion.utils.istat.RecencyWeightedVariance.mean_class"]], "mean_class (merlion.utils.istat.variance attribute)": [[15, "merlion.utils.istat.Variance.mean_class"]], "merlion.utils": [[15, "module-merlion.utils"]], "merlion.utils.conj_priors": [[15, "module-merlion.utils.conj_priors"]], "merlion.utils.data_io": [[15, "module-merlion.utils.data_io"]], "merlion.utils.hts": [[15, "module-merlion.utils.hts"]], "merlion.utils.istat": [[15, "module-merlion.utils.istat"]], "merlion.utils.resample": [[15, "module-merlion.utils.resample"]], "merlion.utils.time_series": [[15, "module-merlion.utils.time_series"]], "merlion.utils.ts_generator": [[15, "module-merlion.utils.ts_generator"]], "mint_reconciliation() (in module merlion.utils.hts)": [[15, "merlion.utils.hts.minT_reconciliation"]], "mu_posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[15, "merlion.utils.conj_priors.MVNormInvWishart.mu_posterior"]], "mu_posterior() (merlion.utils.conj_priors.norminvgamma method)": [[15, "merlion.utils.conj_priors.NormInvGamma.mu_posterior"]], "n (merlion.utils.istat.istat property)": [[15, "merlion.utils.istat.IStat.n"]], "n (merlion.utils.ts_generator.timeseriesgenerator property)": [[15, "merlion.utils.ts_generator.TimeSeriesGenerator.n"]], "names (merlion.utils.time_series.timeseries property)": [[15, "merlion.utils.time_series.TimeSeries.names"]], "np_time_stamps (merlion.utils.time_series.timeseries property)": [[15, "merlion.utils.time_series.TimeSeries.np_time_stamps"]], "np_time_stamps (merlion.utils.time_series.univariatetimeseries property)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.np_time_stamps"]], "np_values (merlion.utils.time_series.univariatetimeseries property)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.np_values"]], "posterior() (merlion.utils.conj_priors.bayesianlinreg method)": [[15, "merlion.utils.conj_priors.BayesianLinReg.posterior"]], "posterior() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[15, "merlion.utils.conj_priors.BayesianMVLinReg.posterior"]], "posterior() (merlion.utils.conj_priors.betabernoulli method)": [[15, "merlion.utils.conj_priors.BetaBernoulli.posterior"]], "posterior() (merlion.utils.conj_priors.conjprior method)": [[15, "merlion.utils.conj_priors.ConjPrior.posterior"]], "posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[15, "merlion.utils.conj_priors.MVNormInvWishart.posterior"]], "posterior() (merlion.utils.conj_priors.norminvgamma method)": [[15, "merlion.utils.conj_priors.NormInvGamma.posterior"]], "posterior_explicit() (merlion.utils.conj_priors.bayesianlinreg method)": [[15, "merlion.utils.conj_priors.BayesianLinReg.posterior_explicit"]], "posterior_explicit() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[15, "merlion.utils.conj_priors.BayesianMVLinReg.posterior_explicit"]], "process_time_series() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[15, "merlion.utils.conj_priors.BayesianMVLinReg.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.conjprior method)": [[15, "merlion.utils.conj_priors.ConjPrior.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.mvnorminvwishart method)": [[15, "merlion.utils.conj_priors.MVNormInvWishart.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.scalarconjprior method)": [[15, "merlion.utils.conj_priors.ScalarConjPrior.process_time_series"]], "recency_weight (merlion.utils.istat.exponentialmovingaverage property)": [[15, "merlion.utils.istat.ExponentialMovingAverage.recency_weight"]], "recency_weight (merlion.utils.istat.recencyweightedvariance property)": [[15, "merlion.utils.istat.RecencyWeightedVariance.recency_weight"]], "reindex_df() (in module merlion.utils.resample)": [[15, "merlion.utils.resample.reindex_df"]], "rename() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.rename"]], "sd (merlion.utils.istat.variance property)": [[15, "merlion.utils.istat.Variance.sd"]], "se (merlion.utils.istat.variance property)": [[15, "merlion.utils.istat.Variance.se"]], "shape (merlion.utils.time_series.timeseries property)": [[15, "merlion.utils.time_series.TimeSeries.shape"]], "sigma2_posterior() (merlion.utils.conj_priors.norminvgamma method)": [[15, "merlion.utils.conj_priors.NormInvGamma.sigma2_posterior"]], "squeeze() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.squeeze"]], "step (merlion.utils.ts_generator.timeseriesgenerator property)": [[15, "merlion.utils.ts_generator.TimeSeriesGenerator.step"]], "t0 (merlion.utils.time_series.timeseries property)": [[15, "merlion.utils.time_series.TimeSeries.t0"]], "t0 (merlion.utils.time_series.univariatetimeseries property)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.t0"]], "tf (merlion.utils.time_series.timeseries property)": [[15, "merlion.utils.time_series.TimeSeries.tf"]], "tf (merlion.utils.time_series.univariatetimeseries property)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.tf"]], "theta_posterior() (merlion.utils.conj_priors.betabernoulli method)": [[15, "merlion.utils.conj_priors.BetaBernoulli.theta_posterior"]], "time_stamps (merlion.utils.time_series.timeseries property)": [[15, "merlion.utils.time_series.TimeSeries.time_stamps"]], "time_stamps (merlion.utils.time_series.univariatetimeseries property)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.time_stamps"]], "to_csv() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.to_csv"]], "to_dict() (merlion.utils.conj_priors.conjprior method)": [[15, "merlion.utils.conj_priors.ConjPrior.to_dict"]], "to_dict() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.to_dict"]], "to_pd() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.to_pd"]], "to_pd() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.to_pd"]], "to_pd_datetime() (in module merlion.utils.resample)": [[15, "merlion.utils.resample.to_pd_datetime"]], "to_timestamp() (in module merlion.utils.resample)": [[15, "merlion.utils.resample.to_timestamp"]], "to_ts() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.to_ts"]], "true_value (merlion.utils.istat.variance property)": [[15, "merlion.utils.istat.Variance.true_value"]], "update() (merlion.utils.conj_priors.bayesianlinreg method)": [[15, "merlion.utils.conj_priors.BayesianLinReg.update"]], "update() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[15, "merlion.utils.conj_priors.BayesianMVLinReg.update"]], "update() (merlion.utils.conj_priors.betabernoulli method)": [[15, "merlion.utils.conj_priors.BetaBernoulli.update"]], "update() (merlion.utils.conj_priors.conjprior method)": [[15, "merlion.utils.conj_priors.ConjPrior.update"]], "update() (merlion.utils.conj_priors.mvnorminvwishart method)": [[15, "merlion.utils.conj_priors.MVNormInvWishart.update"]], "update() (merlion.utils.conj_priors.norminvgamma method)": [[15, "merlion.utils.conj_priors.NormInvGamma.update"]], "value (merlion.utils.istat.exponentialmovingaverage property)": [[15, "merlion.utils.istat.ExponentialMovingAverage.value"]], "value (merlion.utils.istat.istat property)": [[15, "merlion.utils.istat.IStat.value"]], "value (merlion.utils.istat.mean property)": [[15, "merlion.utils.istat.Mean.value"]], "value (merlion.utils.istat.variance property)": [[15, "merlion.utils.istat.Variance.value"]], "values (merlion.utils.time_series.univariatetimeseries property)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.values"]], "window() (merlion.utils.time_series.timeseries method)": [[15, "merlion.utils.time_series.TimeSeries.window"]], "window() (merlion.utils.time_series.univariatetimeseries method)": [[15, "merlion.utils.time_series.UnivariateTimeSeries.window"]], "x0 (merlion.utils.ts_generator.timeseriesgenerator property)": [[15, "merlion.utils.ts_generator.TimeSeriesGenerator.x0"]], "y() (merlion.utils.ts_generator.generatorconcatenator method)": [[15, "merlion.utils.ts_generator.GeneratorConcatenator.y"]], "y() (merlion.utils.ts_generator.timeseriesgenerator method)": [[15, "merlion.utils.ts_generator.TimeSeriesGenerator.y"]], "basedataset (class in ts_datasets.base)": [[16, "ts_datasets.base.BaseDataset"]], "describe() (ts_datasets.base.basedataset method)": [[16, "ts_datasets.base.BaseDataset.describe"]], "metadata (ts_datasets.base.basedataset attribute)": [[16, "ts_datasets.base.BaseDataset.metadata"]], "time_series (ts_datasets.base.basedataset attribute)": [[16, "ts_datasets.base.BaseDataset.time_series"]], "ts_datasets": [[16, "module-ts_datasets"]], "ts_datasets.base": [[16, "module-ts_datasets.base"]], "customanomalydataset (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.CustomAnomalyDataset"]], "iopscompetition (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.IOpsCompetition"]], "msl (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.MSL"]], "nab (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.NAB"]], "smap (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.SMAP"]], "smd (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.SMD"]], "synthetic (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.Synthetic"]], "tsadbasedataset (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.TSADBaseDataset"]], "ucr (class in ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.UCR"]], "anomaly_subsets (ts_datasets.anomaly.synthetic attribute)": [[17, "ts_datasets.anomaly.Synthetic.anomaly_subsets"]], "base_ts_subsets (ts_datasets.anomaly.synthetic attribute)": [[17, "ts_datasets.anomaly.Synthetic.base_ts_subsets"]], "check_ts_for_metadata() (ts_datasets.anomaly.customanomalydataset method)": [[17, "ts_datasets.anomaly.CustomAnomalyDataset.check_ts_for_metadata"]], "describe() (ts_datasets.anomaly.tsadbasedataset method)": [[17, "ts_datasets.anomaly.TSADBaseDataset.describe"]], "download() (ts_datasets.anomaly.nab method)": [[17, "ts_datasets.anomaly.NAB.download"]], "download() (ts_datasets.anomaly.ucr method)": [[17, "ts_datasets.anomaly.UCR.download"]], "filename (ts_datasets.anomaly.smd attribute)": [[17, "ts_datasets.anomaly.SMD.filename"]], "get_dataset() (in module ts_datasets.anomaly)": [[17, "ts_datasets.anomaly.get_dataset"]], "load_labels() (ts_datasets.anomaly.nab static method)": [[17, "ts_datasets.anomaly.NAB.load_labels"]], "max_lag_sec (ts_datasets.anomaly.iopscompetition property)": [[17, "ts_datasets.anomaly.IOpsCompetition.max_lag_sec"]], "max_lag_sec (ts_datasets.anomaly.tsadbasedataset property)": [[17, "ts_datasets.anomaly.TSADBaseDataset.max_lag_sec"]], "max_lead_sec (ts_datasets.anomaly.nab property)": [[17, "ts_datasets.anomaly.NAB.max_lead_sec"]], "max_lead_sec (ts_datasets.anomaly.tsadbasedataset property)": [[17, "ts_datasets.anomaly.TSADBaseDataset.max_lead_sec"]], "metadata_cols (ts_datasets.anomaly.customanomalydataset property)": [[17, "ts_datasets.anomaly.CustomAnomalyDataset.metadata_cols"]], "ts_datasets.anomaly": [[17, "module-ts_datasets.anomaly"]], "url (ts_datasets.anomaly.msl attribute)": [[17, "ts_datasets.anomaly.MSL.url"]], "url (ts_datasets.anomaly.smap attribute)": [[17, "ts_datasets.anomaly.SMAP.url"]], "url (ts_datasets.anomaly.smd attribute)": [[17, "ts_datasets.anomaly.SMD.url"]], "valid_subsets (ts_datasets.anomaly.nab attribute)": [[17, "ts_datasets.anomaly.NAB.valid_subsets"]], "valid_subsets (ts_datasets.anomaly.smd attribute)": [[17, "ts_datasets.anomaly.SMD.valid_subsets"]], "valid_subsets (ts_datasets.anomaly.synthetic attribute)": [[17, "ts_datasets.anomaly.Synthetic.valid_subsets"]], "customdataset (class in ts_datasets.forecast)": [[18, "ts_datasets.forecast.CustomDataset"]], "energypower (class in ts_datasets.forecast)": [[18, "ts_datasets.forecast.EnergyPower"]], "m4 (class in ts_datasets.forecast)": [[18, "ts_datasets.forecast.M4"]], "seattletrail (class in ts_datasets.forecast)": [[18, "ts_datasets.forecast.SeattleTrail"]], "solarplant (class in ts_datasets.forecast)": [[18, "ts_datasets.forecast.SolarPlant"]], "check_ts_for_metadata() (ts_datasets.forecast.customdataset method)": [[18, "ts_datasets.forecast.CustomDataset.check_ts_for_metadata"]], "get_dataset() (in module ts_datasets.forecast)": [[18, "ts_datasets.forecast.get_dataset"]], "metadata_cols (ts_datasets.forecast.customdataset property)": [[18, "ts_datasets.forecast.CustomDataset.metadata_cols"]], "ts_datasets.forecast": [[18, "module-ts_datasets.forecast"]], "url (ts_datasets.forecast.m4 attribute)": [[18, "ts_datasets.forecast.M4.url"]], "valid_subsets (ts_datasets.forecast.m4 attribute)": [[18, "ts_datasets.forecast.M4.valid_subsets"]]}})