Search.setIndex({"docnames": ["architecture", "index", "merlion", "merlion.dashboard", "merlion.evaluate", "merlion.models", "merlion.models.anomaly", "merlion.models.anomaly.change_point", "merlion.models.anomaly.forecast_based", "merlion.models.automl", "merlion.models.ensemble", "merlion.models.forecast", "merlion.models.utils", "merlion.plot", "merlion.post_process", "merlion.spark", "merlion.transform", "merlion.utils", "ts_datasets", "ts_datasets.anomaly", "ts_datasets.forecast", "tutorials", "tutorials/CustomDataset", "tutorials/TimeSeries", "tutorials/advanced/1_AutoSARIMA_forecasting_tutorial", "tutorials/advanced/2_ForecastInvertPOC", "tutorials/anomaly/0_AnomalyIntro", "tutorials/anomaly/1_AnomalyFeatures", "tutorials/anomaly/2_AnomalyMultivariate", "tutorials/anomaly/3_AnomalyNewModel", "tutorials/forecast/0_ForecastIntro", "tutorials/forecast/1_ForecastFeatures", "tutorials/forecast/2_ForecastMultivariate", "tutorials/forecast/3_ForecastExogenous", "tutorials/forecast/4_ForecastNewModel"], "filenames": ["architecture.rst", "index.rst", "merlion.rst", "merlion.dashboard.rst", "merlion.evaluate.rst", "merlion.models.rst", "merlion.models.anomaly.rst", "merlion.models.anomaly.change_point.rst", "merlion.models.anomaly.forecast_based.rst", "merlion.models.automl.rst", "merlion.models.ensemble.rst", "merlion.models.forecast.rst", "merlion.models.utils.rst", "merlion.plot.rst", "merlion.post_process.rst", "merlion.spark.rst", "merlion.transform.rst", "merlion.utils.rst", "ts_datasets.rst", "ts_datasets.anomaly.rst", "ts_datasets.forecast.rst", "tutorials.rst", "tutorials/CustomDataset.ipynb", "tutorials/TimeSeries.ipynb", "tutorials/advanced/1_AutoSARIMA_forecasting_tutorial.ipynb", "tutorials/advanced/2_ForecastInvertPOC.ipynb", "tutorials/anomaly/0_AnomalyIntro.ipynb", "tutorials/anomaly/1_AnomalyFeatures.ipynb", "tutorials/anomaly/2_AnomalyMultivariate.ipynb", "tutorials/anomaly/3_AnomalyNewModel.ipynb", "tutorials/forecast/0_ForecastIntro.ipynb", "tutorials/forecast/1_ForecastFeatures.ipynb", "tutorials/forecast/2_ForecastMultivariate.ipynb", "tutorials/forecast/3_ForecastExogenous.ipynb", "tutorials/forecast/4_ForecastNewModel.ipynb"], "titles": ["Merlion Architecture", "Welcome to Merlion\u2019s documentation!", "merlion: Time Series Intelligence", "merlion.dashboard package", "merlion.evaluate package", "merlion.models package", "anomaly", "anomaly.change_point", "anomaly.forecast_based", "automl", "ensemble", "forecast", "utils", "merlion.plot package", "merlion.post_process package", "merlion.spark package", "merlion.transform package", "merlion.utils package", "ts_datasets: Easy Data Loading", "ts_datasets.anomaly package", "ts_datasets.forecast package", "Tutorials &amp; Example Code", "Loading Custom Datasets", "Merlion\u2019s Data Format", "Tutorial for AutoSARIMA Forecasting Model", "Proof of Concept: Inverse Transforms for Forecasters", "A Gentle Introduction to Anomaly Detection in Merlion", "How to Use Anomaly Detectors in Merlion", "Multivariate Time Series Anomaly Detection", "Adding New Anomaly Detection Models", "A Gentle Introduction to Forecasting in Merlion", "How to Use Forecasters in Merlion", "Multivariate Time Series Forecasting", "Forecasting With Exogenous Regressors", "Adding a New Forecasting Model"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34], "document": [0, 2, 5, 6, 10, 11, 17], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "intend": [0, 19], "develop": [0, 1, 15, 31], "It": [0, 1, 3, 4, 6, 11, 16, 19, 22, 27, 31, 34], "outlin": [0, 2, 18], "": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "kei": [0, 1, 2, 4, 5, 6, 9, 15, 16, 17, 18, 19, 25, 27, 31], "compon": [0, 1, 4, 8, 9, 11, 12], "how": [0, 1, 2, 6, 7, 10, 11, 15, 17, 20, 21, 22, 23, 24, 29, 33, 34], "thei": [0, 5, 6, 7, 8, 9, 11, 14, 17, 19, 23, 27, 33], "interact": [0, 1], "each": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 26, 27, 31, 32, 33, 34], "In": [0, 4, 6, 12, 14, 16, 19, 20, 22, 23, 27, 29, 31, 33], "gener": [0, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 19, 21, 23, 27, 29, 31], "everyth": [0, 17], "describ": [0, 4, 6, 7, 8, 10, 11, 14, 15, 17, 18, 19], "base": [0, 1, 2, 7, 12, 13, 17, 19, 20, 21, 23, 25, 29, 30, 31, 32], "py": [0, 15, 22, 23, 30, 33], "file": [0, 3, 5, 12, 15, 17, 19, 20, 22, 27, 31, 33, 34], "being": [0, 4, 5, 7, 8, 9, 11, 13, 15, 19, 23], "discuss": [0, 10], "appli": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 14, 16, 17, 27, 29, 33], "variou": [0, 2, 5, 11, 12, 15, 17, 33], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 32, 33, 34], "data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34], "mani": [0, 1, 2, 4, 5, 6, 8, 14, 15, 19, 20, 22, 29, 31, 33, 34], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 31, 32, 33, 34], "trainabl": [0, 5, 6, 11, 16], "For": [0, 1, 4, 5, 6, 9, 11, 14, 15, 16, 17, 18, 19, 20, 23, 27, 28, 29, 31, 32, 33, 34], "exampl": [0, 1, 2, 5, 6, 9, 11, 15, 16, 17, 19, 20, 22, 23, 24, 27, 31, 33], "we": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34], "want": [0, 1, 3, 4, 6, 9, 11, 16, 17, 19, 22, 27, 29, 31, 32, 33], "normal": [0, 2, 5, 6, 7, 11, 14, 17, 25, 29, 33, 34], "have": [0, 1, 2, 3, 4, 5, 6, 8, 11, 14, 15, 16, 17, 18, 19, 22, 23, 27, 31, 33, 34], "zero": [0, 12, 14, 16, 17, 29, 33, 34], "mean": [0, 3, 4, 5, 6, 8, 10, 11, 16, 17, 22, 24, 26, 27, 28, 29, 31, 32, 33, 34], "unit": [0, 11, 12, 16, 17, 19, 20, 22, 23, 25, 27, 28, 29, 33], "varianc": [0, 5, 6, 9, 16, 17, 29, 33, 34], "learn": [0, 1, 5, 6, 11, 12, 14], "variabl": [0, 1, 2, 3, 5, 6, 7, 8, 11, 12, 16, 17, 18, 19, 20, 22, 23, 29, 32, 33, 34], "If": [0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 29, 31, 34], "wish": [0, 3, 4, 5, 6, 7, 8, 9, 11, 15, 17, 22, 29, 33], "resampl": [0, 2, 8, 10, 11, 23, 25, 31, 32, 33], "fix": [0, 5, 6, 7, 9, 10, 11], "granular": [0, 5, 8, 11, 12, 16, 17, 20, 26, 30, 31, 32], "most": [0, 5, 6, 7, 10, 11, 17, 20, 23, 27, 29, 31, 33, 34], "commonli": [0, 1], "observ": [0, 7, 11, 16, 17, 34], "timedelta": [0, 4, 5, 6, 17, 31], "invert": [0, 5, 7, 8, 10, 11, 16, 25], "one": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 20, 22, 23, 27, 29, 31, 33, 34], "mai": [0, 1, 3, 5, 6, 7, 8, 9, 11, 14, 16, 17, 18, 19, 20, 23, 27, 28, 29, 31, 32, 33, 34], "y": [0, 4, 12, 13, 14, 16, 17, 31, 33, 34], "x": [0, 4, 6, 8, 9, 11, 12, 14, 16, 17, 23, 27, 29, 33, 34], "mu": [0, 17], "sigma": [0, 8, 11, 17, 27, 29], "via": [0, 1, 15, 17, 23], "howev": [0, 5, 9, 15, 19, 22, 23, 27, 28, 31, 33], "lossi": 0, "input": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 27, 28, 29, 31, 32, 33, 34], "cannot": [0, 11], "recov": [0, 16], "without": [0, 7, 8, 9, 10, 11, 19, 21, 29, 33, 34], "state": [0, 5, 6, 7, 8, 10, 11, 16, 27, 31], "consid": [0, 6, 7, 9, 14, 16, 17, 19, 27, 33], "differ": [0, 3, 4, 6, 8, 9, 11, 12, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 29, 31, 32, 33], "1": [0, 4, 5, 6, 8, 9, 11, 12, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "need": [0, 1, 3, 5, 6, 8, 9, 10, 11, 15, 17, 18, 22, 27, 34], "record": 0, "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "inversion_st": [0, 16], "order": [0, 6, 8, 9, 11, 12, 15, 17, 23, 24, 31, 34], "from": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "which": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34], "requir": [0, 3, 4, 5, 6, 8, 10, 11, 12, 15, 16, 17, 19, 20, 23, 31], "an": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34], "handl": [0, 5, 6, 8, 10, 11, 12, 15, 17, 23, 33], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 14, 15, 16, 17, 18, 19, 22, 23, 27, 29, 31, 34], "when": [0, 1, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 23, 27, 29, 31], "call": [0, 1, 3, 5, 9, 11, 15, 16, 17, 18, 19, 22, 23, 27, 28, 29, 31, 32, 33], "set": [0, 1, 2, 3, 4, 5, 6, 9, 11, 12, 14, 16, 17, 19, 20, 23, 24, 27, 28, 29, 31, 33, 34], "diff": [0, 12, 25, 31], "differencetransform": [0, 16, 25, 27], "first": [0, 3, 6, 11, 13, 15, 16, 17, 19, 20, 22, 23, 26, 27, 29, 31, 33, 34], "univari": [0, 1, 2, 3, 5, 7, 8, 9, 10, 12, 13, 16, 17, 20, 22, 23, 28, 29, 31, 32, 33, 34], "its": [0, 1, 2, 3, 4, 5, 6, 8, 11, 15, 17, 23, 26, 27, 28, 29, 30, 31, 32], "reset": [0, 5, 6, 10, 31], "none": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 25, 27, 29, 31, 32, 33, 34], "unless": [0, 9, 16, 31], "explicitli": [0, 4, 9, 16, 19, 24, 27], "invok": [0, 15, 18, 27], "retain_inversion_st": [0, 16], "true": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34], "ensur": [0, 1, 2, 5, 8, 10, 11, 17, 31], "doesn": [0, 3, 15, 16, 22, 31, 34], "t": [0, 1, 3, 4, 5, 6, 8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 29, 31, 33, 34], "inadvert": 0, "stale": [0, 16], "new": [0, 2, 4, 6, 9, 11, 14, 17, 19, 21, 23, 27, 31], "some": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 14, 18, 22, 23, 27, 28, 29, 31, 33, 34], "all": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 31, 32, 33, 34], "e": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 32, 33], "g": [0, 3, 4, 5, 6, 8, 9, 10, 11, 15, 17, 18, 19, 20, 24, 27, 28, 32], "case": [0, 5, 6, 12, 15, 16, 18, 19, 20, 22, 24, 27, 29, 31, 32, 33], "simpli": [0, 3, 8, 11, 17, 18, 27, 31], "return": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 25, 27, 28, 29, 31, 33, 34], "warn": [0, 16, 17, 23, 30, 33], "emit": [0, 16, 17, 23], "ident": [0, 16, 27, 28, 31, 32, 33], "track": [0, 11, 16, 27, 31], "dictionari": [0, 5, 6, 11, 15, 17, 23], "map": [0, 6, 9, 11, 13, 14, 16, 17], "name": [0, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 22, 23, 25, 27, 28, 31, 34], "relev": [0, 1, 5, 6, 7, 8, 9, 11, 22, 33], "robust": [0, 23], "behav": 0, "expect": [0, 15, 16, 17], "even": [0, 16], "individu": [0, 1, 6, 10, 16, 17, 18, 22, 23, 27, 28, 31], "reorder": 0, "A": [0, 2, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 21, 27, 28, 31, 32], "notabl": [0, 2, 17], "limit": [0, 4], "current": [0, 2, 6, 7, 14, 15, 16, 19, 20, 33], "fact": [0, 5, 17, 26], "demand": [0, 33], "sort": [0, 7, 17, 20, 22, 25, 33], "behavior": [0, 9, 17, 27, 31], "futur": [0, 4, 11, 12, 16, 31, 32, 33], "ad": [0, 15, 16, 19, 20, 21, 33], "paramet": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 24, 29, 33], "indic": [0, 4, 5, 6, 8, 9, 11, 16, 18, 19, 20, 22, 24, 31, 32], "should": [0, 1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 27, 29, 31, 33], "combin": [0, 5, 6, 9, 27, 28, 29, 31, 32], "transformstack": [0, 16], "tutori": [0, 1, 2, 17, 18, 19, 20, 28, 32, 33], "written": 0, "featur": [0, 1, 2, 3, 5, 11, 12, 16, 17, 18, 19, 22, 27, 31, 33], "central": 0, "object": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 23, 27, 31], "ha": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 22, 24, 26, 27, 29, 31, 33], "automat": [0, 5, 6, 7, 8, 9, 10, 11, 15, 16, 22, 23, 24, 28, 29, 31, 32], "both": [0, 1, 2, 3, 5, 6, 8, 11, 12, 15, 16, 23, 24, 27, 29, 31, 33], "infer": [0, 2, 6, 15, 16, 17, 21, 26, 30, 33], "forecast": [0, 1, 2, 3, 5, 6, 7, 8, 13, 15, 17, 18, 27], "realiti": 0, "worth": 0, "note": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 22, 23, 24, 27, 28, 29, 31, 32, 33, 34], "refer": [0, 5, 6, 8, 11, 15, 17, 19, 23, 24, 25], "config": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 21, 25, 27, 28, 31, 32, 33], "your": [0, 1, 3, 9, 11, 15, 17, 22, 23, 29, 34], "alreadi": [0, 3, 14, 16, 19, 29], "you": [0, 1, 3, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 31, 32, 33, 34], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34], "step": [0, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 29, 32, 34], "train_pre_process": [0, 5, 6, 7, 10, 11], "method": [0, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 27, 29, 31, 34], "dimens": [0, 5, 6, 11, 12, 17], "dim": [0, 5, 6, 11, 12, 17, 27, 28, 31, 32, 34], "sampl": [0, 4, 5, 6, 7, 8, 9, 10, 11, 17, 19, 23, 29, 31, 32, 34], "frequenc": [0, 4, 5, 6, 7, 9, 10, 11, 12, 17], "well": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 22, 23, 27, 29, 31, 32, 34], "offset": [0, 16, 17], "timedelta_offset": 0, "addition": [0, 16, 29, 31], "exog_transform": [0, 8, 10, 11, 27, 31, 33], "exogen": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 21], "ani": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 31, 33, 34], "given": [0, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 19, 20, 23, 34], "also": [0, 1, 3, 5, 6, 8, 9, 11, 14, 15, 16, 17, 22, 23, 26, 27, 28, 30, 31, 32, 33], "exog_dim": 0, "anomali": [0, 1, 2, 3, 5, 11, 13, 14, 15, 16, 18], "detect": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 24, 27, 32, 34], "get_anomaly_scor": [0, 5, 6, 7, 8, 27, 29, 34], "time_seri": [0, 2, 5, 6, 7, 8, 11, 14, 16, 18, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34], "time_series_prev": [0, 5, 6, 7, 8, 10, 11, 27, 29, 31, 34], "includ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 14, 16, 17, 19, 20, 27, 29, 31, 33], "concaten": [0, 17, 34], "match": [0, 6, 11], "time_stamp": [0, 5, 6, 7, 8, 10, 11, 15, 17, 23, 25, 30, 31, 32, 33, 34], "exog_data": [0, 4, 5, 7, 8, 9, 10, 11, 12, 33], "specifi": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 22, 23, 24, 27, 29, 31, 32, 33], "save": [0, 3, 5, 6, 10, 11, 15, 21, 22], "same": [0, 4, 5, 6, 8, 10, 11, 16, 17, 18, 19, 22, 23, 27, 28, 31, 33], "stamp": [0, 5, 6, 11, 16, 17, 23, 31], "after": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 17, 19, 29], "see": [0, 4, 5, 6, 11, 15, 17, 19, 27, 29, 31, 33, 34], "With": [0, 21], "regressor": [0, 2, 5, 9, 11, 21], "more": [0, 1, 2, 3, 4, 5, 8, 10, 11, 12, 14, 15, 16, 19, 20, 22, 23, 27, 29, 31, 33, 34], "detail": [0, 1, 4, 5, 6, 10, 11, 15, 17, 19, 27, 29, 31, 34], "pass": [0, 5, 9, 11, 12, 16, 23, 31], "_train": [0, 9, 29, 34], "_train_with_exog": 0, "_get_anomaly_scor": [0, 29], "_forecast": [0, 34], "These": [0, 1, 2, 5, 6, 7, 8, 14, 15, 19, 22, 23, 31], "do": [0, 3, 5, 6, 7, 9, 10, 11, 15, 16, 17, 22, 23, 27, 31, 34], "real": [0, 4, 17, 19, 31, 33], "work": [0, 1, 3, 5, 6, 7, 9, 10, 11, 15, 17, 22, 23, 27, 28, 29, 31, 32], "underli": [0, 5, 7, 8, 9, 11, 27, 31], "must": [0, 1, 5, 6, 7, 8, 9, 11, 15, 16, 17, 19, 20, 29, 31, 32, 34], "manual": [0, 1, 5, 6, 12, 15, 28], "detector": [0, 5, 6, 7, 8, 10, 11, 21], "train_post_process": [0, 5, 6, 8, 11], "output": [0, 2, 4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 27], "involv": 0, "rule": [0, 2, 4, 5, 6, 7, 8, 10, 11, 14, 17, 19, 21, 27, 34], "calibr": [0, 1, 2, 5, 6, 7, 8, 10, 11, 27, 28, 29], "threshold": [0, 2, 3, 5, 6, 7, 8, 10, 11, 27, 28, 29, 34], "score": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 27, 28, 29, 34], "final": [0, 1, 3, 5, 6, 11, 13, 17, 19, 26, 29, 30], "get_anomaly_label": [0, 6, 8, 26, 27, 28, 29], "unprocess": 0, "what": [0, 8, 11, 22, 34], "wa": [0, 5, 6, 7, 8, 9, 11, 19, 23, 31], "befor": [0, 1, 4, 5, 6, 7, 8, 10, 11, 15, 16, 17, 22, 27, 29, 33, 34], "extend": [0, 9, 20], "accommod": 0, "make": [0, 4, 7, 8, 9, 10, 11, 14, 15, 19, 22, 23, 31], "chang": [0, 1, 2, 3, 5, 6, 7, 11, 12, 15, 16, 17, 19, 33], "wai": [0, 1, 2, 3, 5, 9, 15, 16, 17, 18, 19, 23, 27, 28, 31], "particular": [0, 3, 7, 11, 15, 16, 22, 27, 31, 33], "re": [0, 1, 3, 4, 14, 27, 31, 32, 33], "At": [0, 4, 7, 16, 27, 31], "probabl": [0, 7, 16], "write": [0, 15], "train_pre_process_multipl": 0, "copi": [0, 3, 15, 17, 23], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 31, 32, 33, 34], "function": [0, 2, 4, 5, 7, 8, 11, 12, 14, 15, 17], "similar": [0, 6, 11], "To": [0, 1, 3, 5, 11, 15, 26, 28, 31, 32, 33], "code": [0, 1, 6, 8, 11, 17, 19, 24, 33], "easier": 0, "train_multipl": [0, 5, 6], "anyth": 0, "remov": 0, "updat": [0, 3, 5, 6, 7, 8, 11, 15, 17], "especi": 0, "import": [0, 5, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "receiv": 0, "10": [0, 5, 6, 8, 11, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34], "singl": [0, 2, 3, 5, 7, 10, 11, 14, 15, 16, 17, 19, 20, 22, 27, 29, 31], "rather": [0, 6, 10, 14, 22, 23, 28], "than": [0, 4, 6, 7, 10, 12, 14, 16, 22, 23, 28, 29, 33], "per": [0, 10, 27, 32], "assumpt": [0, 29, 31, 34], "distribut": [0, 1, 2, 6, 7, 8, 11, 14, 15, 16, 17], "across": [0, 1], "done": [0, 6, 10, 11, 17, 25, 27, 31, 33], "now": [0, 15, 22, 27, 29, 31, 34], "_process_forecast": 0, "similarli": [0, 5, 32], "minu": 0, "rel": [0, 4, 6, 11, 16, 17, 27], "minor": 0, "flag": [0, 1, 19, 20], "multi_seri": 0, "sure": [0, 11, 15, 22], "respect": [0, 2, 15, 22], "point": [0, 1, 2, 4, 5, 6, 7, 8, 11, 14, 15, 16, 17, 24, 27, 31], "unchang": [0, 27], "There": [0, 15, 22, 27, 31], "number": [0, 4, 5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 22, 27, 31, 33], "either": [0, 3, 5, 7, 8, 9, 11, 15, 16, 17, 18, 19, 22, 23, 28], "build": [0, 6, 15, 21], "upon": [0, 16], "abov": [0, 2, 3, 4, 22, 27, 29, 31, 34], "class": [0, 2, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 26, 27, 30, 31], "modifi": [0, 3, 6, 15, 27], "them": [0, 1, 5, 6, 7, 8, 10, 11, 14, 15, 19, 24, 27, 31, 33], "slightli": [0, 4], "below": [0, 2, 6, 15, 23, 24, 27, 29, 31, 33, 34], "simpler": 0, "understand": [0, 1, 15, 31], "support": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 18, 19, 22, 29, 31, 33], "forecasterexogbas": [0, 5, 7, 8, 10, 11], "actual": [0, 4, 5, 6, 9, 10, 11, 13, 16, 17, 22, 23, 24, 29, 31, 32, 33, 34], "forecasterbas": [0, 5, 8, 9, 10, 11, 15, 25, 34], "inherit": [0, 5, 6, 7, 8, 11, 16, 23, 29, 34], "onli": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 23, 24, 28, 29, 31, 33, 34], "few": [0, 6, 21, 27], "intern": [0, 5, 6, 7, 9, 10, 11, 12], "field": 0, "been": [0, 5, 6, 7, 10, 11, 14], "basic": [0, 1, 3, 14, 34], "basi": [0, 5, 11], "piec": 0, "mixin": [0, 5, 6, 9], "forecastingdetectorbas": [0, 5, 6, 7, 8, 34], "don": [0, 1, 19, 20, 22, 31], "normalizingconfig": [0, 2, 5, 6, 11], "meanvarnorm": [0, 16, 25, 27, 29, 31, 33, 34], "full": [0, 2, 3, 5, 6, 8, 11, 15, 17, 21, 27, 29, 34], "access": [0, 5, 6, 12, 17, 23], "full_transform": [0, 5, 6], "becaus": [0, 4, 6, 7, 8, 9, 11, 16, 17, 23, 24], "properti": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 29, 34], "tri": [0, 9], "get": [0, 2, 4, 8, 11, 13, 16, 17, 18, 19, 20, 23, 27, 28, 29, 31, 32, 33, 34], "possibl": [0, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 23], "default": [0, 2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 21, 23, 26, 27, 29, 30, 33, 34], "otherwis": [0, 3, 4, 5, 6, 7, 8, 11, 12, 14, 16, 17, 34], "add": [0, 6, 8, 9, 11, 13, 15, 17, 22, 29, 33, 34], "two": [0, 1, 5, 6, 11, 15, 16, 17, 19, 23, 27, 31, 32], "contain": [0, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 33], "present": [0, 17, 23], "while": [0, 4, 5, 6, 8, 11, 15, 16, 17, 19, 27, 28, 30], "median": [0, 10, 17], "modelselector": [0, 10, 31, 32], "evalu": [0, 1, 2, 3, 6, 9, 10, 14, 17, 21, 24, 25, 26, 30, 33], "metric": [0, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 19, 23, 27, 28, 29, 31, 32, 34], "select": [0, 1, 2, 3, 6, 9, 10, 19, 24, 31, 32], "split": [0, 3, 5, 11, 12, 13, 16, 17, 18, 19, 24, 26, 27, 29, 30, 31, 33, 34], "valid": [0, 5, 9, 10, 11, 12, 14, 18, 19, 22], "perform": [0, 3, 4, 5, 6, 8, 9, 11, 14, 15, 16, 17, 19, 26, 27, 28, 29, 30, 32, 34], "afterward": [0, 5, 11, 16], "One": [0, 9, 16, 17, 19], "improv": [0, 1, 5, 6, 7, 11, 12, 33], "parallel": [0, 2, 5, 6, 12, 15], "just": [0, 6, 8, 11, 15, 16, 17, 20, 22, 23, 29, 31, 34], "python": [0, 1, 2, 3, 5, 6, 15, 18, 22, 30, 33], "nativ": 0, "multiprocess": 0, "librari": [0, 1, 2, 23, 30, 33], "abstract": [0, 4, 5, 6, 8, 9, 10, 11, 14, 16, 17, 29, 34], "act": [0, 5, 9, 23], "wrapper": [0, 5, 6, 9, 11, 17, 19, 20, 23, 33], "around": [0, 5, 6, 8, 9, 11, 17, 23, 27], "anoth": [0, 5, 17], "automl": [0, 1, 2, 5, 11, 12, 24], "like": [0, 4, 5, 6, 7, 8, 10, 11, 12, 15, 17, 22, 23, 27, 28, 29, 31, 32, 33], "store": [0, 3, 5, 6, 15, 18, 19, 20, 22, 27, 31, 33, 34], "wrap": [0, 5, 9, 17, 33], "layered_model": 0, "lowest": [0, 11, 31], "level": [0, 4, 5, 6, 7, 8, 11, 12, 15, 16, 17, 19, 24], "hierarchi": [0, 5, 15, 17], "dirti": 0, "trick": 0, "right": [0, 3, 4, 6, 17, 23], "2": [0, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "duplic": [0, 5, 26, 27, 29], "between": [0, 2, 5, 6, 8, 11, 12, 16, 17, 22, 23, 27, 34], "3": [0, 6, 8, 9, 11, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "max_forecast_step": [0, 5, 7, 8, 10, 11, 27, 31, 32, 34], "base_model": [0, 5], "directli": [0, 3, 5, 9, 11, 15, 17, 19, 23, 27, 31], "distinct": [0, 5], "type": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 27, 28, 31, 32, 33, 34], "post_rul": [0, 6, 14, 29], "train_anom_scor": 0, "anom_scor": [0, 15, 27, 29, 34], "so": [0, 1, 3, 6, 7, 8, 11, 15, 17, 19, 23, 24, 27, 29, 31, 32, 33, 34], "simultan": [0, 6], "worthwhil": 0, "direct": [0, 6], "investig": 0, "stand": 0, "alon": 0, "except": [0, 6, 19, 23], "longer": 0, "pipelin": [0, 2, 31], "defer": [0, 15], "main": [0, 1, 6, 15, 32], "intellig": [0, 1], "time": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 33, 34], "seri": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34], "unifi": [1, 2], "interfac": [1, 2, 6, 7, 11], "model": [1, 2, 3, 4, 7, 8, 10, 12, 13, 14, 15, 17, 19, 21, 22, 25, 26, 30, 33], "dataset": [1, 2, 3, 11, 12, 19, 20, 21, 26, 28, 29, 30, 32, 33, 34], "multivari": [1, 3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 21, 22, 23, 33], "along": [1, 6, 16], "standard": [1, 2, 4, 5, 6, 7, 8, 11, 14, 15, 16, 17, 18, 21, 28, 29, 31, 32, 34], "pre": [1, 2, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 24, 27, 29, 31, 34], "process": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 25, 27, 28, 29, 31, 33, 34], "post": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 14, 21, 27, 28, 34], "layer": [1, 2, 6, 9, 11], "sever": [1, 6, 8], "modul": [1, 2, 5, 6, 11, 13, 15, 33], "eas": 1, "visual": [1, 2, 3, 13, 21, 22, 24, 26, 30], "interpet": 1, "hyperparamet": [1, 3, 5, 6, 9, 11, 27, 31], "tune": [1, 8, 11], "ensembl": [1, 2, 5, 11, 27, 31, 32], "provid": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 22, 23, 24, 27, 29, 31, 33, 34], "uniqu": [1, 17], "framework": [1, 4, 11, 30, 33], "simul": [1, 2, 4, 21, 28, 32], "live": [1, 2, 4, 21, 28, 32], "deploy": [1, 2, 3, 4, 21, 28, 32], "train": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 25, 26, 29, 30, 33, 34], "product": [1, 15, 17], "aim": 1, "engin": 1, "research": 1, "stop": [1, 5, 11, 12], "solut": 1, "rapidli": 1, "specif": [1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34], "benchmark": [1, 4, 6, 18, 19, 22, 26], "multipl": [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 15, 16, 17, 19, 20, 34], "consist": [1, 8, 11, 22, 23], "sub": [1, 2, 4, 11, 17, 18, 23], "packag": [1, 2, 18, 30, 33], "implement": [1, 2, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 29, 34], "core": [1, 5, 17, 18, 23, 33], "ts_dataset": [1, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "loader": [1, 18, 19, 20, 22, 26, 30], "load": [1, 3, 5, 6, 11, 19, 20, 21, 23, 28, 32], "panda": [1, 2, 5, 7, 9, 12, 15, 17, 18, 19, 22, 23, 24, 25, 27, 29, 31, 34], "datafram": [1, 2, 6, 8, 9, 11, 12, 15, 17, 18, 19, 23, 27, 29, 31, 34], "accompani": [1, 17], "metadata": [1, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34], "pypi": 1, "pip": [1, 18], "salesforc": [1, 11], "sourc": [1, 15, 19, 20], "clone": [1, 15], "repo": [1, 15, 23], "edit": [1, 5, 18, 19, 20], "mode": [1, 9, 18, 19, 20], "addit": [1, 3, 5, 6, 8, 9, 10, 11, 14, 15, 16, 17, 27, 31, 33], "option": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 27, 29, 31, 33], "depend": [1, 11, 15, 31], "dashboard": [1, 2], "gui": [1, 2, 3], "spark": [1, 2], "comput": [1, 2, 4, 5, 6, 8, 9, 10, 11, 15, 16, 17, 27, 29, 30, 31, 34], "backend": 1, "pyspark": [1, 2, 15], "deep": [1, 5, 6, 11, 12, 17], "root": [1, 4, 12, 15, 18, 19, 20, 22], "directori": [1, 3, 5, 10, 15, 18, 19, 20, 22, 27, 31, 34], "everi": [1, 4, 5, 6, 9, 11, 16, 28, 31, 34], "initi": [1, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 21, 23, 26, 29, 30, 34], "extern": 1, "our": [1, 3, 4, 15, 22, 23, 27, 29, 31, 33, 34], "openmp": 1, "conda": 1, "pleas": [1, 11, 17, 18, 19, 20, 23], "c": [1, 4, 17, 19, 24, 25, 27, 29, 31, 34], "forg": 1, "lightgbm": [1, 11], "configur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 24, 27, 29, 31], "environ": 1, "mac": 1, "homebrew": 1, "brew": 1, "libomp": 1, "libari": 1, "avail": [1, 14, 16, 19, 31], "lgbmforecast": [1, 11], "part": [1, 16, 17, 29, 34], "defaultforecast": [1, 2, 5, 30, 32], "java": [1, 6, 15], "kit": 1, "jdk": 1, "ubuntu": 1, "sudo": 1, "apt": 1, "openjdk": 1, "11": [1, 4, 19, 22, 23, 27, 29, 31, 33, 34], "o": [1, 17, 22, 23, 27, 31, 33], "tap": 1, "adoptopenjdk": 1, "cask": 1, "adoptopenjdk11": 1, "found": [1, 6, 12, 15, 19, 20], "path": [1, 15, 22, 23, 27, 31, 33], "java_hom": 1, "randomcutforest": [1, 6], "defaultdetector": [1, 2, 5, 26, 28], "easiest": [1, 18], "web": 1, "great": 1, "quickli": [1, 2], "experi": [1, 2], "own": [1, 2, 5, 8, 17], "custom": [1, 4, 9, 15, 18, 19, 20, 21, 33], "m": [1, 2, 3, 4, 5, 11, 12, 15, 16, 17, 23], "command": [1, 3, 15], "line": [1, 6, 8, 15, 24, 27, 29, 31, 33, 34], "view": 1, "http": [1, 3, 4, 6, 8, 11, 12, 15, 19, 20], "localhost": [1, 3], "8050": [1, 3], "resourc": [1, 15], "recommend": [1, 6, 7, 11, 15], "link": [1, 2, 3, 15], "read": [1, 15, 17, 18, 29, 34], "about": [1, 7, 8, 11, 15, 33, 34], "structur": [1, 27, 31], "repres": [1, 5, 6, 7, 9, 10, 11, 12, 15, 17, 18, 19, 27, 31], "here": [1, 4, 5, 6, 8, 15, 19, 22, 23, 24, 27, 28, 29, 31, 32, 33, 34], "look": [1, 6, 14, 22, 31], "architectur": [1, 6], "better": [1, 3, 14, 17, 19, 30, 32, 33], "other": [1, 3, 5, 9, 11, 16, 17, 27, 29, 31, 34], "transform": [1, 2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 27, 29, 31, 32, 34], "post_process": [1, 2, 4, 6, 27, 28, 29, 34], "plot": [1, 2, 6, 7, 8, 11, 24, 25, 26, 27, 29, 31, 34], "util": [1, 2, 4, 5, 6, 7, 11, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "easi": [1, 33], "subpackag": [1, 2], "advanc": [1, 22, 24], "variant": [1, 8, 9, 11, 17, 34], "index": [1, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 32, 33, 34], "search": [1, 5], "page": 1, "associ": [2, 7, 11, 16], "under": [2, 15, 22, 27, 31], "share": [2, 5, 11, 27, 31], "special": [2, 5, 6, 7, 11, 27], "good": [2, 9], "start": [2, 4, 7, 11, 14, 15, 16, 17, 18, 19, 20, 23, 25, 27, 31, 33], "change_point": [2, 5, 6], "those": [2, 8, 10, 11, 15, 17, 19, 20, 23, 31], "forecast_bas": [2, 5, 6, 27, 34], "adapt": [2, 8, 11, 27, 34], "residu": [2, 6, 8, 34], "predict": [2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34], "valu": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "timestamp": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 22, 23, 26, 27, 29, 31, 33, 34], "autom": [2, 4, 10, 17, 19], "app": [2, 3, 33], "api": [2, 17, 18, 23, 27, 28, 29, 31, 32, 33, 34], "integr": [2, 8, 11, 15], "run": [2, 5, 6, 11, 12, 15, 21, 24, 27, 31, 33], "analysi": [2, 19], "callabl": [2, 5, 10, 14, 16, 17], "interpret": [2, 14, 27, 29], "z": [2, 6, 7, 8, 11, 14, 16, 27, 29, 34], "deviat": [2, 6, 7, 16, 28, 29], "random": [2, 6, 11, 12, 16, 17, 27], "reduc": [2, 5, 17, 27], "noisi": [2, 27], "filter": [2, 6, 7, 8, 14, 29, 34], "sequenc": [2, 4, 5, 6, 7, 8, 9, 11, 12, 17, 20, 25, 28, 29], "task": [2, 4, 15, 33], "timeseri": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "bayesian": [2, 7, 9, 17], "conjug": [2, 7, 17], "prior": [2, 7, 8, 11, 17, 33], "reconcili": [2, 15, 17], "hierarch": [2, 15, 17], "univariatetimeseri": [2, 4, 6, 9, 11, 13, 16, 17, 21, 34], "transpar": [2, 17, 23, 27, 31], "inter": [2, 5, 7, 8, 11], "oper": [2, 6, 16, 27], "check": [2, 3, 17, 30, 33], "doc": [2, 11, 17, 18, 23, 27, 29, 31, 34], "list": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 22, 23, 34], "defaultdetectorconfig": [2, 5, 26], "defaultforecasterconfig": [2, 5, 30], "factori": [2, 10, 27, 28, 31, 32], "modelfactori": [2, 5, 27, 28, 31, 32], "instantiate_or_copy_model": [2, 5], "modelbas": [2, 4, 5, 6, 9, 10, 11], "multipletimeseriesmodelmixin": [2, 5, 6], "deep_bas": 2, "optim": [2, 5, 6, 9, 11, 12, 17, 27, 30], "lossfunct": [2, 5, 11], "deepconfig": [2, 5, 11], "torchmodel": [2, 5, 11], "deepmodelbas": [2, 5, 11], "layeredmodelconfig": [2, 5, 9], "layeredmodel": [2, 5, 9, 10], "layereddetector": [2, 5], "layeredforecast": [2, 5], "layeredforecastingdetector": [2, 5], "up": [2, 6, 8, 9, 11, 17, 19, 24, 32, 33], "k8": 2, "pandas_udf": 2, "primit": 2, "moving_averag": [2, 25, 27], "bound": [2, 4, 13], "miscellan": 2, "anom": [2, 6, 8, 13], "data_io": 2, "ht": [2, 15], "ts_gener": 2, "conj_prior": [2, 7], "istat": 2, "conveni": [3, 5], "test": [3, 4, 12, 13, 15, 18, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34], "launch": 3, "dash": [3, 27, 29, 34], "open": [3, 20, 27, 31], "creat": [3, 5, 6, 9, 10, 14, 15, 16, 17, 22, 23, 27, 28, 29, 31, 32, 34], "folder": 3, "home": 3, "analyz": [3, 19], "three": [3, 16, 17, 19, 27, 31], "tab": 3, "manag": [3, 6, 15], "upload": 3, "statist": [3, 4, 6, 9, 11, 12, 17], "download": [3, 18, 19], "click": 3, "drag": 3, "drop": [3, 6, 17], "design": [3, 6], "docker": [3, 15], "allow": [3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 19, 27, 31, 32], "local": [3, 6, 11, 15, 29, 34], "machin": [3, 19], "csv": [3, 15, 17, 19, 20, 22, 23, 26, 27, 29, 33], "format": [3, 5, 11, 12, 15, 19, 20, 21, 31], "where": [3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20, 22, 23, 27, 29, 31, 33], "column": [3, 8, 11, 15, 17, 18, 19, 20, 22, 23, 27, 29, 33, 34], "integ": [3, 8, 11, 15, 17, 23], "unix": [3, 17, 22, 23, 31], "millisecond": [3, 17, 23], "datetim": [3, 12, 17, 23, 34], "string": [3, 6, 8, 11, 12, 17, 22], "1970": [3, 17, 22, 34], "01": [3, 5, 6, 7, 12, 16, 22, 23, 27, 28, 31, 32, 33, 34], "00": [3, 6, 17, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34], "button": 3, "show": [3, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34], "figur": [3, 6, 7, 8, 11, 13, 24, 25, 27, 29, 31, 34], "hand": 3, "side": [3, 16], "length": [3, 4, 6, 8, 9, 11, 16, 17, 23, 24, 33], "std": [3, 6], "compress": 3, "zip": [3, 17], "second": [3, 4, 12, 14, 17, 19, 22, 23, 31], "choos": [3, 7, 9, 14, 23], "algorithm": [3, 4, 6, 7, 9, 11, 17, 19, 27, 28, 29, 31, 32], "accord": [3, 8, 10, 11, 15, 17, 27, 31], "fraction": [3, 5, 8, 10, 11, 12, 19, 20], "separ": [3, 5, 8, 10, 11, 19], "screenshot": 3, "15": [3, 19, 22, 23, 24, 27, 28, 29, 31, 33, 34], "last": [3, 5, 6, 7, 8, 11, 15, 17, 31, 33], "85": 3, "label": [3, 4, 5, 6, 8, 10, 12, 13, 14, 16, 18, 19, 20, 25, 27, 28, 29, 34], "ignor": [3, 4, 5, 7, 11, 17, 19], "isolationforest": [3, 6, 22, 27, 28], "determin": [3, 8, 9, 11, 12, 14, 16, 29], "applic": [3, 8, 15, 17, 33], "entir": [3, 5, 7, 10, 12, 15, 27, 31], "procedur": [3, 9], "begin": [3, 6, 8, 11, 16, 17, 22, 26, 28, 29, 30, 31, 32, 34], "algorithm_nam": 3, "result": [3, 4, 5, 6, 8, 9, 11, 14, 16, 19, 29, 31, 33], "tabl": 3, "third": 3, "target": [3, 4, 6, 7, 8, 9, 10, 11, 15, 22, 32, 33], "whose": [3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 22, 29, 33, 34], "known": [3, 5, 7, 8, 11, 12, 16], "priori": [3, 5, 7, 8, 11, 12, 33], "arima": [3, 5, 6, 12, 31, 32], "autoet": [3, 5, 22], "take": [3, 4, 5, 6, 9, 10, 11, 16, 17, 23, 28, 31, 33, 34], "finish": 3, "evaluatorconfig": 4, "train_window": [4, 6, 27, 31], "retrain_freq": [4, 22, 27, 28, 31, 32], "cadenc": [4, 28, 31, 32], "defin": [4, 5, 6, 11, 15, 16, 19, 21, 24, 29], "float": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17], "maximum": [4, 6, 7, 8, 9, 10, 11, 14, 19, 27, 28, 30, 31, 32], "durat": [4, 6], "would": [4, 5, 7, 8, 9, 10, 11, 12, 15, 16, 17, 27, 29, 33], "onc": [4, 5, 6, 14, 15, 27, 32], "obtain": [4, 6, 11, 15, 17, 23, 26, 27, 28, 30, 31, 32, 34], "horizon": [4, 8, 11, 31, 32], "union": [4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 23], "dateoffset": [4, 5, 17], "produc": [4, 6, 11, 15, 16, 17, 27, 31], "retrain": [4, 27, 28, 31], "equal": [4, 16, 17, 19, 23, 29, 34], "to_dict": [4, 5, 6, 10, 14, 16, 17], "evaluatorbas": 4, "histor": [4, 6, 11, 27, 31], "get_predict": [4, 27, 28, 31, 32], "were": [4, 5, 14, 27], "increment": [4, 11, 17], "manner": [4, 27, 28, 32], "subclass": [4, 5, 10, 11, 16], "protocol": [4, 27], "v": [4, 6, 34], "config_class": [4, 5, 6, 7, 8, 9, 10, 11, 29, 34], "alia": [4, 5, 6, 7, 8, 9, 10, 11, 14, 17], "default_train_kwarg": 4, "dict": [4, 5, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 27, 29, 32], "default_retrain_kwarg": 4, "train_val": [4, 27, 28, 31, 32], "test_val": [4, 27, 28, 31, 32], "train_kwarg": [4, 27], "retrain_kwarg": [4, 27], "appropri": [4, 12, 15, 16, 17, 27, 29, 32, 34], "compar": [4, 6, 8, 14, 27, 31], "ground": [4, 8, 14, 27, 31, 34], "truth": [4, 8, 14, 24, 27, 31, 34], "keyword": [4, 5, 6, 9, 10, 14, 16, 19, 20, 31], "argument": [4, 5, 6, 9, 10, 14, 15, 16, 19, 20, 23, 29, 31, 33], "subsequ": 4, "tupl": [4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 23, 34], "train_result": [4, 5, 6, 8, 9, 11, 28, 32], "pretrain": 4, "ground_truth": [4, 14, 24, 26, 27, 28, 29, 30, 31, 32, 34], "accumul": 4, "scoretyp": [4, 14], "enum": [4, 5, 6, 7, 9, 14, 17, 27, 31], "fals": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34], "posit": [4, 6, 11, 16, 26, 27], "neg": [4, 6, 26], "technic": [4, 27], "report": [4, 27, 29], "prefer": 4, "revis": [4, 27], "adjust": [4, 9, 11, 16, 17, 27], "pointwis": [4, 14], "pointadjust": [4, 14], "revisedpointadjust": [4, 14], "tsadscoreaccumul": [4, 14], "num_tp_anom": 4, "num_tp_pointwis": 4, "num_tp_point_adj": 4, "num_fn_anom": 4, "num_fn_pointwis": 4, "num_fn_point_adj": 4, "num_fp": 4, "num_tn": 4, "tp_score": 4, "fp_score": 4, "tp_detection_delai": 4, "tp_anom_dur": 4, "anom_dur": 4, "maintain": [4, 6], "summari": 4, "precis": [4, 6, 7, 14, 26, 27, 28, 29, 31], "score_typ": [4, 14], "recal": [4, 7, 14, 26, 27, 28, 29], "f1": [4, 14, 26, 27, 28, 29], "f_beta": [4, 14], "beta": [4, 5, 14, 16, 17], "mean_time_to_detect": [4, 14], "mean_detected_anomaly_dur": 4, "mean_anomaly_dur": 4, "nab_scor": [4, 14], "tp_weight": 4, "fp_weight": [4, 14], "fn_weight": [4, 14], "tn_weight": 4, "nab": [4, 18, 19, 26, 27, 29], "weight": [4, 5, 6, 8, 10, 11, 15, 16, 17], "error": [4, 5, 6, 7, 8, 9, 11, 15, 16, 17, 23, 30, 31, 32, 34], "section": [4, 19, 22], "ii": 4, "arxiv": [4, 11], "org": [4, 11], "pdf": [4, 15, 17], "1510": 4, "03336": 4, "high": [4, 6, 7, 9, 16, 27], "cost": [4, 7, 27], "sensit": 4, "recenc": [4, 8, 11, 16, 17], "accuraci": [4, 7, 11], "measur": [4, 6, 30], "profil": 4, "github": [4, 6, 11, 15, 19, 20], "com": [4, 6, 8, 11, 12, 19, 20], "numenta": [4, 18, 19, 26], "blob": 4, "master": [4, 20], "json": [4, 5, 16, 27, 31], "reward": 4, "low": [4, 12, 27], "rate": [4, 5, 6, 8, 11, 23, 33], "22": [4, 14, 23, 27, 28, 34], "complet": [4, 27, 28, 29, 34], "accumulate_tsad_scor": [4, 14], "max_early_sec": [4, 14], "max_delay_sec": [4, 14], "whether": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 23, 28, 31, 32, 33], "correspond": [4, 6, 7, 8, 11, 15, 17, 27, 31], "nonzero": [4, 27, 29], "amount": [4, 7, 15, 16, 27, 31], "occur": [4, 6, 7, 11, 17, 27], "incid": 4, "earli": [4, 5, 11, 12, 19], "end": [4, 6, 8, 11, 16, 17], "dure": [4, 6, 11, 18], "permit": [4, 19], "exactli": [4, 7, 8, 11, 16], "tsadmetr": [4, 10, 14, 26, 27, 28, 29, 34], "enumer": [4, 6, 9, 14], "partial": [4, 14, 17, 21, 33], "form": [4, 5, 12, 14, 17], "f": [4, 6, 14, 15, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "kwarg": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20, 27, 29, 32, 33, 34], "meantimetodetect": [4, 14, 26, 27, 28], "functool": [4, 14, 17, 33], "pointwisef1": [4, 14], "pointwiseprecis": [4, 14], "pointwiserecal": [4, 14], "pointadjustedf1": [4, 14, 28], "pointadjustedprecis": [4, 14, 28], "pointadjustedrecal": [4, 14, 28], "nabscor": [4, 14], "nabscorelowfn": [4, 14], "nabscorelowfp": [4, 14], "f2": [4, 14], "f5": [4, 14], "5": [4, 6, 8, 11, 12, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34], "tsadevaluatorconfig": [4, 27, 28], "tsadevalu": [4, 27, 28], "count": [4, 12], "desir": [4, 6, 8, 11, 16, 17, 19, 20, 34], "typic": [4, 27, 31], "anomaly_label": [4, 5, 6, 8, 13, 14, 26, 27, 29], "post_rule_train_config": [4, 5, 6, 8, 27], "suppli": [4, 5, 6, 8, 16, 17, 31], "continu": [4, 6, 29, 31], "sens": 4, "forecastscoreaccumul": 4, "insampl": [4, 30], "period": [4, 6, 9, 12, 16, 24], "ub": [4, 5, 11, 30], "lb": [4, 5, 11, 30], "target_seq_index": [4, 5, 6, 7, 8, 10, 11, 12, 27, 31, 32, 33, 34], "mse": [4, 5, 6, 10, 11, 31], "msi": [4, 30], "non": [4, 5, 9, 14, 15, 16, 17, 19, 20], "season": [4, 5, 6, 8, 11, 12, 19, 22, 24], "wherea": 4, "upper": [4, 13, 16], "95": [4, 14, 16, 30], "interv": [4, 16, 17, 19, 24, 27, 30, 31], "lower": [4, 7, 11, 13, 14, 16, 27, 30], "check_before_ev": 4, "mae": 4, "absolut": [4, 6, 10, 12, 14, 16], "hat": [4, 8, 11, 17, 31, 34], "frac": [4, 6, 9, 16, 17, 27, 31, 34], "sum_": [4, 8, 11, 17, 31, 34], "y_t": [4, 16, 31, 34], "_t": [4, 16, 31, 34], "marr": 4, "rang": [4, 5, 7, 8, 11, 12, 16, 17, 19], "100": [4, 6, 8, 9, 11, 16, 20, 22, 24, 25, 27, 28, 30, 31, 32], "cdot": [4, 8, 11, 16, 17], "left": [4, 6, 16, 17, 23], "max_t": 4, "min_t": 4, "rmse": [4, 31, 32], "squar": 4, "sqrt": [4, 17], "smape": [4, 24, 25, 30, 31, 32, 33, 34], "symmetr": [4, 31, 34], "percentag": 4, "200": [4, 22, 31, 33, 34], "rmspe": 4, "percent": [4, 34], "mase": 4, "scale": [4, 6, 8, 11, 16, 17, 27, 30, 31], "n": [4, 6, 8, 9, 11, 15, 16, 17, 23, 25, 26], "x_t": [4, 6, 8, 11, 17], "x_": [4, 8, 11, 16, 17], "qualiti": [4, 27, 30, 31, 33], "l": [4, 9, 16, 24, 25, 27, 29, 31, 34], "u": [4, 16, 17, 31], "u_t": 4, "l_t": 4, "accumulate_forecast_scor": 4, "forecastmetr": [4, 10, 24, 25, 30, 31, 32, 33, 34], "origin": [4, 5, 7, 10, 11, 12, 15, 16, 17, 19, 23, 25, 31], "forecastevalu": [4, 31, 32], "formul": [4, 8, 11], "forecastevaluatorconfig": [4, 31, 32], "whenev": [4, 18], "broadli": 5, "subset": [5, 6, 11, 17, 18, 19, 20, 23, 25, 26, 27, 29, 30, 31, 34], "modelclass": [5, 27, 31], "potenti": [5, 6, 11, 16, 32], "dirnam": [5, 10, 27, 31], "save_config": [5, 10], "binari": [5, 17, 27, 31], "pkl": 5, "disk": 5, "heavili": [5, 11], "exploit": 5, "serializ": 5, "instanc": [5, 8, 11, 23], "overrid": [5, 6, 9, 16, 17, 19, 29, 34], "remain": [5, 15], "fulli": 5, "user": [5, 6, 9, 11, 14, 16, 17, 19, 23, 24, 26, 27, 29, 31, 33], "who": 5, "aren": [5, 23], "familiar": 5, "instanti": [5, 6, 16], "workflow": [5, 12], "windstat": [5, 27, 28], "windstatsconfig": [5, 6, 27], "kind": [5, 7], "equival": [5, 8, 11, 16, 17], "model1a": 5, "wind_sz": [5, 6, 27], "60": [5, 14, 16, 17, 22, 27, 29, 31, 33], "model1b": 5, "tmp": 5, "model2a": 5, "model2b": 5, "dbl": 5, "spectral_residu": 5, "stat_threshold": 5, "zm": [5, 28], "isolation_forest": [5, 27], "random_cut_forest": 5, "autoencod": 5, "vae": 5, "dagmm": 5, "lstm_ed": 5, "deep_point_anomaly_detector": 5, "bocpd": [5, 6], "sarima": [5, 6, 9, 12, 24, 34], "et": [5, 6, 9, 15, 17], "prophet": [5, 6, 9, 25, 27, 31, 33], "sklearn_bas": 5, "smoother": [5, 8, 31], "vector_ar": 5, "tree": [5, 6, 17, 20], "deep_ar": 5, "autoform": 5, "etsform": 5, "inform": [5, 8, 9, 15, 16, 23, 33], "autoprophet": [5, 11], "autosarima": [5, 11, 21], "time_featur": [5, 11], "rolling_window_dataset": 5, "early_stop": 5, "autosarima_util": 5, "balanc": [5, 26, 30], "speed": [5, 9, 24], "n_thread": 5, "model_kwarg": [5, 9], "str": [5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20], "5min": [5, 12, 17, 19], "1h": [5, 6, 17, 31], "1d": [5, 12, 32], "etc": [5, 6, 11, 12, 18, 19, 22], "int": [5, 6, 7, 8, 9, 11, 12, 15, 16, 17, 34], "thread": [5, 6, 11], "Will": [5, 9], "try": [5, 9, 19, 20, 23, 29, 34], "effici": [5, 11, 12, 26, 30], "train_data": [5, 6, 7, 8, 9, 10, 11, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34], "train_config": [5, 6, 8, 9, 10, 11, 24, 29, 34], "unsupervis": [5, 6, 8, 27], "supervis": [5, 6, 8], "anomal": [5, 6, 8, 16, 19, 22, 27], "max": [5, 6, 8, 9, 10, 11, 17, 25, 28], "amongst": [5, 7, 8, 10, 11, 12], "supports_exog": [5, 9, 11], "independ": [5, 7, 8, 11, 17, 23], "classmethod": [5, 6, 10, 14, 16, 17], "get_model_class": 5, "return_unused_kwarg": [5, 6], "model_path": [5, 27, 31], "load_byt": 5, "obj": [5, 17], "transformbas": [5, 6, 8, 10, 11, 16], "filenam": [5, 18, 19, 20], "_skipped_kei": [5, 6, 10], "from_dict": [5, 6, 10, 14, 16, 17], "config_dict": [5, 6], "construct": [5, 6, 15], "unus": [5, 6], "arg": [5, 6, 33], "get_unused_kwarg": 5, "rescal": [5, 16], "lag": [5, 6, 7, 8, 9, 11, 12, 16], "itself": [5, 10, 17, 29, 31, 34], "require_even_sampl": [5, 6, 7, 9, 10, 11, 29, 34], "bool": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 23, 29], "assum": [5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 19, 20, 22, 29, 31, 34], "require_univari": [5, 6, 7, 9, 10, 11, 29], "auto_align": 5, "align": [5, 6, 8, 11, 16, 17, 21, 25, 34], "give": [5, 16, 17, 27], "gap": [5, 14, 17], "last_train_tim": [5, 6, 7], "common": [5, 7, 10, 11], "necessari": [5, 7, 10, 11, 17, 29, 34], "transform_time_seri": 5, "context": [5, 6, 11, 31], "immedi": [5, 6, 7, 8, 11], "preced": [5, 6, 7, 8, 11, 13, 16], "param": [5, 6, 11, 13, 16, 17, 24, 29], "to_byt": [5, 10], "convert": [5, 6, 8, 9, 10, 11, 12, 16, 17, 23, 31], "byte": [5, 10], "from_byt": 5, "multiple_train_data": [5, 6], "adam": [5, 7, 11], "lr": [5, 6, 11], "001": [5, 6], "9": [5, 14, 19, 22, 23, 24, 27, 29, 30, 31, 33, 34], "999": 5, "ep": 5, "1e": [5, 7], "08": [5, 22, 23, 27, 33, 34], "weight_decai": [5, 11], "amsgrad": 5, "foreach": 5, "maxim": [5, 12, 28, 29], "captur": [5, 6, 29], "differenti": 5, "fuse": 5, "torch": [5, 11], "adamw": [5, 11], "sgd": [5, 11], "momentum": 5, "dampen": 5, "nesterov": 5, "adagrad": [5, 11], "lr_decai": 5, "initial_accumulator_valu": 5, "rmsprop": [5, 11], "alpha": [5, 12, 16, 17], "99": [5, 14, 25, 32], "center": 5, "loss": [5, 6, 8, 11, 16, 28], "size_averag": 5, "reduct": 5, "nn": [5, 11], "mseloss": 5, "l1": [5, 11], "l1loss": 5, "huber": [5, 11], "delta": [5, 11, 12, 16, 17], "huberloss": 5, "guassian_nl": [5, 11], "06": [5, 27, 29, 34], "gaussiannllloss": 5, "batch_siz": [5, 6, 11, 12], "32": [5, 11, 23, 28, 31], "num_epoch": [5, 6, 11], "loss_fn": [5, 11], "clip_gradi": [5, 11], "use_gpu": [5, 11], "ts_encod": [5, 11, 12], "h": [5, 8, 11, 12, 15, 33], "0001": [5, 11], "valid_fract": [5, 11, 12], "early_stop_pati": [5, 11], "pytorch": 5, "batch": [5, 6, 11, 12, 17, 27], "size": [5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 19, 27], "stochast": [5, 11, 31], "total": [5, 11, 12, 19], "epoch": [5, 6, 11, 12], "l2": [5, 11], "clip": [5, 11, 16], "gradient": [5, 6, 11], "norm": [5, 11, 24, 25, 30], "gpu": [5, 11], "thre": [5, 11], "devic": [5, 11], "cpu": [5, 11], "instead": [5, 6, 9, 11, 12, 14, 17, 23, 27, 29, 33], "encod": [5, 6, 11, 12], "vector": [5, 11, 12, 16, 17, 23, 33], "secondli": [5, 11, 12], "minut": [5, 6, 11, 12, 14, 26, 27], "hourli": [5, 8, 9, 11, 12, 18, 20, 24, 25, 30, 31, 32, 34], "d": [5, 8, 9, 11, 12, 17, 24, 33], "daili": [5, 6, 8, 11, 12, 20], "b": [5, 8, 11, 12, 16, 17], "busi": [5, 11, 12, 20], "dai": [5, 6, 8, 11, 12, 23, 26, 27, 28, 29, 32, 33], "w": [5, 8, 11, 12, 16, 17, 33, 34], "weekli": [5, 6, 8, 11, 12, 15, 20, 27, 33], "monthli": [5, 6, 11, 12, 20], "decai": [5, 11, 16], "penalti": [5, 11], "scriptmodul": [5, 11], "forward": [5, 7, 11, 16], "past": [5, 8, 11, 12, 31, 33], "past_timestamp": [5, 11], "future_timestamp": [5, 11], "overridden": [5, 9, 11, 22], "although": [5, 11], "recip": [5, 11], "within": [5, 6, 11, 14, 16, 22, 31], "sinc": [5, 7, 9, 11, 23, 27, 29, 31], "former": [5, 11], "care": [5, 11, 34], "regist": [5, 11], "hook": [5, 11], "latter": [5, 11], "silent": [5, 11, 33], "deep_model_class": [5, 11], "to_gpu": 5, "move": [5, 8, 11, 16, 17, 25], "to_cpu": 5, "often": 5, "heart": 5, "retain": [5, 6, 14, 16, 23, 27], "attribut": 5, "becom": [5, 17], "de": 5, "synchron": 5, "model_config": 5, "overal": [5, 6, 8, 11], "set_season": [5, 9, 11], "resolv": 5, "seasonalitymodel": [5, 9, 11], "detectorbas": [5, 6, 8, 10, 15, 29], "top": [5, 11], "doe": [5, 16, 17, 27], "As": [5, 22, 29], "hold": 5, "detectorconfig": [5, 6, 8, 10, 29, 34], "compos": [5, 14, 16, 17], "transformsequ": [5, 16, 25, 27], "self": [5, 11, 16, 17, 29, 33, 34], "invert_transform": [5, 7, 8, 10, 11, 25, 27, 31], "return_iqr": [5, 11], "quartil": [5, 7, 8, 11], "bar": [5, 11, 15, 17, 31], "return_prev": [5, 11, 34], "stderr": [5, 8, 11, 17, 31, 32], "iqr": [5, 11, 13], "25th": [5, 11], "percentil": [5, 11, 14, 16], "75th": [5, 11], "merlion": [6, 7, 8, 9, 10, 11, 12, 18, 21, 24, 25, 28, 29, 32, 33, 34], "detectorclass": 6, "stage": 6, "boolean": 6, "enable_calibr": [6, 7, 8, 10, 11, 27], "enable_threshold": [6, 7, 8, 10, 11, 27], "enabl": [6, 7, 8, 10, 11], "recent": [6, 11, 27, 29, 31, 33, 34], "though": [6, 8, 22, 31, 33], "extra": [6, 11, 15], "Not": [6, 7, 8, 11, 15, 19, 20], "forecast_to_anom_scor": [6, 8], "get_figur": [6, 7, 8, 11], "plot_anomali": [6, 7, 8, 26, 27, 29, 34], "plot_anomaly_plotli": [6, 8], "plot_forecast": [6, 7, 8, 11, 24, 30, 31, 34], "plot_forecast_plotli": [6, 8, 11], "arimadetectorconfig": [6, 8], "arimadetector": [6, 8], "sarimadetectorconfig": [6, 8], "sarimadetector": [6, 8], "etsdetectorconfig": [6, 8], "etsdetector": [6, 8], "prophetdetectorconfig": [6, 8, 27], "prophetdetector": [6, 8, 27], "msesdetectorconfig": [6, 8], "msesdetector": [6, 8], "online_upd": [6, 8], "changekind": [6, 7], "auto": [6, 7, 8, 11, 24, 25, 27, 31], "levelshift": [6, 7, 16], "trendchang": [6, 7, 16], "bocpdconfig": [6, 7], "change_kind": [6, 7], "n_seen": [6, 7], "cp_prior": [6, 7], "min_likelihood": [6, 7], "max_scor": [6, 7, 8, 10, 11, 14, 27], "1000": [6, 7, 8, 10, 11, 13, 23, 27], "uncalibr": [6, 7, 8, 10, 11, 14], "raw": [6, 8, 11, 14, 20, 27, 29], "anomscorecalibr": [6, 14, 27], "nocalibrationdetectorconfig": [6, 7, 8], "never": [6, 32], "filter_scor": [6, 7, 8, 27, 29, 34], "plot_time_series_prev": [6, 7, 8, 11, 27, 31, 34], "fig": [6, 8, 11, 13, 24, 25, 26, 27, 29, 30, 31, 34], "fit": [6, 7, 8, 9, 11, 24], "might": [6, 9, 11], "onto": 6, "figsiz": [6, 8, 11, 13, 24, 25, 27, 29, 31, 34], "600": [6, 8, 11, 13, 22], "ax": [6, 8, 11, 13, 24, 25, 26, 27, 29, 30, 31, 34], "matplotlib": [6, 8, 11, 13, 24, 25, 26, 27, 29, 30, 31, 34], "graph": [6, 8], "overlaid": [6, 8], "color": [6, 8, 13], "pixel": [6, 8, 11, 13], "plotli": [6, 8, 11, 13], "multipletimeseriesdetectormixin": 6, "element": [6, 11, 17, 19], "dynam": 6, "baselin": 6, "trend": [6, 7, 8, 9, 11, 16, 19], "dynamicbaselineconfig": 6, "fixed_period": 6, "dynamicbaselin": 6, "t0": [6, 13, 17, 23], "tf": [6, 13, 17, 23], "datapoint": [6, 11, 16], "inclus": [6, 16, 17], "serv": [6, 15], "scope": [6, 15], "roll": [6, 12], "window": [6, 11, 12, 13, 14, 16, 17, 19, 23, 27, 28, 32, 33], "bucket": [6, 15], "determine_train_window": 6, "week": [6, 8, 11, 12, 19, 27, 28, 31], "month": [6, 12, 23], "exclus": 6, "has_fixed_period": 6, "get_relev": 6, "get_baselin": 6, "new_data": [6, 11], "get_baseline_figur": 6, "jitter_time_stamp": 6, "segment": 6, "belong": [6, 17], "day_delta": 6, "hour_delta": 6, "min_delta": [6, 12], "zero_delta": 6, "wind_delta": 6, "window_kei": 6, "weekday_kei": 6, "day_kei": 6, "segment_kei": 6, "30": [6, 16, 17, 23, 25, 27, 29, 34], "max_dai": [6, 27], "4": [6, 8, 9, 11, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "memori": 6, "weekdai": 6, "id": [6, 15, 19], "slide": [6, 12, 28, 32], "come": [6, 26], "divid": [6, 16, 19, 26, 27, 30], "against": [6, 12, 19], "histori": [6, 7, 8, 11], "minimum": [6, 9, 11, 12, 14, 15, 17], "spectral": 6, "spectralresidualconfig": 6, "local_wind_sz": 6, "21": [6, 23, 25, 27, 28, 29, 34], "q": [6, 8, 9, 11, 16, 24], "estimated_point": 6, "predicting_point": 6, "spectralresidu": 6, "previou": 6, "salienc": 6, "averag": [6, 8, 10, 11, 16, 17, 25, 31, 34], "pad": [6, 16], "calcul": [6, 11, 16], "r": [6, 12, 17, 26, 31, 33, 34], "log": [6, 17, 24], "mathscr": 6, "textbf": 6, "_": [6, 8, 11, 16, 17, 19, 20, 25], "s_m": 6, "convolut": 6, "fourier": [6, 8, 11], "overlin": 6, "reason": [6, 23], "later": [6, 19], "middl": 6, "ren": 6, "al": [6, 15, 17], "2019": [6, 19], "spectrum": 6, "invers": [6, 7, 8, 10, 11, 16, 21], "simpl": [6, 9, 14, 21], "static": [6, 9, 11, 17, 19, 27], "statthresholdconfig": [6, 29], "statthreshold": [6, 28, 29], "zmsconfig": 6, "n_lag": 6, "lag_infl": 6, "exponenti": [6, 8, 11, 16, 17, 31], "distant": 6, "chosen": 6, "math": 6, "mathemat": 6, "role": 6, "inflat": [6, 8, 11, 17, 31], "distrust": 6, "toward": 6, "higher": [6, 7, 27], "less": [6, 12, 14, 16], "text": [6, 8, 11, 16, 17], "let": [6, 8, 11, 16, 17, 22, 23, 27, 29, 31, 33, 34], "space": [6, 7, 8, 9, 11, 16], "z_k": 6, "k": [6, 9, 11, 15, 16, 17, 24, 25, 27, 29, 31, 33, 34], "delta_k": 6, "p": [6, 8, 9, 11, 15, 16, 17, 24, 26], "z_": [6, 16], "argmax": 6, "_k": 6, "spike": [6, 16, 19], "dip": [6, 16, 19], "sharp": 6, "down": 6, "magnitud": [6, 8, 11, 29], "distinguish": [6, 22], "normalci": 6, "grow": 6, "zeroth": 6, "seen": [6, 7, 8, 11], "kth": 6, "8": [6, 11, 17, 19, 22, 23, 24, 25, 27, 29, 31, 33, 34], "16": [6, 7, 22, 23, 27, 29, 31, 33, 34], "assign": [6, 11, 15, 16, 17], "lag_scal": 6, "adjust_z_scor": 6, "classic": [6, 8, 11, 27, 28, 31, 32], "isol": [6, 27, 29], "forest": [6, 11, 27, 29], "isolationforestconfig": [6, 27], "max_n_sampl": [6, 27], "n_estim": [6, 11, 27], "n_job": [6, 11], "propos": 6, "liu": 6, "2008": 6, "aw": [6, 15], "cut": 6, "jvmsingleton": 6, "gatewai": 6, "randomcutforestconfig": 6, "seed": [6, 11, 12, 27], "512": [6, 11], "thread_pool_s": 6, "further": [6, 31], "pool": 6, "travers": 6, "submit": [6, 15], "larger": 6, "shingl": [6, 16, 27], "throughput": 6, "stream": [6, 27, 33], "sampler": 6, "java_param": 6, "refin": 6, "guha": 6, "2016": 6, "autoencoderconfig": 6, "hidden_s": [6, 11], "layer_s": 6, "25": [6, 11, 22, 23, 26, 27, 29, 31], "sequence_len": 6, "50": [6, 22, 23, 25, 27, 29, 31, 33], "latent": 6, "hidden": [6, 11], "mlp": [6, 11], "decod": [6, 11], "correl": [6, 11], "estim": [6, 7, 8, 11, 12, 13, 17, 31, 34], "joint": 6, "paper": 6, "pierr": 6, "baldi": 6, "2012": [6, 11, 22, 33], "vaeconfig": 6, "encoder_hidden_s": 6, "decoder_hidden_s": 6, "latent_s": 6, "kld_weight": 6, "dropout_r": 6, "num_eval_sampl": 6, "1024": 6, "regular": [6, 17, 23, 27, 31], "kl": 6, "diverg": 6, "term": [6, 8, 11], "dropout": [6, 11], "variat": 6, "reconstruct": 6, "diederik": 6, "kingma": 6, "bay": [6, 17], "2013": [6, 27, 29], "gaussian": 6, "mixtur": 6, "dagmmconfig": 6, "gmm_k": 6, "lambda_energi": 6, "lambda_cov_diag": 6, "005": 6, "256": 6, "energi": [6, 20], "covari": 6, "diagon": 6, "entri": [6, 17, 29], "jointli": 6, "fashion": 6, "bo": [6, 11], "zong": 6, "qi": 6, "song": 6, "martin": 6, "renqiang": 6, "min": [6, 9, 11, 17], "wei": 6, "cheng": 6, "cristian": 6, "lumezanu": 6, "daeki": 6, "cho": 6, "haifeng": 6, "chen": [6, 19], "2018": [6, 15, 17], "n_epoch": 6, "shuffl": [6, 12], "collect": [6, 19, 22, 23, 34], "lstm": [6, 11], "lstmedconfig": 6, "20": [6, 22, 23, 27, 29, 31, 34], "n_layer": 6, "lstmed": 6, "represent": [6, 17, 18, 19], "network": [6, 11], "deeppointanomalydetectorconfig": 6, "deeppointanomalydetector": 6, "signal": 6, "taget": 6, "pair": [6, 14, 17, 19, 20], "itert": 6, "regard": 6, "intuit": 6, "dnn": 6, "global": 6, "pattern": 6, "overfit": 6, "therefor": 6, "arpit": 6, "devansh": 6, "closer": 6, "memor": 6, "icml": 6, "2017": [6, 8, 11], "rahaman": 6, "nasim": 6, "On": 6, "bia": [6, 16, 27, 31], "neural": 6, "onlin": [7, 8, 11, 17], "conjprior": [7, 17], "mvnorminvwishart": [7, 17], "shift": [7, 11, 16, 19], "bayesianmvlinreg": [7, 17], "linear": [7, 17], "forecasterconfig": [7, 8, 11, 34], "belief": 7, "frequent": [7, 11], "changepoint": 7, "delai": [7, 14], "lookback": 7, "discard": 7, "hypothes": 7, "complex": 7, "By": [7, 8, 10, 11, 15, 16, 17, 23, 24, 27, 29], "proper": [7, 8, 10, 11, 16], "mackai": 7, "2007": [7, 17], "too": [7, 9, 19, 31], "much": [7, 23], "posterior": [7, 8, 11, 17], "freshli": 7, "piecewis": 7, "far": [7, 29], "increas": [7, 8, 11, 27], "decreas": 7, "likelihood": [7, 9, 30], "return_exog": [7, 10, 11], "over": [7, 8, 9, 11, 12, 17, 18, 19, 23, 27, 33], "plot_forecast_uncertainti": [7, 8, 11, 24, 30, 31], "uncertainti": [7, 8, 11, 13, 17, 31, 34], "said": 8, "overlai": 8, "axi": [8, 11, 13, 17], "autoregress": [8, 11, 12], "seasonal_ord": [8, 9, 11, 24], "exog_aggregation_polici": [8, 10, 11, 27, 31, 33], "aggregationpolici": [8, 10, 11, 16, 17, 33], "exog_missing_value_polici": [8, 10, 11, 27, 31, 33], "missingvaluepolici": [8, 10, 11, 16, 17, 33], "zfill": [8, 10, 11, 17, 27, 31, 33], "arimaconfig": [8, 11, 31], "ma": [8, 9, 11, 24, 25], "polici": [8, 10, 11, 16, 17], "aggreg": [8, 10, 11, 15, 16, 17], "endogen": [8, 10, 11, 33], "imput": [8, 10, 11, 16, 17, 33], "miss": [8, 10, 11, 15, 16, 17, 23, 27, 31, 33], "24": [8, 11, 20, 23, 24, 27, 28, 29, 32], "sarimaconfig": [8, 11], "cycl": [8, 11], "hour": [8, 11, 12, 30, 31], "damped_trend": [8, 9, 11], "seasonal_period": [8, 9, 11], "refit": [8, 11], "etsconfig": [8, 11], "flexibl": [8, 11], "trait": [8, 11], "mul": [8, 9, 11], "otext": [8, 11, 12], "fpp2": [8, 11, 12], "taxonomi": [8, 11], "html": [8, 11, 12, 20], "damp": [8, 9, 11], "slower": [8, 11, 21], "smooth": [8, 11, 16, 31], "faster": [8, 11], "facebook": [8, 9, 11, 27, 31], "yearly_season": [8, 11, 27, 31], "weekly_season": [8, 11, 27, 31], "daily_season": [8, 11, 27, 31], "seasonality_mod": [8, 11, 27, 31], "holidai": [8, 11, 27, 31, 33], "uncertainty_sampl": [8, 11, 27, 31], "prophetconfig": [8, 11, 25, 31, 33], "taylor": [8, 11], "letham": [8, 11], "yearli": [8, 11, 20], "activ": [8, 11, 19], "year": [8, 11, 12, 23], "deactiv": [8, 11], "pd": [8, 11, 17, 18, 19, 22, 23, 24, 25, 29, 34], "date": [8, 11, 12, 17, 22, 33], "lower_window": [8, 11], "upper_window": [8, 11], "prior_scal": [8, 11], "draw": [8, 11, 16, 24, 31], "multi": [8, 11, 31], "max_backstep": [8, 11, 31], "recency_weight": [8, 11, 17, 31], "accel_weight": [8, 11, 31], "optimize_acc": [8, 11, 31], "eta": [8, 11, 31], "rho": [8, 11, 31], "phi": [8, 11, 31], "msesconfig": [8, 11, 31], "backstep": [8, 11], "l_": [8, 11], "p_": [8, 11], "v_": [8, 11, 16], "a_": [8, 11], "ema": [8, 11, 17], "_w": [8, 11, 17], "delta_": [8, 11], "p_b": [8, 11], "_b": [8, 11], "z_b": [8, 11], "rwse": [8, 11], "Then": [8, 11, 12, 15, 16, 17, 18, 33], "th": [8, 9, 11, 15, 17, 33], "anchor": [8, 11, 14, 27], "xhat": [8, 11], "delta_hat": [8, 11], "acceler": [8, 11], "veloc": [8, 11, 16], "correct": [8, 9, 11, 17], "control": [8, 11, 16, 33], "made": [8, 11, 19], "due": [8, 11, 16, 27, 29], "velciti": [8, 11], "rest": [8, 11], "complement": [8, 11], "velocity_error": [8, 11], "loss_error": [8, 11], "factor": [8, 11, 16], "expon": [8, 11], "softmax": [8, 11], "automlmixin": 9, "generate_theta": 9, "theta": [9, 11, 17], "iter": [9, 12, 17, 18, 19, 23], "candid": [9, 14], "consider": 9, "evaluate_theta": 9, "set_theta": 9, "oftentim": 9, "informationcriterion": 9, "aic": 9, "akaik": 9, "criterion": 9, "mathrm": [9, 16, 17, 31, 34], "2k": 9, "ln": [9, 16], "bic": 9, "aicc": 9, "small": [9, 11], "paramt": 9, "icconfig": 9, "information_criterion": [9, 12], "mix": 9, "best": [9, 10, 14, 24, 31, 32], "icautomlforecast": 9, "get_ic": 9, "hyperparamt": 9, "autoetsconfig": 9, "auto_season": [9, 24], "auto_error": 9, "auto_trend": 9, "auto_damp": 9, "periodicity_strategi": 9, "periodicitystrategi": 9, "acf": 9, "additive_onli": 9, "allow_multiplicative_trend": 9, "restrict": 9, "pval": 9, "05": [9, 11, 12, 22, 23, 27, 29, 33, 34], "max_lag": 9, "seasonalityconfig": 9, "strategi": 9, "infinit": 9, "decid": 9, "signific": 9, "seasonalitylay": [9, 11], "autoprophetconfig": 9, "multi_season": 9, "exist": [9, 17], "autosarimaconfig": [9, 24], "auto_pqpq": [9, 24], "auto_d": [9, 24], "maxit": [9, 12, 24], "max_k": 9, "max_dur": 9, "3600": [9, 16, 17, 31], "approxim": [9, 21], "approx_it": [9, 24], "differenc": [9, 12, 29], "numer": [9, 12, 18, 19, 20], "coupl": [9, 22], "avoid": [9, 16], "stepwis": 9, "long": [9, 11, 19, 22, 24], "150": 9, "off": 9, "12": [9, 19, 22, 23, 25, 27, 29, 31, 32, 33, 34], "action": 9, "seach": 9, "stepwsi": 9, "predefin": [9, 24], "pqpq": 9, "detect_season": 9, "find": [9, 14, 17, 19, 20], "arbitrari": [9, 11, 24, 27, 31], "numpi": [9, 11, 12, 17, 24, 27, 29, 31, 34], "arrai": [9, 11, 12, 17], "highest": 9, "autocorrel": 9, "idea": [9, 12], "seasonalit": 9, "helper": [9, 16], "flatten": [9, 12], "gridsearch": 9, "param_valu": 9, "grid": [9, 17, 20], "skip": [9, 15, 16, 31], "inadmiss": 9, "impos": 9, "ensembleconfig": 10, "rational": 10, "behind": [10, 33], "place": 10, "combinerbas": 10, "ensembletrainconfig": 10, "valid_frac": 10, "per_model_train_config": 10, "ensemblebas": 10, "did": [10, 19, 27], "models_us": 10, "train_valid_split": 10, "transformed_train_data": 10, "get_max_common_horizon": 10, "train_combin": 10, "all_model_out": 10, "save_only_used_model": 10, "abs_scor": [10, 14, 27, 31], "_combine_univari": 10, "__call__": [10, 16], "_check_dim": 10, "requires_train": 10, "set_model_us": 10, "get_model_us": 10, "ndarrai": [10, 15, 17], "rank": 10, "metricweightedmean": 10, "proport": 10, "combinerfactori": 10, "detectorensembleconfig": [10, 27], "per_model_threshold": 10, "detectorensembletrainconfig": 10, "per_model_post_rule_train_config": 10, "detectorensembl": [10, 27, 28], "forecasterensembleconfig": [10, 31], "verbos": [10, 31], "forecasterexogconfig": [10, 11], "forecasterensembl": [10, 31, 32], "resample_time_stamp": [10, 11], "forecasterclass": 11, "evenli": [11, 29, 34], "target_nam": 11, "support_multivariate_output": 11, "transform_exog_data": 11, "batch_forecast": 11, "time_stamps_list": 11, "time_series_prev_list": 11, "forecast_stderr": 11, "forecast_lb": 11, "forecast_ub": 11, "interest": [11, 15, 17], "datetimeindex": [11, 12, 17, 23], "exog_data_prev": 11, "deepforecasterconfig": 11, "n_past": [11, 12], "deepforecast": 11, "sklearn": 11, "regress": [11, 17], "sklearnforecasterconfig": 11, "maxlag": 11, "prediction_strid": 11, "sklearnforecast": 11, "stride": [11, 16, 27], "next": [11, 14, 15, 17, 22, 26, 29, 30, 31, 33, 34], "style": 11, "popular": [11, 27, 31, 33], "add_season": [11, 25], "max_scal": 11, "msestrainconfig": 11, "process_loss": 11, "tune_recency_weight": 11, "init_batch_sz": 11, "train_cad": 11, "init": 11, "veri": 11, "encount": 11, "mechan": 11, "concept": [11, 17, 21, 23], "back": [11, 23, 31], "timestep": 11, "velocity_hat": 11, "acceleration_hat": 11, "seper": 11, "xhat_b": 11, "dot": [11, 15, 24, 31], "max_horizon": 11, "acquir": 11, "xhat_h": 11, "marginalize_xhat_h": 11, "deltastat": 11, "update_veloc": 11, "vel": 11, "update_acceler": 11, "acc": 11, "update_loss": 11, "constant": [11, 17, 24], "bigger": 11, "aggress": 11, "deltaestim": 11, "stat": [11, 17, 24, 30], "acc_max_scal": 11, "scale_loss": 11, "vel_err": 11, "pos_err": 11, "neg_err": 11, "loss_err": 11, "vectorarconfig": 11, "vectorar": 11, "randomforestforecasterconfig": 11, "min_samples_split": 11, "max_depth": 11, "random_st": 11, "_treeensembleforecasterconfig": 11, "randomforestforecast": 11, "leav": [11, 15, 19, 27], "depth": 11, "bag": 11, "meta": 11, "classifi": 11, "decis": 11, "extratreesforecasterconfig": 11, "extratreesforecast": 11, "lgbmforecasterconfig": 11, "learning_r": 11, "boost": 11, "num": 11, "light": 11, "lgbm": 11, "fast": 11, "readthedoc": 11, "io": [11, 15], "en": 11, "latest": [11, 33], "deeparconfig": 11, "num_hidden_lay": 11, "lags_seq": 11, "num_prediction_sampl": 11, "deepar": 11, "probabilist": 11, "recurr": 11, "ab": 11, "1704": 11, "04110": 11, "rnn": 11, "deeparmodel": 11, "implementaion": 11, "get_lagged_subsequ": 11, "sequence_length": 11, "subsequences_length": 11, "tensor": 11, "unroll_encod": 11, "calculate_loss": 11, "sampling_decod": 11, "begin_st": 11, "mean_sampl": 11, "deeparforecast": 11, "autoformerconfig": 11, "moving_avg": 11, "encoder_input_s": 11, "decoder_input_s": 11, "num_encoder_lay": 11, "num_decoder_lay": 11, "start_token_len": 11, "model_dim": 11, "emb": 11, "timef": 11, "gelu": 11, "n_head": 11, "fcn_dim": 11, "2048": 11, "decomposit": 11, "2106": 11, "13008": 11, "thuml": 11, "token": 11, "nlp": 11, "sep": 11, "eo": 11, "attent": 11, "relu": 11, "sigmoid": 11, "head": 11, "autoformermodel": 11, "enc_self_mask": 11, "dec_self_mask": 11, "dec_enc_mask": 11, "autoformerforecast": 11, "etsformerconfig": 11, "top_k": 11, "2202": 11, "01381": 11, "deriv": 11, "etsformermodel": 11, "jitter": 11, "etsformerforecast": 11, "informerconfig": 11, "distil": 11, "beyond": [11, 15], "07436": 11, "informermodel": 11, "informerforecast": 11, "transformerconfig": 11, "transformermodel": 11, "transformerforecast": 11, "timefeatur": 12, "secondofminut": 12, "minuteofhour": 12, "hourofdai": 12, "dayofweek": 12, "dayofmonth": 12, "dayofyear": 12, "monthofyear": 12, "weekofyear": 12, "time_features_from_frequency_str": 12, "freq_str": 12, "12h": [12, 31], "get_time_featur": 12, "rollingwindowdataset": 12, "n_futur": 12, "ts_index": 12, "whole": [12, 27, 31], "emploi": 12, "past_np": 12, "past_tim": 12, "future_np": 12, "future_tim": 12, "shape": [12, 17, 23], "impli": [12, 17], "keep": [12, 16, 17, 31], "slice": [12, 17, 23], "perturb": 12, "n_window": 12, "n_valid": 12, "n_train": 12, "n_point": 12, "collate_batch": 12, "earlystop": 12, "patienc": 12, "7": [12, 19, 22, 23, 24, 25, 27, 29, 31, 32, 34], "monitor": [12, 19], "quantiti": 12, "qualifi": 12, "save_best_state_and_dict": 12, "val_loss": 12, "load_best_model": 12, "suitabl": 12, "2d": [12, 17], "detect_maxiter_sarima_model": 12, "exog": [12, 33], "seas_seasonalstationaritytest": 12, "strength": 12, "mstl": 12, "stl": 12, "deal": 12, "nsdiff": 12, "max_d": 12, "sea": 12, "kpss_stationaritytest": 12, "xx": 12, "kpss": 12, "null": 12, "hypothesi": 12, "stationari": [12, 17], "altern": [12, 22, 23, 29, 31], "least": [12, 16], "ndiff": 12, "plot_anom": [13, 26, 27, 29], "pink": 13, "plot_anoms_plotli": 13, "yhat": 13, "yhat_lb": 13, "yhat_ub": 13, "y_prev": 13, "yhat_prev": 13, "yhat_prev_lb": 13, "yhat_prev_ub": 13, "yhat_color": 13, "portion": [13, 16, 17, 23], "t_split": 13, "get_i": 13, "get_yhat": 13, "get_yhat_iqr": 13, "titl": 13, "metric_nam": [13, 27, 31], "label_alia": 13, "entiti": 13, "y_hat": 13, "plot_plotli": 13, "mtsfigur": 13, "reshap": 14, "sparsifi": [14, 27], "togeth": 14, "postrulebas": 14, "primarili": 14, "accept": [14, 19, 33], "state_dict": [14, 16, 17], "anomaly_scor": 14, "postrulefactori": 14, "get_post_rule_class": 14, "postrulesequ": 14, "monoton": 14, "divers": [14, 20], "retrain_calibr": 14, "practic": 14, "alm_threshold": [14, 27, 28, 29, 34], "unsup_quantil": 14, "min_allowed_scor": 14, "80": [14, 22, 33], "90": [14, 22], "98": [14, 33], "quantil": 14, "lead": 14, "achiev": [14, 27, 31, 33], "to_simple_threshold": 14, "aggregatealarm": [14, 27, 28, 29, 34], "min_alm_in_window": [14, 27], "alm_window_minut": [14, 27], "alm_suppress_minut": [14, 27, 29], "120": [14, 27], "fire": [14, 26, 27, 29], "alarm": [14, 26, 27, 29], "alarm_window_minut": 14, "suppress": [14, 29], "mark": 14, "threshold_class": 14, "window_sec": 14, "suppress_sec": 14, "get_adaptive_thr": 14, "hist_gap_thr": 14, "bin_sz": 14, "histogram": 14, "bin": 14, "item": [14, 15, 17, 23, 33, 34], "insid": 14, "avg": 14, "adaptivethreshold": 14, "default_hist_gap_thr": 14, "adaptiveaggregatealarm": 14, "spark_app": 15, "dockerfil": 15, "kubernet": 15, "cluster": 15, "cover": [15, 28, 31, 32, 33], "instal": [15, 18, 19, 20, 29, 34], "git": 15, "minikub": 15, "major": 15, "cloud": 15, "googl": 15, "gke": 15, "amazon": 15, "ek": 15, "helm": 15, "quick": 15, "guid": [15, 27, 31], "googlecloudplatform": 15, "kubectl": 15, "namespac": 15, "sparkjobnamespac": 15, "shell": [15, 33], "daemon": 15, "eval": 15, "env": 15, "imag": 15, "publish": 15, "built": [15, 17], "registri": 15, "gcr": 15, "ecr": 15, "commun": 15, "gc": 15, "s3": 15, "jar": 15, "maven": 15, "opt": 15, "spec": 15, "sparkconf": 15, "block": [15, 21], "driver": 15, "extraclasspath": 15, "executor": 15, "yaml": 15, "templat": 15, "yml": 15, "walmart_mini": [15, 22, 33], "sale": [15, 19, 20, 33], "alloc": 15, "storag": 15, "topic": 15, "reader": 15, "hadoop": 15, "connector": 15, "tsid_col_nam": 15, "__ts_id": 15, "reli": 15, "add_tsid_column": 15, "read_dataset": 15, "file_format": 15, "time_col": [15, 17, 19, 20], "index_col": [15, 19, 20, 22, 33], "data_col": [15, 17, 19, 20, 22], "sparksess": 15, "downstream": 15, "write_dataset": 15, "df": [15, 17, 23, 33], "create_hier_dataset": 15, "agg_dict": 15, "append": [15, 16], "sold": [15, 33], "sum": [15, 17, 27], "matrix": [15, 17], "udf": 15, "sql": 15, "applyinpanda": 15, "target_col": 15, "predict_on_train": 15, "group": 15, "nan": [15, 17, 22, 23, 33], "_err": 15, "train_test_split": 15, "hier_matrix": 15, "trace": [15, 17], "wickramasuriya": [15, 17], "mint_reconcili": [15, 17], "orrespond": 15, "np": [15, 17, 24, 27, 29, 31, 34], "replac": [15, 17], "reconcil": [15, 17], "happen": [15, 16], "invertibletransformbas": 16, "introduc": 16, "transformfactori": 16, "inial": 16, "serial": 16, "compat": [16, 17], "pseudo": 16, "transformcl": 16, "get_transform_class": 16, "possibli": 16, "requires_inversion_st": 16, "perfect": 16, "_invert": 16, "intermedi": 16, "destroi": 16, "prevent": 16, "proper_invers": 16, "identity_invers": 16, "accident": 16, "alwai": [16, 18, 19], "noth": 16, "stateless": 16, "stack": [16, 17, 33], "sequenti": 16, "compris": [16, 17, 23], "held": 16, "check_align": [16, 17, 33], "tell": 16, "adjac": [16, 17], "temporalresampl": [16, 25, 31, 32], "trainable_granular": [16, 31], "remove_non_overlap": [16, 17, 31], "aggregation_polici": [16, 17, 31], "missing_value_polici": [16, 17, 31], "interpol": [16, 17, 31], "tempor": 16, "overlap": [16, 17], "span": [16, 17], "3660": [16, 17], "3540": [16, 17], "downsampl": [16, 17, 33], "upsampl": [16, 17], "treat": [16, 22, 27, 31], "multivar_skip": [16, 27], "concret": [16, 23, 27, 31, 33], "t1": 16, "x1": [16, 17, 23], "t2": 16, "x2": [16, 23], "yield": [16, 17, 33], "perfectli": 16, "divis": 16, "value_t": 16, "movingaverag": [16, 25], "n_step": [16, 25], "movingpercentil": 16, "fewer": 16, "exponentialmovingaverag": [16, 17], "ci": 16, "un": 16, "unnorm": 16, "y_0": 16, "x_0": [16, 17], "y_i": 16, "y_": 16, "x_i": [16, 17], "ldot": [16, 17, 33], "confid": [16, 24, 30], "l_i": 16, "s_i": 16, "u_i": 16, "u_o": 16, "condfid": 16, "x_lb": 16, "x_ub": 16, "y_lb": 16, "y_ub": 16, "lagtransform": 16, "compute_lag": 16, "var": [16, 17], "absval": 16, "lose": 16, "sign": 16, "normalize_bia": [16, 27, 31], "normalize_scal": [16, 27, 29, 31], "scalar": [16, 17], "is_train": 16, "learnabl": 16, "minmaxnorm": [16, 25], "boxcoxtransform": [16, 25], "lmbda": 16, "box": [16, 25, 31], "cox": [16, 25], "power": [16, 20], "lowerupperclip": 16, "lie": 16, "inject": [16, 17, 19], "synthet": [16, 17, 18, 19, 22], "anom_prob": 16, "natural_bound": 16, "natrual": 16, "boundari": 16, "stai": 16, "random_is_anom": 16, "shock": [16, 19], "pos_prob": 16, "sd_rang": 16, "6": [16, 17, 19, 22, 23, 24, 25, 27, 29, 31, 33, 34], "anom_width_rang": 16, "persist_shock": 16, "tild": 16, "rwsd": 16, "sim": [16, 17], "unif": 16, "y_w": 16, "width": 16, "randomli": 16, "uniform": 16, "success": [16, 29], "random_sd_unit": 16, "random_anom_width": 16, "sudden": 16, "scale_rang": 16, "disturb": 16, "persist": 16, "thu": 16, "emul": 16, "v_t": 16, "random_scal": 16, "freq": [17, 19, 23, 33], "stuff": 17, "j": 17, "np_time_stamp": 17, "np_valu": 17, "concat": [17, 34], "bisect": [17, 23], "to_pd": [17, 23, 25, 27, 29, 30, 33, 34], "from_pd": [17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "__getitem__": [17, 18, 19], "__iter__": [17, 18, 19], "is_empti": 17, "empti": 17, "rtype": 17, "t_in_left": 17, "include_tf": 17, "exclud": [17, 29], "to_t": 17, "sai": 17, "exact": [17, 27, 31], "four": 17, "unnam": [17, 23], "constructor": [17, 23], "interoper": 17, "xn": 17, "xk": 17, "t_i": 17, "x1_i": 17, "xn_i": 17, "val_vector": 17, "queri": 17, "time_series_1": 17, "time_series_2": 17, "renam": 17, "mapper": 17, "is_align": [17, 23], "squeez": 17, "len": [17, 18, 19, 22, 23, 24, 31, 34], "to_csv": 17, "file_nam": 17, "check_tim": 17, "drop_nan": 17, "from_ts_list": 17, "ts_list": 17, "alignment_polici": 17, "alignpolici": 17, "fixedrefer": 17, "gcd": 17, "fixedgranular": 17, "outerjoin": 17, "innerjoin": 17, "intersect": 17, "assert_equal_timedelta": 17, "lambda": [17, 25, 33], "ffill": 17, "fill": [17, 33], "bfill": 17, "nearest": 17, "closest": 17, "to_replac": 17, "to_pd_datetim": [17, 34], "truncat": [17, 31], "to_offset": 17, "dt": 17, "to_timestamp": 17, "granularity_str_to_second": 17, "get_date_offset": 17, "infer_granular": 17, "return_offset": 17, "reindex_df": 17, "reindex": 17, "df_to_time_seri": 17, "timestamp_unit": 17, "data_io_decor": 17, "func": 17, "decor": 17, "docstr": 17, "csv_to_time_seri": 17, "err": [17, 33, 34], "sum_matrix": 17, "n_leav": 17, "strictli": 17, "leaf": 17, "di": 17, "reflect": [17, 27, 31], "timeseriesgener": 17, "x0": 17, "nois": 17, "mtrand": 17, "randomst": 17, "distort": 17, "tdelta": 17, "dimension": [17, 28, 32, 33], "deflat": 17, "return_t": 17, "generatorcompos": 17, "per_generator_nois": 17, "generatorconcaten": 17, "string_output": 17, "undergo": 17, "fundament": 17, "certain": [17, 31], "could": [17, 22, 33], "consecut": 17, "connect": 17, "abc": 17, "n_param": 17, "get_time_series_valu": 17, "process_time_seri": 17, "return_rv": 17, "return_upd": 17, "scipi": [17, 24, 30], "version": [17, 23, 30, 33], "scalarconjprior": 17, "betabernoulli": 17, "bernoulli": 17, "x_1": 17, "x_n": 17, "mathbb": [17, 31, 33, 34], "theta_posterior": 17, "norminvgamma": 17, "inversegamma": 17, "wikipedia": 17, "murphi": 17, "mathcal": 17, "mu_0": 17, "invgamma": 17, "n_0": 17, "mu_posterior": 17, "student": 17, "sigma2_posterior": 17, "sigma2": 17, "inversewishart": 17, "_d": 17, "invwishart": 17, "nu": 17, "sigma_posterior": 17, "bayesianlinreg": 17, "ordinari": 17, "m_0": 17, "b_0": 17, "lambda_0": 17, "t_1": 17, "t_n": 17, "row": [17, 22, 23, 27, 29, 33, 34], "ones": 17, "denot": 17, "w_": 17, "ol": 17, "lambda_n": 17, "w_n": 17, "w_0": 17, "alpha_n": 17, "alpha_0": 17, "beta_n": 17, "beta_0": 17, "posterior_explicit": 17, "pi": 17, "det": 17, "gamma": 17, "naiv": 17, "mid": 17, "geisser": 17, "1965": 17, "otim": 17, "v_0": 17, "kroneck": 17, "nu_n": 17, "nu_0": 17, "v_n": 17, "tw_n": 17, "nd": 17, "gamma_d": 17, "emphasi": 17, "add_batch": 17, "drop_batch": 17, "ex_valu": 17, "ex2_valu": 17, "ddof": 17, "moment": 17, "degre": 17, "freedom": 17, "mean_class": 17, "true_valu": 17, "corrected_valu": 17, "sd": 17, "se": 17, "recencyweightedvari": 17, "rwv": 17, "2_t": 17, "manipul": 18, "realawscloudwatch": [18, 19], "m4": [18, 20, 24, 25, 30, 31, 34], "anom_dataset": 18, "rootdir": [18, 19, 20, 22, 33], "path_to_nab": 18, "forecast_dataset": 18, "path_to_m4": 18, "basedataset": [18, 19, 20], "tsadbasedataset": [18, 19], "customdataset": [18, 19, 20, 22, 33], "customanomalydataset": [18, 19, 22], "review": [18, 19, 20, 29, 34], "get_dataset": [18, 19, 20], "max_lead_sec": [18, 19], "max_lag_sec": [18, 19], "metadata_col": [18, 19, 20], "check_ts_for_metadata": [18, 19, 20], "iopscompetit": [18, 19], "valid_subset": [18, 19, 20], "load_label": [18, 19], "base_ts_subset": [18, 19], "anomaly_subset": [18, 19], "ucr": [18, 19], "smd": [18, 19], "url": [18, 19, 20], "smap": [18, 19], "msl": [18, 19, 28], "energypow": [18, 20], "seattletrail": [18, 20, 32], "solarpl": [18, 20], "__len__": [18, 19], "trainval": [18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "larg": [18, 19, 22, 28], "lazili": 18, "tsad": 19, "dataset_nam": [19, 20], "nab_realawscloudwatch": 19, "signifi": 19, "someth": 19, "suit": 19, "purpos": [19, 21, 23, 28, 29, 32], "accur": [19, 20], "late": 19, "test_frac": [19, 20, 22, 33], "assume_no_anomali": [19, 22], "time_unit": [19, 20, 22], "throw": [19, 23], "fetch": [19, 20], "express": [19, 20, 22], "depart": [19, 20, 22], "dept": [19, 20, 22, 33], "col": [19, 20], "round": 19, "iop": 19, "competit": [19, 20], "ai": 19, "competition_detail": 19, "competition_id": 19, "29": [19, 22, 23, 25, 27, 31, 33, 34], "kpi": [19, 23], "gather": [19, 34], "tech": 19, "compani": 19, "alibaba": 19, "sogou": 19, "tencent": 19, "baidu": 19, "ebai": 19, "1min": 19, "prohibit": 19, "hard": 19, "35min": 19, "placehold": 19, "categor": 19, "domain": [19, 20], "artifici": 19, "artificialwithanomali": 19, "realadexchang": 19, "realknowncaus": [19, 26, 27, 29], "realtraff": 19, "realtweet": 19, "datafil": 19, "label_list": 19, "disallow": 19, "earlier": 19, "sythet": 19, "horizont": [19, 22], "upward_downward": [19, 22], "hexagon": 19, "ml": 19, "uc": 19, "riversid": 19, "archiv": 19, "hoang": 19, "anh": 19, "dau": 19, "eamonn": 19, "keogh": 19, "kaveh": 19, "kamgar": 19, "chin": 19, "chia": 19, "michael": 19, "yeh": 19, "yan": 19, "zhu": 19, "shaghayegh": 19, "gharghabi": 19, "chotirat": 19, "ann": 19, "ratanamahatana": 19, "yanp": 19, "bing": 19, "hu": 19, "nurjahan": 19, "begum": 19, "anthoni": 19, "bagnal": 19, "abdullah": 19, "mueen": 19, "gustavo": 19, "batista": 19, "classif": 19, "www": [19, 20], "edu": 19, "time_series_data_2018": 19, "server": 19, "internet": 19, "publicli": 19, "28": [19, 22, 23, 25, 27, 28, 31, 33], "33": [19, 22, 33], "netmanaiop": 19, "omnianomali": 19, "servermachinedataset": 19, "dropbox": 19, "x53ph5cru62kv0f": 19, "tar": 19, "gz": 19, "dl": 19, "soil": 19, "moistur": 19, "passiv": 19, "satellit": 19, "mar": 19, "scienc": 19, "laboratori": 19, "rover": 19, "realworld": 19, "public": 19, "world": 19, "expert": 19, "nasa": 19, "khundman": 19, "telemanom": 19, "uv9ojw353qwzqht": 19, "realli": 20, "m4_hourli": 20, "identifi": 20, "financi": 20, "econom": 20, "23": [20, 23, 27, 28, 34], "000": 20, "quarterli": 20, "48": [20, 22, 23, 24, 25, 27, 31], "359": 20, "227": 20, "414": [20, 24, 25], "mcompetit": 20, "usag": 20, "kaggl": 20, "robikscub": 20, "consumpt": 20, "seattl": 20, "trail": 20, "pedestrian": 20, "bike": 20, "traffic": 20, "citi": 20, "burk": 20, "gilman": 20, "num_column": 20, "solar": 20, "plant": 20, "nrel": 20, "gov": 20, "405": [20, 23], "broader": 21, "takeawai": 21, "gentl": 21, "introduct": 21, "quantit": [21, 26, 30], "prepar": 21, "suggest": [21, 29, 34], "proof": 21, "notebook": [22, 23, 24, 27, 29, 31, 34], "explain": [22, 23, 27, 29, 31, 34], "glob": 22, "anom_dir": 22, "join": [22, 23, 27, 31, 33], "synthetic_anomali": 22, "print": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "horizontal_dip_anomali": 22, "horizontal_level_anomali": 22, "horizontal_shock_anomali": 22, "horizontal_spike_anomali": 22, "horizontal_trend_anomali": 22, "seasonal_dip_anomali": 22, "seasonal_level_anomali": 22, "seasonal_shock_anomali": 22, "seasonal_spike_anomali": 22, "seasonal_trend_anomali": 22, "upward_downward_dip_anomali": 22, "upward_downward_level_anomali": 22, "upward_downward_shock_anomali": 22, "upward_downward_spike_anomali": 22, "upward_downward_trend_anomali": 22, "ipython": [22, 33], "displai": [22, 33], "read_csv": [22, 23], "928031": 22, "300": 22, "156620": 22, "390650": 22, "900": 22, "400804": 22, "1200": 22, "874490": 22, "9995": 22, "2998500": 22, "362724": 22, "9996": 22, "2998800": 22, "657373": 22, "9997": 22, "2999100": 22, "472341": 22, "9998": 22, "2999400": 22, "033154": 22, "9999": 22, "2999700": 22, "950466": 22, "10000": 22, "577883": 22, "059779": 22, "137609": 22, "743360": 22, "998400": 22, "388685": 22, "017828": 22, "196791": 22, "234555": 22, "111685": 22, "characterist": 22, "absent": 22, "75": 22, "18": [22, 23, 25, 27, 28, 30, 33, 34], "Its": [22, 31], "02": [22, 23, 27, 28, 29, 32, 33, 34], "04": [22, 23, 27, 32, 33, 34], "55": [22, 23, 25, 27, 28, 29], "17": [22, 23, 25, 27, 29, 31, 33, 34], "19": [22, 23, 25, 27, 28, 29, 32, 33, 34], "57": [22, 23, 28], "opportun": 22, "retail": [22, 33], "corresond": 22, "walmart": [22, 33], "weekly_sal": [22, 33], "temperatur": [22, 33], "fuel_pric": [22, 33], "markdown1": [22, 33], "markdown2": [22, 33], "markdown3": [22, 33], "markdown4": [22, 33], "markdown5": [22, 33], "cpi": [22, 33], "unemploy": [22, 33], "isholidai": [22, 33], "2010": [22, 33], "24924": 22, "42": [22, 27, 28, 31], "31": [22, 23, 27, 31, 33, 34], "572": [22, 33], "211": [22, 31, 33], "096358": 22, "106": 22, "46039": 22, "49": [22, 23, 25, 33], "38": [22, 33], "51": [22, 27, 28, 31], "548": [22, 33], "242170": 22, "41595": 22, "39": [22, 23, 27, 31, 33], "93": 22, "514": [22, 33], "289143": 22, "26": [22, 23, 25, 27, 31, 33], "19403": 22, "54": [22, 25], "46": [22, 23, 25, 27, 28, 33], "63": [22, 27], "561": [22, 33], "319643": 22, "03": [22, 23, 27, 32, 33, 34], "21827": 22, "625": [22, 33], "350143": 22, "2855": 22, "09": [22, 23, 25, 27, 28, 29, 31, 33, 34], "37104": [22, 33], "67": [22, 33], "79": [22, 33], "45": [22, 27, 29, 33], "666": [22, 33], "7106": [22, 33], "91": [22, 33], "65": [22, 33], "1549": [22, 33], "3946": [22, 33], "222": [22, 33], "616433": [22, 33], "565": [22, 33], "2856": 22, "36361": [22, 33], "70": [22, 33], "27": [22, 23, 25, 27, 28, 33], "617": [22, 33], "6037": [22, 33], "76": [22, 33], "3027": [22, 33], "37": [22, 28, 33], "3853": [22, 33], "40": [22, 27, 28, 29, 31, 33], "815930": [22, 33], "170": [22, 33], "2857": [22, 27], "35332": [22, 33], "34": [22, 28, 30, 33], "97": [22, 33], "601": [22, 33], "2145": [22, 33], "586": [22, 33, 34], "83": [22, 33], "10421": [22, 33], "223": [22, 33], "015426": [22, 33], "2858": 22, "35721": [22, 33], "68": [22, 33], "594": [22, 33], "4461": [22, 33], "89": [22, 33], "14": [22, 23, 25, 27, 29, 31, 33, 34], "1579": [22, 33], "2642": [22, 33], "059808": [22, 33], "2859": 22, "34260": [22, 33], "69": [22, 33], "506": [22, 33], "6152": [22, 33], "59": [22, 23, 31, 33], "129": [22, 33], "77": [22, 31, 33], "272": [22, 33], "2924": [22, 33], "078337": [22, 33], "2860": 22, "okai": 22, "69634": 22, "210": [22, 33], "752605": [22, 33], "324": [22, 33], "63393": 22, "897994": [22, 33], "66589": 22, "945160": [22, 33], "61875": 22, "975957": [22, 33], "67041": 22, "47": [22, 23, 25, 33], "006754": [22, 33], "57424": 22, "62955": 22, "63083": 22, "60502": 22, "63992": 22, "36": [22, 25, 32], "143": [22, 33], "plu": 22, "benchmark_anomali": 22, "7d": [22, 27], "data_root": 22, "data_kwarg": 22, "benchmark_forecast": 22, "throughout": 23, "think": 23, "timestamp_milli": 23, "kpi_label": 23, "1583140320000": 23, "667": 23, "118": [23, 25], "1583140380000": 23, "611": 23, "751": 23, "1583140440000": 23, "599": 23, "456": 23, "1583140500000": 23, "621": 23, "446": 23, "1583140560000": 23, "1418": 23, "234": [23, 33], "86802": 23, "1588376760000": 23, "874": 23, "214": 23, "86803": 23, "1588376820000": 23, "937": 23, "929": 23, "86804": 23, "1588376880000": 23, "1031": 23, "279": 23, "86805": 23, "1588376940000": 23, "1099": 23, "698": 23, "86806": 23, "1588377000000": 23, "935": 23, "86807": 23, "time_idx_df": 23, "to_datetim": [23, 25], "set_index": 23, "2020": 23, "13": [23, 27, 29, 31, 32, 34], "kpi_equival": 23, "__name__": [23, 27, 28, 31, 32, 33], "isinst": 23, "dtype": 23, "float64": 23, "lt": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "gt": [23, 26, 27, 29, 30, 33], "breviti": 23, "1583140320": 23, "1583140380": 23, "1583140440": 23, "1583140500": 23, "1583140560": 23, "datetime64": 23, "univaraiatetimeseri": 23, "approach": 23, "ordereddict": [23, 34], "time_series_list": 23, "time_series_dict": 23, "kpi_renam": 23, "recovered_time_idx_df": 23, "kpi1": 23, "kpi2": 23, "assert": 23, "illustr": [23, 27, 31], "not_align": 23, "value_1": 23, "value_k": 23, "thing": [23, 24, 27, 31], "isn": [23, 29, 31, 34], "runtimeerror": 23, "still": 23, "misalign": 23, "abhatnagar": [23, 26, 27, 29, 33], "desktop": [23, 26, 27, 29, 33], "672": 23, "userwarn": 23, "_union_": 23, "customiz": 23, "highlight": 23, "regardless": 23, "1166": 23, "819": 23, "1345": 23, "504": 23, "1061": 23, "391": 23, "1260": 23, "1202": 23, "009": 23, "1154": 23, "397": 23, "56": [23, 31], "1270": 23, "292": 23, "1160": 23, "761": 23, "58": [23, 25, 27], "1082": 23, "076": 23, "1167": 23, "297": 23, "38160": 23, "1583226720": 23, "07": [23, 27, 29, 34], "1132": 23, "564": 23, "1087": 23, "037": 23, "984": 23, "432": 23, "1085": 23, "008": 23, "1020": 23, "1440": 23, "1296": 23, "091": 23, "1323": 23, "743": 23, "1203": 23, "1278": 23, "720": 23, "1217": 23, "877": 23, "85376": 23, "1381": 23, "110": 23, "1807": 23, "039": 23, "1833": 23, "385": 23, "1674": 23, "412": 23, "1683": 23, "194": 23, "1431": 23, "hyper": 24, "pyplot": [24, 25, 26, 27, 29, 30, 31, 34], "plt": [24, 25, 26, 27, 29, 30, 31, 34], "basicconfig": 24, "info": [24, 25, 27, 31, 33], "test_data": [24, 25, 26, 27, 28, 29, 30, 31, 32, 34], "add_subplot": [24, 25, 27, 29, 31, 34], "111": [24, 25, 27, 29, 31, 34], "axvlin": [24, 25, 27, 29, 31, 34], "lw": [24, 27, 29, 31, 34], "799": 24, "18it": 24, "700": [24, 31, 34], "enough": 24, "config1": [24, 27, 31], "model1": [24, 27, 28, 31, 32], "train_pr": [24, 32], "train_err": 24, "forecast1": [24, 31], "stderr1": [24, 31], "smape1": [24, 31], "4f": [24, 26, 27, 28, 29, 30, 32], "4491": 24, "groud": 24, "auto_": 24, "config2": [24, 27, 31], "model2": [24, 27, 28, 29, 31, 32, 34], "forecast2": [24, 31], "stderr2": [24, 31], "smape2": [24, 31], "6991": 24, "config3": [24, 27, 31], "model3": [24, 27, 28, 31, 32], "enforce_stationar": 24, "enforce_invert": 24, "forecast3": [24, 31], "stderr3": [24, 31], "smape3": [24, 31], "5288": 24, "md": [25, 29, 33, 34], "861": 25, "84it": [25, 28, 32], "def": [25, 29, 31, 34], "get_model": 25, "eval_model": 25, "apply_invers": 25, "og_train": 25, "yhat_train": 25, "yhat_test": 25, "2f": [25, 33], "legend": 25, "No": 25, "cmdstanpi": [25, 27, 31, 33], "chain": [25, 27, 31, 33], "88": 25, "41": 25, "73": [25, 27], "boxcox": 25, "61": 25, "53": [25, 27], "1f": 25, "test_label": [26, 27, 28, 29], "ec2_request_latency_system_failur": [26, 27, 29], "kept": [26, 27, 29], "machine_temperature_system_failur": [26, 27, 29], "test_pr": [26, 28, 30, 32], "took": 26, "correctli": 26, "mttd": [26, 27, 28], "6667": [26, 27, 28, 29], "through": [27, 31], "1234": 27, "axessubplot": [27, 29], "train_label": [27, 29], "hous": [27, 31], "syntax": [27, 31], "alert": [27, 29], "event": [27, 29, 33], "ensemble_config": [27, 31], "train_scores_1": 27, "ntrain": [27, 31], "train_scores_2": 27, "post_rule_train_config_3": 27, "train_scores_3": 27, "ensemble_post_rule_train_config": 27, "train_scores_": 27, "scores_1": 27, "scores_1_df": 27, "iloc": [27, 29], "labels_1": 27, "labels_1_df": 27, "locat": 27, "challeng": 27, "424103": 27, "418938": 27, "484891": 27, "500257": 27, "449213": 27, "2014": [27, 29], "419456": 27, "415807": 27, "406724": 27, "427094": 27, "428348": 27, "19279": 27, "251397": 27, "35": [27, 29], "681691": 27, "914430": 27, "260543": 27, "738462": 27, "303482": 27, "233514": 27, "791805": 27, "535895": 27, "314500": 27, "850349": 27, "170855": 27, "537919": 27, "451974": 27, "550075": 27, "359105": 27, "175556": 27, "675433": 27, "005116": 27, "247573": 27, "701491": 27, "772563": 27, "810997": 27, "702972": 27, "781997": 27, "709952": 27, "698602": 27, "790835": 27, "748293": 27, "711750": 27, "800493": 27, "852493": 27, "748630": 27, "734366": 27, "750652": 27, "719052": 27, "853260": 27, "771522": 27, "825713": 27, "700873": 27, "scores_2": 27, "labels_2": 27, "scores_3": 27, "labels_3": 27, "scores_": 27, "labels_": 27, "fairli": [27, 31], "definit": 27, "1667": 27, "0000": [27, 29], "0270": 27, "0526": 27, "2000": 27, "3077": 27, "4000": 27, "5000": [27, 29], "abl": 27, "greatli": 27, "led": 27, "outcom": 27, "quit": [27, 34], "assist": [27, 31], "demonstr": [27, 29, 31, 33], "pprint": [27, 31], "makedir": [27, 31], "exist_ok": [27, 31], "isf": 27, "pp": [27, 31], "prettyprint": [27, 31], "model2_load": [27, 31], "model2_factory_load": [27, 31], "38992633996347176": 27, "4187750781361715": 27, "445336977389891": 27, "47974261897360404": 27, "5271631189090943": 27, "8301789920204418": 27, "032894437734716": 27, "2263155501877727": 27, "nest": [27, 31], "ve": [27, 29, 31, 34], "selector": [27, 31, 32], "selector_load": [27, 31], "selector_factory_load": [27, 31], "_override_models_us": [27, 31], "n_model": [27, 31], "0004858784421674658": 27, "4318659926885851": 27, "9774407588312237": 27, "4231054875246496": 27, "7393725195754337": 27, "4271291767175622": 27, "8542583534351245": 27, "00040425650796231867": 27, "5103916318368437": 27, "0369977090370754": 27, "5325298959635636": 27, "9215534761800885": 27, "2965340676146635": 27, "593068135229327": 27, "scenario": [27, 31], "choic": [27, 31], "deploi": 27, "train_scor": [27, 28], "test_scor": 27, "43": [27, 31, 33], "604800": 27, "5783700": 27, "1307785": 27, "29it": 27, "44": [27, 33], "1209600": 27, "551941": 27, "1814400": 27, "365146": 27, "12it": 27, "2419200": [27, 28], "339456": 27, "87it": 27, "52": 27, "3024000": 27, "291111": 27, "79it": 27, "3628800": 27, "269495": 27, "41it": 27, "4233600": 27, "206629": 27, "47it": 27, "84": 27, "4838400": 27, "188649": 27, "53it": 27, "94": 27, "5443200": 27, "166964": 27, "38it": 27, "193604": 27, "33it": 27, "5714": 27, "drift": 27, "_max": 28, "ensemble_": 28, "5998": 28, "6001": 28, "9659": 28, "8312": 28, "8935": 28, "9638": 28, "8192": 28, "8856": 28, "9620": 28, "8184": 28, "8844": 28, "1w": 28, "4w": 28, "4423680": 28, "101454": 28, "83it": [28, 31], "34157": 28, "67it": 28, "9522": 28, "8027": 28, "8711": 28, "160149": 28, "9666": 28, "8321": 28, "8943": 28, "6002": 28, "83276": 28, "94it": 28, "6532": 28, "28002": 28, "66it": [28, 32], "9453": 28, "8209": 28, "8787": 28, "minim": [29, 34], "instruct": [29, 34], "contribut": [29, 34], "awai": 29, "_default_transform": [29, 34], "smaller": [29, 30], "_default_threshold": 29, "__init__": [29, 33, 34], "clariti": 29, "superclass": 29, "super": [29, 33, 34], "_default_post_rule_train_config": 29, "That": [29, 34], "ll": [29, 34], "065700": 29, "097140": 29, "908860": 29, "892315": 29, "703186": 29, "041999": 29, "494303": 29, "234568": 29, "160902": 29, "055357": 29, "3403": 29, "notic": 29, "out": 29, "lot": [29, 33], "anom_label": 29, "520900": 29, "065935": 29, "825172": 29, "846644": 29, "050966": 29, "152393": 29, "771146": 29, "102446": 29, "023830": 29, "870839": 29, "19280": 29, "024196": 29, "012073": 29, "468464": 29, "124039": 29, "491421": 29, "819248": 29, "823173": 29, "822201": 29, "677379": 29, "300280": 29, "721": 29, "qualit": [29, 34], "aggegatealarm": 29, "anom_labels2": 29, "test_err": 30, "lib": [30, 33], "python3": [30, 33], "site": [30, 33], "statsmodel": 30, "604": 30, "convergencewarn": 30, "fail": 30, "converg": 30, "mle_retv": 30, "band": 30, "ppf": 30, "025": 30, "975": 30, "1944": 30, "9331": 30, "lvert": [31, 34], "rvert": [31, 34], "selector_config": 31, "forecast_": 31, "stderr_": 31, "500400": 31, "3420724": 31, "07it": 31, "1342155": 31, "82it": 31, "407983": 31, "30it": 31, "shown": 31, "sub_test_data": 31, "prefix": 31, "explicit": 31, "five": 31, "3f": [31, 34], "why": [31, 33], "attain": 31, "472": 31, "947": 31, "377": 31, "smape_": 31, "505": 31, "metric_valu": 31, "3927462062042695": 31, "993034179559698": 31, "33041679538694": 31, "create_evalu": 31, "scratch": 31, "6h": 31, "14d": 31, "black": 31, "model1_evalu": 31, "model1_train_result": 31, "model1_test_result": 31, "169200": 31, "13919": 31, "39it": 31, "014": 31, "142": 31, "828": 31, "ensemble_evalu": 31, "ensemble_train_result": 31, "ensemble_test_result": 31, "43200": 31, "4298": 31, "97it": 31, "86400": 31, "3994": 31, "129600": 31, "4108": 31, "92it": 31, "2979": 31, "61it": 31, "914": 31, "616": 31, "3rd": 32, "defaultforeacst": 32, "moreov": [32, 33], "pick": 32, "train_stderr": [32, 34], "31550400": 32, "328262": 32, "154110": 32, "26it": 32, "successfulli": 32, "5235": 32, "132": 32, "8147": 32, "2208": 32, "140": 32, "2771": 32, "31528800": 32, "255804": 32, "57it": 32, "0339": 32, "4165": 32, "121688": 32, "1032": 32, "112": 32, "2604": 32, "goal": 33, "x_k": 33, "know": 33, "condit": 33, "outsid": 33, "consum": 33, "price": 33, "unemployemnt": 33, "knowledg": 33, "markdown": 33, "39602": 33, "37984": 33, "38889": 33, "41137": 33, "74": 33, "39883": 33, "endog": 33, "earliest": 33, "2011": 33, "644": 33, "shortest": 33, "350": 33, "runpi": 33, "197": 33, "_run_module_as_main": 33, "_run_cod": 33, "main_glob": 33, "87": 33, "exec": 33, "run_glob": 33, "ipykernel_launch": 33, "launch_new_inst": 33, "traitlet": 33, "845": 33, "launch_inst": 33, "ipykernel": 33, "kernelapp": 33, "612": 33, "io_loop": 33, "tornado": 33, "platform": 33, "asyncio": 33, "199": 33, "asyncio_loop": 33, "run_forev": 33, "base_ev": 33, "596": 33, "_run_onc": 33, "1890": 33, "_run": 33, "_context": 33, "_callback": 33, "_arg": 33, "ioloop": 33, "688": 33, "_run_callback": 33, "callback": 33, "741": 33, "ret": 33, "gen": 33, "814": 33, "inner": 33, "ctx_run": 33, "775": 33, "send": 33, "kernelbas": 33, "374": 33, "dispatch_queu": 33, "process_on": 33, "250": 33, "runner": 33, "358": 33, "maybe_futur": 33, "dispatch": 33, "261": 33, "dispatch_shel": 33, "handler": 33, "msg": 33, "536": 33, "execute_request": 33, "do_execut": 33, "ipkernel": 33, "302": 33, "run_cel": 33, "store_histori": 33, "zmqshell": 33, "539": 33, "zmqinteractiveshel": 33, "interactiveshel": 33, "2898": 33, "_run_cel": 33, "2944": 33, "coro": 33, "async_help": 33, "_pseudo_sync_runn": 33, "3169": 33, "run_cell_async": 33, "has_rais": 33, "await": 33, "run_ast_nod": 33, "code_ast": 33, "bodi": 33, "cell_nam": 33, "3361": 33, "run_cod": 33, "async_": 33, "asi": 33, "3441": 33, "code_obj": 33, "user_global_n": 33, "user_n": 33, "f4b6cbd5939f": 33, "794": 33, "cl": 33, "493": 33, "logger": 33, "account": 33, "impact": 33, "problem": 33, "principl": 33, "ourselv": 33, "pred": [33, 34], "exog_model": 33, "exog_pr": 33, "exog_err": 33, "exog_smap": 33, "scene": 33, "inspect": 33, "repeatrecentconfig": 34, "repeatrec": 34, "most_recent_valu": 34, "train_forecast": 34, "notion": 34, "els": 34, "repeat": 34, "upcom": 34, "val": 34, "pend": 34, "prev_forecast": 34, "h1": 34, "605": 34, "559": 34, "820": 34, "790": 34, "784": 34, "752": 34, "739": 34, "684": 34, "166": 34, "straightforward": 34, "stub": 34, "header": 34, "heavi": 34, "lift": 34, "repeatrecentdetectorconfig": 34, "_default_post_rul": 34, "roughli": 34, "repeatrecentdetector": 34, "212986": 34, "120839": 34, "000000": 34, "171719": 34, "305278": 34, "190799": 34, "038160": 34, "203519": 34, "082679": 34, "349798": 34, "413397": 34, "756835": 34, "966714": 34, "202032": 34, "291072": 34, "380111": 34, "341952": 34, "246552": 34, "163873": 34, "953994": 34, "686876": 34, "286198": 34, "178079": 34, "559676": 34, "928554": 34, "329232": 34, "348311": 34, "316512": 34, "081193": 34, "540597": 34, "426117": 34, "108119": 34, "311638": 34, "712316": 34, "214752": 34, "373751": 34, "399191": 34, "221112": 34, "049393": 34, "737755": 34, "381598": 34, "076320": 34, "489717": 34, "814075": 34, "979434": 34, "922194": 34, "782275": 34, "642356": 34, "457917": 34, "222599": 34, "158999": 34}, "objects": {"": [[2, 0, 0, "-", "merlion"], [18, 0, 0, "-", "ts_datasets"]], "merlion": [[4, 0, 0, "-", "evaluate"], [5, 0, 0, "-", "models"], [13, 0, 0, "-", "plot"], [14, 0, 0, "-", "post_process"], [15, 0, 0, "-", "spark"], [16, 0, 0, "-", "transform"], [17, 0, 0, "-", "utils"]], "merlion.evaluate": [[4, 0, 0, "-", "anomaly"], [4, 0, 0, "-", "base"], [4, 0, 0, "-", "forecast"]], "merlion.evaluate.anomaly": [[4, 1, 1, "", "ScoreType"], [4, 1, 1, "", "TSADEvaluator"], [4, 1, 1, "", "TSADEvaluatorConfig"], [4, 1, 1, "", "TSADMetric"], [4, 1, 1, "", "TSADScoreAccumulator"], [4, 5, 1, "", "accumulate_tsad_score"]], "merlion.evaluate.anomaly.ScoreType": [[4, 2, 1, "", "PointAdjusted"], [4, 2, 1, "", "Pointwise"], [4, 2, 1, "", "RevisedPointAdjusted"]], "merlion.evaluate.anomaly.TSADEvaluator": [[4, 2, 1, "", "config_class"], [4, 3, 1, "", "default_retrain_kwargs"], [4, 3, 1, "", "evaluate"], [4, 3, 1, "", "get_predict"], [4, 4, 1, "", "max_delay_sec"], [4, 4, 1, "", "max_early_sec"]], "merlion.evaluate.anomaly.TSADMetric": [[4, 2, 1, "", "F1"], [4, 2, 1, "", "F2"], [4, 2, 1, "", "F5"], [4, 2, 1, "", "MeanTimeToDetect"], [4, 2, 1, "", "NABScore"], [4, 2, 1, "", "NABScoreLowFN"], [4, 2, 1, "", "NABScoreLowFP"], [4, 2, 1, "", "PointAdjustedF1"], [4, 2, 1, "", "PointAdjustedPrecision"], [4, 2, 1, "", "PointAdjustedRecall"], [4, 2, 1, "", "PointwiseF1"], [4, 2, 1, "", "PointwisePrecision"], [4, 2, 1, "", "PointwiseRecall"], [4, 2, 1, "", "Precision"], [4, 2, 1, "", "Recall"]], "merlion.evaluate.anomaly.TSADScoreAccumulator": [[4, 3, 1, "", "f1"], [4, 3, 1, "", "f_beta"], [4, 3, 1, "", "mean_anomaly_duration"], [4, 3, 1, "", "mean_detected_anomaly_duration"], [4, 3, 1, "", "mean_time_to_detect"], [4, 3, 1, "", "nab_score"], [4, 3, 1, "", "precision"], [4, 3, 1, "", "recall"]], "merlion.evaluate.base": [[4, 1, 1, "", "EvaluatorBase"], [4, 1, 1, "", "EvaluatorConfig"]], "merlion.evaluate.base.EvaluatorBase": [[4, 4, 1, "", "cadence"], [4, 2, 1, "", "config_class"], [4, 3, 1, "", "default_retrain_kwargs"], [4, 3, 1, "", "default_train_kwargs"], [4, 3, 1, "", "evaluate"], [4, 3, 1, "", "get_predict"], [4, 4, 1, "", "horizon"], [4, 4, 1, "", "retrain_freq"], [4, 4, 1, "", "train_window"]], "merlion.evaluate.base.EvaluatorConfig": [[4, 4, 1, "", "cadence"], [4, 4, 1, "", "horizon"], [4, 4, 1, "", "retrain_freq"], [4, 3, 1, "", "to_dict"], [4, 4, 1, "", "train_window"]], "merlion.evaluate.forecast": [[4, 1, 1, "", "ForecastEvaluator"], [4, 1, 1, "", "ForecastEvaluatorConfig"], [4, 1, 1, "", "ForecastMetric"], [4, 1, 1, "", "ForecastScoreAccumulator"], [4, 5, 1, "", "accumulate_forecast_score"]], "merlion.evaluate.forecast.ForecastEvaluator": [[4, 4, 1, "", "cadence"], [4, 2, 1, "", "config_class"], [4, 3, 1, "", "evaluate"], [4, 4, 1, "", "horizon"]], "merlion.evaluate.forecast.ForecastEvaluatorConfig": [[4, 4, 1, "", "cadence"], [4, 4, 1, "", "horizon"]], "merlion.evaluate.forecast.ForecastMetric": [[4, 2, 1, "", "MAE"], [4, 2, 1, "", "MARRE"], [4, 2, 1, "", "MASE"], [4, 2, 1, "", "MSIS"], [4, 2, 1, "", "RMSE"], [4, 2, 1, "", "RMSPE"], [4, 2, 1, "", "sMAPE"]], "merlion.evaluate.forecast.ForecastScoreAccumulator": [[4, 3, 1, "", "check_before_eval"], [4, 3, 1, "", "mae"], [4, 3, 1, "", "marre"], [4, 3, 1, "", "mase"], [4, 3, 1, "", "msis"], [4, 3, 1, "", "rmse"], [4, 3, 1, "", "rmspe"], [4, 3, 1, "", "smape"]], "merlion.models": [[6, 0, 0, "-", "anomaly"], [9, 0, 0, "-", "automl"], [5, 0, 0, "-", "base"], [5, 0, 0, "-", "deep_base"], [5, 0, 0, "-", "defaults"], [10, 0, 0, "-", "ensemble"], [5, 0, 0, "-", "factory"], [11, 0, 0, "-", "forecast"], [5, 0, 0, "-", "layers"], [12, 0, 0, "-", "utils"]], "merlion.models.anomaly": [[6, 0, 0, "-", "autoencoder"], [6, 0, 0, "-", "base"], [7, 0, 0, "-", "change_point"], [6, 0, 0, "-", "dagmm"], [6, 0, 0, "-", "dbl"], [6, 0, 0, "-", "deep_point_anomaly_detector"], [8, 0, 0, "-", "forecast_based"], [6, 0, 0, "-", "isolation_forest"], [6, 0, 0, "-", "lstm_ed"], [6, 0, 0, "-", "random_cut_forest"], [6, 0, 0, "-", "spectral_residual"], [6, 0, 0, "-", "stat_threshold"], [6, 0, 0, "-", "vae"], [6, 0, 0, "-", "windstats"], [6, 0, 0, "-", "zms"]], "merlion.models.anomaly.autoencoder": [[6, 1, 1, "", "AutoEncoder"], [6, 1, 1, "", "AutoEncoderConfig"]], "merlion.models.anomaly.autoencoder.AutoEncoder": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.base": [[6, 1, 1, "", "DetectorBase"], [6, 1, 1, "", "DetectorConfig"], [6, 1, 1, "", "MultipleTimeseriesDetectorMixin"], [6, 1, 1, "", "NoCalibrationDetectorConfig"]], "merlion.models.anomaly.base.DetectorBase": [[6, 4, 1, "", "calibrator"], [6, 2, 1, "", "config_class"], [6, 3, 1, "", "get_anomaly_label"], [6, 3, 1, "", "get_anomaly_score"], [6, 3, 1, "", "get_figure"], [6, 3, 1, "", "plot_anomaly"], [6, 3, 1, "", "plot_anomaly_plotly"], [6, 4, 1, "", "post_rule"], [6, 4, 1, "", "threshold"], [6, 3, 1, "", "train"], [6, 3, 1, "", "train_post_process"]], "merlion.models.anomaly.base.DetectorConfig": [[6, 2, 1, "", "calibrator"], [6, 2, 1, "", "enable_calibrator"], [6, 2, 1, "", "enable_threshold"], [6, 3, 1, "", "from_dict"], [6, 4, 1, "", "post_rule"], [6, 2, 1, "", "threshold"]], "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin": [[6, 3, 1, "", "train_multiple"]], "merlion.models.anomaly.base.NoCalibrationDetectorConfig": [[6, 4, 1, "", "calibrator"], [6, 4, 1, "", "enable_calibrator"]], "merlion.models.anomaly.change_point": [[7, 0, 0, "-", "bocpd"]], "merlion.models.anomaly.change_point.bocpd": [[7, 1, 1, "", "BOCPD"], [7, 1, 1, "", "BOCPDConfig"], [7, 1, 1, "", "ChangeKind"]], "merlion.models.anomaly.change_point.bocpd.BOCPD": [[7, 4, 1, "", "change_kind"], [7, 2, 1, "", "config_class"], [7, 4, 1, "", "cp_prior"], [7, 3, 1, "", "get_anomaly_score"], [7, 3, 1, "", "get_figure"], [7, 4, 1, "", "lag"], [7, 4, 1, "", "last_train_time"], [7, 4, 1, "", "min_likelihood"], [7, 4, 1, "", "n_seen"], [7, 4, 1, "", "require_even_sampling"], [7, 4, 1, "", "require_univariate"], [7, 3, 1, "", "train_pre_process"], [7, 3, 1, "", "update"]], "merlion.models.anomaly.change_point.bocpd.BOCPDConfig": [[7, 4, 1, "", "change_kind"]], "merlion.models.anomaly.change_point.bocpd.ChangeKind": [[7, 2, 1, "", "Auto"], [7, 2, 1, "", "LevelShift"], [7, 2, 1, "", "TrendChange"]], "merlion.models.anomaly.dagmm": [[6, 1, 1, "", "DAGMM"], [6, 1, 1, "", "DAGMMConfig"]], "merlion.models.anomaly.dagmm.DAGMM": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"], [6, 3, 1, "", "train_multiple"]], "merlion.models.anomaly.dbl": [[6, 1, 1, "", "DynamicBaseline"], [6, 1, 1, "", "DynamicBaselineConfig"], [6, 1, 1, "", "Segment"], [6, 1, 1, "", "Segmenter"], [6, 1, 1, "", "Trend"]], "merlion.models.anomaly.dbl.DynamicBaseline": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "data"], [6, 4, 1, "", "fixed_period"], [6, 3, 1, "", "get_baseline"], [6, 3, 1, "", "get_baseline_figure"], [6, 3, 1, "", "get_relevant"], [6, 4, 1, "", "has_fixed_period"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"], [6, 4, 1, "", "train_window"], [6, 3, 1, "", "update"]], "merlion.models.anomaly.dbl.DynamicBaselineConfig": [[6, 3, 1, "", "determine_train_window"], [6, 4, 1, "", "fixed_period"], [6, 3, 1, "", "to_dict"], [6, 4, 1, "", "trends"]], "merlion.models.anomaly.dbl.Segment": [[6, 3, 1, "", "add"], [6, 3, 1, "", "drop"], [6, 3, 1, "", "score"]], "merlion.models.anomaly.dbl.Segmenter": [[6, 3, 1, "", "add"], [6, 2, 1, "", "day_delta"], [6, 3, 1, "", "day_key"], [6, 3, 1, "", "drop"], [6, 3, 1, "", "get_baseline"], [6, 2, 1, "", "hour_delta"], [6, 2, 1, "", "min_delta"], [6, 3, 1, "", "reset"], [6, 3, 1, "", "score"], [6, 3, 1, "", "segment_key"], [6, 4, 1, "", "trend"], [6, 4, 1, "", "trends"], [6, 3, 1, "", "weekday_key"], [6, 4, 1, "", "wind_delta"], [6, 3, 1, "", "window_key"], [6, 2, 1, "", "zero_delta"]], "merlion.models.anomaly.dbl.Trend": [[6, 2, 1, "", "daily"], [6, 2, 1, "", "monthly"], [6, 2, 1, "", "weekly"]], "merlion.models.anomaly.deep_point_anomaly_detector": [[6, 1, 1, "", "DeepPointAnomalyDetector"], [6, 1, 1, "", "DeepPointAnomalyDetectorConfig"]], "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.forecast_based": [[8, 0, 0, "-", "arima"], [8, 0, 0, "-", "base"], [8, 0, 0, "-", "ets"], [8, 0, 0, "-", "mses"], [8, 0, 0, "-", "prophet"], [8, 0, 0, "-", "sarima"]], "merlion.models.anomaly.forecast_based.arima": [[8, 1, 1, "", "ArimaDetector"], [8, 1, 1, "", "ArimaDetectorConfig"]], "merlion.models.anomaly.forecast_based.arima.ArimaDetector": [[8, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.base": [[8, 1, 1, "", "ForecastingDetectorBase"]], "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase": [[8, 3, 1, "", "forecast_to_anom_score"], [8, 3, 1, "", "get_anomaly_label"], [8, 3, 1, "", "get_anomaly_score"], [8, 3, 1, "", "get_figure"], [8, 3, 1, "", "plot_anomaly"], [8, 3, 1, "", "plot_anomaly_plotly"], [8, 3, 1, "", "plot_forecast"], [8, 3, 1, "", "plot_forecast_plotly"], [8, 3, 1, "", "train"], [8, 3, 1, "", "train_post_process"]], "merlion.models.anomaly.forecast_based.ets": [[8, 1, 1, "", "ETSDetector"], [8, 1, 1, "", "ETSDetectorConfig"]], "merlion.models.anomaly.forecast_based.ets.ETSDetector": [[8, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.mses": [[8, 1, 1, "", "MSESDetector"], [8, 1, 1, "", "MSESDetectorConfig"]], "merlion.models.anomaly.forecast_based.mses.MSESDetector": [[8, 2, 1, "", "config_class"], [8, 3, 1, "", "get_anomaly_score"], [8, 4, 1, "", "online_updates"]], "merlion.models.anomaly.forecast_based.prophet": [[8, 1, 1, "", "ProphetDetector"], [8, 1, 1, "", "ProphetDetectorConfig"]], "merlion.models.anomaly.forecast_based.prophet.ProphetDetector": [[8, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.sarima": [[8, 1, 1, "", "SarimaDetector"], [8, 1, 1, "", "SarimaDetectorConfig"]], "merlion.models.anomaly.forecast_based.sarima.SarimaDetector": [[8, 2, 1, "", "config_class"]], "merlion.models.anomaly.isolation_forest": [[6, 1, 1, "", "IsolationForest"], [6, 1, 1, "", "IsolationForestConfig"]], "merlion.models.anomaly.isolation_forest.IsolationForest": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.lstm_ed": [[6, 1, 1, "", "LSTMED"], [6, 1, 1, "", "LSTMEDConfig"]], "merlion.models.anomaly.lstm_ed.LSTMED": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.random_cut_forest": [[6, 1, 1, "", "JVMSingleton"], [6, 1, 1, "", "RandomCutForest"], [6, 1, 1, "", "RandomCutForestConfig"]], "merlion.models.anomaly.random_cut_forest.JVMSingleton": [[6, 3, 1, "", "gateway"]], "merlion.models.anomaly.random_cut_forest.RandomCutForest": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "online_updates"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig": [[6, 4, 1, "", "java_params"]], "merlion.models.anomaly.spectral_residual": [[6, 1, 1, "", "SpectralResidual"], [6, 1, 1, "", "SpectralResidualConfig"]], "merlion.models.anomaly.spectral_residual.SpectralResidual": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"], [6, 4, 1, "", "target_seq_index"]], "merlion.models.anomaly.stat_threshold": [[6, 1, 1, "", "StatThreshold"], [6, 1, 1, "", "StatThresholdConfig"]], "merlion.models.anomaly.stat_threshold.StatThreshold": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.vae": [[6, 1, 1, "", "VAE"], [6, 1, 1, "", "VAEConfig"]], "merlion.models.anomaly.vae.VAE": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.windstats": [[6, 1, 1, "", "WindStats"], [6, 1, 1, "", "WindStatsConfig"]], "merlion.models.anomaly.windstats.WindStats": [[6, 2, 1, "", "config_class"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.zms": [[6, 1, 1, "", "ZMS"], [6, 1, 1, "", "ZMSConfig"]], "merlion.models.anomaly.zms.ZMS": [[6, 4, 1, "", "adjust_z_scores"], [6, 2, 1, "", "config_class"], [6, 4, 1, "", "lag_inflation"], [6, 4, 1, "", "lag_scales"], [6, 4, 1, "", "n_lags"], [6, 4, 1, "", "require_even_sampling"], [6, 4, 1, "", "require_univariate"], [6, 3, 1, "", "train"]], "merlion.models.anomaly.zms.ZMSConfig": [[6, 4, 1, "", "full_transform"], [6, 4, 1, "", "n_lags"], [6, 3, 1, "", "to_dict"]], "merlion.models.automl": [[9, 0, 0, "-", "autoets"], [9, 0, 0, "-", "autoprophet"], [9, 0, 0, "-", "autosarima"], [9, 0, 0, "-", "base"], [9, 0, 0, "-", "search"], [9, 0, 0, "-", "seasonality"]], "merlion.models.automl.autoets": [[9, 1, 1, "", "AutoETS"], [9, 1, 1, "", "AutoETSConfig"]], "merlion.models.automl.autoets.AutoETS": [[9, 2, 1, "", "config_class"], [9, 3, 1, "", "generate_theta"], [9, 3, 1, "", "get_ic"], [9, 3, 1, "", "set_theta"]], "merlion.models.automl.autoprophet": [[9, 1, 1, "", "AutoProphet"], [9, 1, 1, "", "AutoProphetConfig"]], "merlion.models.automl.autoprophet.AutoProphet": [[9, 2, 1, "", "config_class"], [9, 3, 1, "", "generate_theta"], [9, 3, 1, "", "get_ic"], [9, 3, 1, "", "set_theta"], [9, 4, 1, "", "supports_exog"]], "merlion.models.automl.autoprophet.AutoProphetConfig": [[9, 4, 1, "", "multi_seasonality"]], "merlion.models.automl.autosarima": [[9, 1, 1, "", "AutoSarima"], [9, 1, 1, "", "AutoSarimaConfig"]], "merlion.models.automl.autosarima.AutoSarima": [[9, 2, 1, "", "config_class"], [9, 3, 1, "", "evaluate_theta"], [9, 3, 1, "", "generate_theta"], [9, 3, 1, "", "set_theta"], [9, 4, 1, "", "supports_exog"]], "merlion.models.automl.autosarima.AutoSarimaConfig": [[9, 4, 1, "", "order"], [9, 4, 1, "", "seasonal_order"]], "merlion.models.automl.base": [[9, 1, 1, "", "AutoMLMixIn"], [9, 1, 1, "", "ICAutoMLForecaster"], [9, 1, 1, "", "ICConfig"], [9, 1, 1, "", "InformationCriterion"]], "merlion.models.automl.base.AutoMLMixIn": [[9, 3, 1, "", "evaluate_theta"], [9, 3, 1, "", "generate_theta"], [9, 3, 1, "", "set_theta"]], "merlion.models.automl.base.ICAutoMLForecaster": [[9, 2, 1, "", "config_class"], [9, 3, 1, "", "evaluate_theta"], [9, 3, 1, "", "get_ic"], [9, 4, 1, "", "information_criterion"]], "merlion.models.automl.base.ICConfig": [[9, 4, 1, "", "information_criterion"]], "merlion.models.automl.base.InformationCriterion": [[9, 2, 1, "", "AIC"], [9, 2, 1, "", "AICc"], [9, 2, 1, "", "BIC"]], "merlion.models.automl.search": [[9, 1, 1, "", "GridSearch"]], "merlion.models.automl.seasonality": [[9, 1, 1, "", "PeriodicityStrategy"], [9, 1, 1, "", "SeasonalityConfig"], [9, 1, 1, "", "SeasonalityLayer"], [9, 1, 1, "", "SeasonalityModel"]], "merlion.models.automl.seasonality.PeriodicityStrategy": [[9, 2, 1, "", "ACF"], [9, 2, 1, "", "All"], [9, 2, 1, "", "Max"], [9, 2, 1, "", "Min"]], "merlion.models.automl.seasonality.SeasonalityConfig": [[9, 4, 1, "", "multi_seasonality"], [9, 4, 1, "", "periodicity_strategy"]], "merlion.models.automl.seasonality.SeasonalityLayer": [[9, 2, 1, "", "config_class"], [9, 3, 1, "", "detect_seasonality"], [9, 3, 1, "", "evaluate_theta"], [9, 3, 1, "", "generate_theta"], [9, 4, 1, "", "max_lag"], [9, 4, 1, "", "multi_seasonality"], [9, 4, 1, "", "periodicity_strategy"], [9, 4, 1, "", "pval"], [9, 4, 1, "", "require_even_sampling"], [9, 4, 1, "", "require_univariate"], [9, 3, 1, "", "set_theta"]], "merlion.models.automl.seasonality.SeasonalityModel": [[9, 3, 1, "", "set_seasonality"]], "merlion.models.base": [[5, 1, 1, "", "Config"], [5, 1, 1, "", "ModelBase"], [5, 1, 1, "", "MultipleTimeseriesModelMixin"], [5, 1, 1, "", "NormalizingConfig"]], "merlion.models.base.Config": [[5, 2, 1, "", "dim"], [5, 2, 1, "", "filename"], [5, 3, 1, "", "from_dict"], [5, 3, 1, "", "get_unused_kwargs"], [5, 3, 1, "", "to_dict"], [5, 2, 1, "", "transform"]], "merlion.models.base.ModelBase": [[5, 4, 1, "", "auto_align"], [5, 4, 1, "", "base_model"], [5, 2, 1, "", "config_class"], [5, 4, 1, "", "dim"], [5, 2, 1, "", "filename"], [5, 3, 1, "", "from_bytes"], [5, 4, 1, "", "last_train_time"], [5, 3, 1, "", "load"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"], [5, 3, 1, "", "reset"], [5, 3, 1, "", "save"], [5, 4, 1, "", "supports_exog"], [5, 4, 1, "", "timedelta"], [5, 3, 1, "", "to_bytes"], [5, 3, 1, "", "train"], [5, 2, 1, "", "train_data"], [5, 3, 1, "", "train_post_process"], [5, 3, 1, "", "train_pre_process"], [5, 4, 1, "", "transform"], [5, 3, 1, "", "transform_time_series"]], "merlion.models.base.MultipleTimeseriesModelMixin": [[5, 3, 1, "", "train_multiple"]], "merlion.models.base.NormalizingConfig": [[5, 4, 1, "", "full_transform"], [5, 4, 1, "", "transform"]], "merlion.models.deep_base": [[5, 1, 1, "", "DeepConfig"], [5, 1, 1, "", "DeepModelBase"], [5, 1, 1, "", "LossFunction"], [5, 1, 1, "", "Optimizer"], [5, 1, 1, "", "TorchModel"]], "merlion.models.deep_base.DeepConfig": [[5, 4, 1, "", "loss_fn"], [5, 4, 1, "", "optimizer"]], "merlion.models.deep_base.DeepModelBase": [[5, 2, 1, "", "config_class"], [5, 2, 1, "", "deep_model_class"], [5, 3, 1, "", "to_cpu"], [5, 3, 1, "", "to_gpu"]], "merlion.models.deep_base.LossFunction": [[5, 2, 1, "", "guassian_nll"], [5, 2, 1, "", "huber"], [5, 2, 1, "", "l1"], [5, 2, 1, "", "mse"]], "merlion.models.deep_base.Optimizer": [[5, 2, 1, "", "Adagrad"], [5, 2, 1, "", "Adam"], [5, 2, 1, "", "AdamW"], [5, 2, 1, "", "RMSprop"], [5, 2, 1, "", "SGD"]], "merlion.models.deep_base.TorchModel": [[5, 4, 1, "", "device"], [5, 3, 1, "", "forward"]], "merlion.models.defaults": [[5, 1, 1, "", "DefaultDetector"], [5, 1, 1, "", "DefaultDetectorConfig"], [5, 1, 1, "", "DefaultForecaster"], [5, 1, 1, "", "DefaultForecasterConfig"]], "merlion.models.defaults.DefaultDetector": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "granularity"], [5, 3, 1, "", "reset"], [5, 3, 1, "", "train"]], "merlion.models.defaults.DefaultForecaster": [[5, 2, 1, "", "config_class"], [5, 4, 1, "", "granularity"], [5, 3, 1, "", "reset"], [5, 4, 1, "", "supports_exog"], [5, 3, 1, "", "train"]], "merlion.models.ensemble": [[10, 0, 0, "-", "anomaly"], [10, 0, 0, "-", "base"], [10, 0, 0, "-", "combine"], [10, 0, 0, "-", "forecast"]], "merlion.models.ensemble.anomaly": [[10, 1, 1, "", "DetectorEnsemble"], [10, 1, 1, "", "DetectorEnsembleConfig"], [10, 1, 1, "", "DetectorEnsembleTrainConfig"]], "merlion.models.ensemble.anomaly.DetectorEnsemble": [[10, 2, 1, "", "config_class"], [10, 4, 1, "", "per_model_threshold"], [10, 4, 1, "", "require_even_sampling"], [10, 4, 1, "", "require_univariate"]], "merlion.models.ensemble.anomaly.DetectorEnsembleConfig": [[10, 4, 1, "", "per_model_threshold"]], "merlion.models.ensemble.base": [[10, 1, 1, "", "EnsembleBase"], [10, 1, 1, "", "EnsembleConfig"], [10, 1, 1, "", "EnsembleTrainConfig"]], "merlion.models.ensemble.base.EnsembleBase": [[10, 4, 1, "", "combiner"], [10, 2, 1, "", "config_class"], [10, 3, 1, "", "get_max_common_horizon"], [10, 4, 1, "", "models"], [10, 4, 1, "", "models_used"], [10, 3, 1, "", "reset"], [10, 3, 1, "", "save"], [10, 3, 1, "", "to_bytes"], [10, 3, 1, "", "train_combiner"], [10, 3, 1, "", "train_valid_split"]], "merlion.models.ensemble.base.EnsembleConfig": [[10, 2, 1, "", "models"], [10, 3, 1, "", "to_dict"]], "merlion.models.ensemble.combine": [[10, 1, 1, "", "CombinerBase"], [10, 1, 1, "", "CombinerFactory"], [10, 1, 1, "", "Max"], [10, 1, 1, "", "Mean"], [10, 1, 1, "", "Median"], [10, 1, 1, "", "MetricWeightedMean"], [10, 1, 1, "", "ModelSelector"]], "merlion.models.ensemble.combine.CombinerBase": [[10, 3, 1, "", "__call__"], [10, 3, 1, "", "from_dict"], [10, 3, 1, "", "get_model_used"], [10, 4, 1, "", "models_used"], [10, 4, 1, "", "requires_training"], [10, 3, 1, "", "reset"], [10, 3, 1, "", "set_model_used"], [10, 3, 1, "", "to_dict"], [10, 3, 1, "", "train"]], "merlion.models.ensemble.combine.CombinerFactory": [[10, 3, 1, "", "create"]], "merlion.models.ensemble.combine.Mean": [[10, 4, 1, "", "weights"]], "merlion.models.ensemble.combine.MetricWeightedMean": [[10, 4, 1, "", "weights"]], "merlion.models.ensemble.combine.ModelSelector": [[10, 3, 1, "", "from_dict"], [10, 4, 1, "", "invert"], [10, 4, 1, "", "requires_training"], [10, 3, 1, "", "to_dict"], [10, 3, 1, "", "train"]], "merlion.models.ensemble.forecast": [[10, 1, 1, "", "ForecasterEnsemble"], [10, 1, 1, "", "ForecasterEnsembleConfig"]], "merlion.models.ensemble.forecast.ForecasterEnsemble": [[10, 2, 1, "", "config_class"], [10, 4, 1, "", "require_even_sampling"], [10, 3, 1, "", "resample_time_stamps"], [10, 3, 1, "", "train_combiner"], [10, 3, 1, "", "train_pre_process"]], "merlion.models.ensemble.forecast.ForecasterEnsembleConfig": [[10, 4, 1, "", "target_seq_index"]], "merlion.models.factory": [[5, 1, 1, "", "ModelFactory"], [5, 5, 1, "", "instantiate_or_copy_model"]], "merlion.models.factory.ModelFactory": [[5, 3, 1, "", "create"], [5, 3, 1, "", "get_model_class"], [5, 3, 1, "", "load"], [5, 3, 1, "", "load_bytes"]], "merlion.models.forecast": [[11, 0, 0, "-", "arima"], [11, 0, 0, "-", "autoformer"], [11, 0, 0, "-", "base"], [11, 0, 0, "-", "deep_ar"], [11, 0, 0, "-", "deep_base"], [11, 0, 0, "-", "ets"], [11, 0, 0, "-", "etsformer"], [11, 0, 0, "-", "informer"], [11, 0, 0, "-", "prophet"], [11, 0, 0, "-", "sarima"], [11, 0, 0, "-", "sklearn_base"], [11, 0, 0, "-", "smoother"], [11, 0, 0, "-", "transformer"], [11, 0, 0, "-", "trees"], [11, 0, 0, "-", "vector_ar"]], "merlion.models.forecast.arima": [[11, 1, 1, "", "Arima"], [11, 1, 1, "", "ArimaConfig"]], "merlion.models.forecast.arima.Arima": [[11, 2, 1, "", "config_class"]], "merlion.models.forecast.arima.ArimaConfig": [[11, 4, 1, "", "seasonal_order"]], "merlion.models.forecast.autoformer": [[11, 1, 1, "", "AutoformerConfig"], [11, 1, 1, "", "AutoformerForecaster"], [11, 1, 1, "", "AutoformerModel"]], "merlion.models.forecast.autoformer.AutoformerForecaster": [[11, 2, 1, "", "config_class"], [11, 2, 1, "", "deep_model_class"]], "merlion.models.forecast.autoformer.AutoformerModel": [[11, 3, 1, "", "forward"]], "merlion.models.forecast.base": [[11, 1, 1, "", "ForecasterBase"], [11, 1, 1, "", "ForecasterConfig"], [11, 1, 1, "", "ForecasterExogBase"], [11, 1, 1, "", "ForecasterExogConfig"]], "merlion.models.forecast.base.ForecasterBase": [[11, 3, 1, "", "batch_forecast"], [11, 2, 1, "", "config_class"], [11, 3, 1, "", "forecast"], [11, 3, 1, "", "get_figure"], [11, 4, 1, "", "invert_transform"], [11, 4, 1, "", "max_forecast_steps"], [11, 3, 1, "", "plot_forecast"], [11, 3, 1, "", "plot_forecast_plotly"], [11, 4, 1, "", "require_univariate"], [11, 3, 1, "", "resample_time_stamps"], [11, 4, 1, "", "support_multivariate_output"], [11, 2, 1, "", "target_name"], [11, 4, 1, "", "target_seq_index"], [11, 3, 1, "", "train"], [11, 3, 1, "", "train_post_process"], [11, 3, 1, "", "train_pre_process"], [11, 3, 1, "", "transform_exog_data"]], "merlion.models.forecast.base.ForecasterConfig": [[11, 2, 1, "", "invert_transform"], [11, 2, 1, "", "max_forecast_steps"], [11, 2, 1, "", "target_seq_index"]], "merlion.models.forecast.base.ForecasterExogBase": [[11, 4, 1, "", "exog_aggregation_policy"], [11, 4, 1, "", "exog_missing_value_policy"], [11, 4, 1, "", "exog_transform"], [11, 4, 1, "", "supports_exog"], [11, 3, 1, "", "transform_exog_data"]], "merlion.models.forecast.base.ForecasterExogConfig": [[11, 4, 1, "", "exog_aggregation_policy"], [11, 4, 1, "", "exog_missing_value_policy"], [11, 2, 1, "", "exog_transform"]], "merlion.models.forecast.deep_ar": [[11, 1, 1, "", "DeepARConfig"], [11, 1, 1, "", "DeepARForecaster"], [11, 1, 1, "", "DeepARModel"]], "merlion.models.forecast.deep_ar.DeepARForecaster": [[11, 2, 1, "", "config_class"], [11, 2, 1, "", "deep_model_class"]], "merlion.models.forecast.deep_ar.DeepARModel": [[11, 3, 1, "", "calculate_loss"], [11, 3, 1, "", "forward"], [11, 3, 1, "", "get_lagged_subsequences"], [11, 3, 1, "", "sampling_decoder"], [11, 3, 1, "", "unroll_encoder"]], "merlion.models.forecast.deep_base": [[11, 1, 1, "", "DeepForecaster"], [11, 1, 1, "", "DeepForecasterConfig"]], "merlion.models.forecast.deep_base.DeepForecaster": [[11, 2, 1, "", "config_class"], [11, 4, 1, "", "require_even_sampling"], [11, 4, 1, "", "support_multivariate_output"]], "merlion.models.forecast.ets": [[11, 1, 1, "", "ETS"], [11, 1, 1, "", "ETSConfig"]], "merlion.models.forecast.ets.ETS": [[11, 2, 1, "", "config_class"], [11, 4, 1, "", "damped_trend"], [11, 4, 1, "", "error"], [11, 4, 1, "", "require_even_sampling"], [11, 4, 1, "", "seasonal"], [11, 4, 1, "", "seasonal_periods"], [11, 3, 1, "", "set_seasonality"], [11, 4, 1, "", "trend"]], "merlion.models.forecast.etsformer": [[11, 1, 1, "", "ETSformerConfig"], [11, 1, 1, "", "ETSformerForecaster"], [11, 1, 1, "", "ETSformerModel"]], "merlion.models.forecast.etsformer.ETSformerForecaster": [[11, 2, 1, "", "config_class"], [11, 2, 1, "", "deep_model_class"]], "merlion.models.forecast.etsformer.ETSformerModel": [[11, 3, 1, "", "forward"], [11, 3, 1, "", "jitter"], [11, 3, 1, "", "scale"], [11, 3, 1, "", "shift"], [11, 3, 1, "", "transform"]], "merlion.models.forecast.informer": [[11, 1, 1, "", "InformerConfig"], [11, 1, 1, "", "InformerForecaster"], [11, 1, 1, "", "InformerModel"]], "merlion.models.forecast.informer.InformerForecaster": [[11, 2, 1, "", "config_class"], [11, 2, 1, "", "deep_model_class"]], "merlion.models.forecast.informer.InformerModel": [[11, 3, 1, "", "forward"]], "merlion.models.forecast.prophet": [[11, 1, 1, "", "Prophet"], [11, 1, 1, "", "ProphetConfig"]], "merlion.models.forecast.prophet.Prophet": [[11, 4, 1, "", "add_seasonality"], [11, 2, 1, "", "config_class"], [11, 4, 1, "", "daily_seasonality"], [11, 4, 1, "", "holidays"], [11, 4, 1, "", "require_even_sampling"], [11, 4, 1, "", "seasonality_mode"], [11, 3, 1, "", "set_seasonality"], [11, 4, 1, "", "uncertainty_samples"], [11, 4, 1, "", "weekly_seasonality"], [11, 4, 1, "", "yearly_seasonality"]], "merlion.models.forecast.sarima": [[11, 1, 1, "", "Sarima"], [11, 1, 1, "", "SarimaConfig"]], "merlion.models.forecast.sarima.Sarima": [[11, 2, 1, "", "config_class"], [11, 4, 1, "", "order"], [11, 4, 1, "", "require_even_sampling"], [11, 4, 1, "", "seasonal_order"], [11, 3, 1, "", "set_seasonality"]], "merlion.models.forecast.sklearn_base": [[11, 1, 1, "", "SKLearnForecaster"], [11, 1, 1, "", "SKLearnForecasterConfig"]], "merlion.models.forecast.sklearn_base.SKLearnForecaster": [[11, 2, 1, "", "config_class"], [11, 4, 1, "", "maxlags"], [11, 2, 1, "", "model"], [11, 4, 1, "", "prediction_stride"], [11, 4, 1, "", "require_even_sampling"], [11, 4, 1, "", "require_univariate"]], "merlion.models.forecast.smoother": [[11, 1, 1, "", "DeltaEstimator"], [11, 1, 1, "", "DeltaStats"], [11, 1, 1, "", "MSES"], [11, 1, 1, "", "MSESConfig"], [11, 1, 1, "", "MSESTrainConfig"]], "merlion.models.forecast.smoother.DeltaEstimator": [[11, 4, 1, "", "acc_max_scale"], [11, 3, 1, "", "acceleration"], [11, 4, 1, "", "data"], [11, 3, 1, "", "delta_hat"], [11, 3, 1, "", "loss_err"], [11, 4, 1, "", "max_scale"], [11, 3, 1, "", "neg_err"], [11, 3, 1, "", "pos_err"], [11, 3, 1, "", "process_losses"], [11, 3, 1, "", "train"], [11, 3, 1, "", "vel_err"], [11, 3, 1, "", "velocity"], [11, 4, 1, "", "x"]], "merlion.models.forecast.smoother.DeltaStats": [[11, 4, 1, "", "lag"], [11, 3, 1, "", "tune"], [11, 3, 1, "", "update_acceleration"], [11, 3, 1, "", "update_loss"], [11, 3, 1, "", "update_velocity"]], "merlion.models.forecast.smoother.MSES": [[11, 4, 1, "", "backsteps"], [11, 2, 1, "", "config_class"], [11, 3, 1, "", "marginalize_xhat_h"], [11, 4, 1, "", "max_horizon"], [11, 4, 1, "", "require_even_sampling"], [11, 4, 1, "", "rho"], [11, 3, 1, "", "update"], [11, 3, 1, "", "xhat_h"]], "merlion.models.forecast.smoother.MSESConfig": [[11, 4, 1, "", "backsteps"], [11, 4, 1, "", "max_scale"]], "merlion.models.forecast.transformer": [[11, 1, 1, "", "TransformerConfig"], [11, 1, 1, "", "TransformerForecaster"], [11, 1, 1, "", "TransformerModel"]], "merlion.models.forecast.transformer.TransformerForecaster": [[11, 2, 1, "", "config_class"], [11, 2, 1, "", "deep_model_class"]], "merlion.models.forecast.transformer.TransformerModel": [[11, 3, 1, "", "forward"]], "merlion.models.forecast.trees": [[11, 1, 1, "", "ExtraTreesForecaster"], [11, 1, 1, "", "ExtraTreesForecasterConfig"], [11, 1, 1, "", "LGBMForecaster"], [11, 1, 1, "", "LGBMForecasterConfig"], [11, 1, 1, "", "RandomForestForecaster"], [11, 1, 1, "", "RandomForestForecasterConfig"]], "merlion.models.forecast.trees.ExtraTreesForecaster": [[11, 2, 1, "", "config_class"]], "merlion.models.forecast.trees.LGBMForecaster": [[11, 2, 1, "", "config_class"]], "merlion.models.forecast.trees.RandomForestForecaster": [[11, 2, 1, "", "config_class"]], "merlion.models.forecast.vector_ar": [[11, 1, 1, "", "VectorAR"], [11, 1, 1, "", "VectorARConfig"]], "merlion.models.forecast.vector_ar.VectorAR": [[11, 2, 1, "", "config_class"], [11, 4, 1, "", "maxlags"], [11, 4, 1, "", "require_even_sampling"]], "merlion.models.layers": [[5, 1, 1, "", "LayeredDetector"], [5, 1, 1, "", "LayeredForecaster"], [5, 1, 1, "", "LayeredForecastingDetector"], [5, 1, 1, "", "LayeredModel"], [5, 1, 1, "", "LayeredModelConfig"]], "merlion.models.layers.LayeredDetector": [[5, 3, 1, "", "get_anomaly_score"]], "merlion.models.layers.LayeredForecaster": [[5, 3, 1, "", "forecast"]], "merlion.models.layers.LayeredModel": [[5, 4, 1, "", "base_model"], [5, 2, 1, "", "config_class"], [5, 4, 1, "", "model"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"], [5, 3, 1, "", "reset"], [5, 4, 1, "", "train_data"], [5, 3, 1, "", "train_post_process"], [5, 3, 1, "", "train_pre_process"]], "merlion.models.layers.LayeredModelConfig": [[5, 4, 1, "", "base_model"], [5, 3, 1, "", "from_dict"], [5, 3, 1, "", "get_unused_kwargs"], [5, 3, 1, "", "to_dict"]], "merlion.models.utils": [[12, 0, 0, "-", "autosarima_utils"], [12, 0, 0, "-", "early_stopping"], [12, 0, 0, "-", "rolling_window_dataset"], [12, 0, 0, "-", "time_features"]], "merlion.models.utils.autosarima_utils": [[12, 5, 1, "", "KPSS_stationaritytest"], [12, 5, 1, "", "detect_maxiter_sarima_model"], [12, 5, 1, "", "diff"], [12, 5, 1, "", "ndiffs"], [12, 5, 1, "", "nsdiffs"], [12, 5, 1, "", "seas_seasonalstationaritytest"]], "merlion.models.utils.early_stopping": [[12, 1, 1, "", "EarlyStopping"]], "merlion.models.utils.early_stopping.EarlyStopping": [[12, 3, 1, "", "load_best_model"], [12, 3, 1, "", "save_best_state_and_dict"]], "merlion.models.utils.rolling_window_dataset": [[12, 1, 1, "", "RollingWindowDataset"]], "merlion.models.utils.rolling_window_dataset.RollingWindowDataset": [[12, 3, 1, "", "collate_batch"], [12, 4, 1, "", "n_points"], [12, 4, 1, "", "n_train"], [12, 4, 1, "", "n_valid"], [12, 4, 1, "", "n_windows"], [12, 4, 1, "", "seed"], [12, 4, 1, "", "validation"]], "merlion.models.utils.time_features": [[12, 1, 1, "", "DayOfMonth"], [12, 1, 1, "", "DayOfWeek"], [12, 1, 1, "", "DayOfYear"], [12, 1, 1, "", "HourOfDay"], [12, 1, 1, "", "MinuteOfHour"], [12, 1, 1, "", "MonthOfYear"], [12, 1, 1, "", "SecondOfMinute"], [12, 1, 1, "", "TimeFeature"], [12, 1, 1, "", "WeekOfYear"], [12, 5, 1, "", "get_time_features"], [12, 5, 1, "", "time_features_from_frequency_str"]], "merlion.plot": [[13, 1, 1, "", "Figure"], [13, 1, 1, "", "MTSFigure"], [13, 5, 1, "", "plot_anoms"], [13, 5, 1, "", "plot_anoms_plotly"]], "merlion.plot.Figure": [[13, 3, 1, "", "get_y"], [13, 3, 1, "", "get_yhat"], [13, 3, 1, "", "get_yhat_iqr"], [13, 3, 1, "", "plot"], [13, 3, 1, "", "plot_plotly"], [13, 4, 1, "", "t0"], [13, 4, 1, "", "t_split"], [13, 4, 1, "", "tf"]], "merlion.plot.MTSFigure": [[13, 3, 1, "", "get_y"], [13, 3, 1, "", "get_yhat"], [13, 3, 1, "", "get_yhat_iqr"], [13, 3, 1, "", "plot_plotly"], [13, 4, 1, "", "t0"], [13, 4, 1, "", "t_split"], [13, 4, 1, "", "tf"]], "merlion.post_process": [[14, 0, 0, "-", "base"], [14, 0, 0, "-", "calibrate"], [14, 0, 0, "-", "factory"], [14, 0, 0, "-", "sequence"], [14, 0, 0, "-", "threshold"]], "merlion.post_process.base": [[14, 1, 1, "", "PostRuleBase"]], "merlion.post_process.base.PostRuleBase": [[14, 3, 1, "", "from_dict"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "train"]], "merlion.post_process.calibrate": [[14, 1, 1, "", "AnomScoreCalibrator"]], "merlion.post_process.calibrate.AnomScoreCalibrator": [[14, 4, 1, "", "anchors"], [14, 3, 1, "", "train"]], "merlion.post_process.factory": [[14, 1, 1, "", "PostRuleFactory"]], "merlion.post_process.factory.PostRuleFactory": [[14, 3, 1, "", "create"], [14, 3, 1, "", "get_post_rule_class"]], "merlion.post_process.sequence": [[14, 1, 1, "", "PostRuleSequence"]], "merlion.post_process.sequence.PostRuleSequence": [[14, 3, 1, "", "from_dict"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "train"]], "merlion.post_process.threshold": [[14, 1, 1, "", "AdaptiveAggregateAlarms"], [14, 1, 1, "", "AdaptiveThreshold"], [14, 1, 1, "", "AggregateAlarms"], [14, 1, 1, "", "Threshold"], [14, 5, 1, "", "get_adaptive_thres"]], "merlion.post_process.threshold.AdaptiveAggregateAlarms": [[14, 4, 1, "", "bin_sz"], [14, 4, 1, "", "default_hist_gap_thres"], [14, 2, 1, "", "threshold_class"]], "merlion.post_process.threshold.AdaptiveThreshold": [[14, 3, 1, "", "train"]], "merlion.post_process.threshold.AggregateAlarms": [[14, 4, 1, "", "abs_score"], [14, 4, 1, "", "alm_threshold"], [14, 3, 1, "", "filter"], [14, 4, 1, "", "suppress_secs"], [14, 2, 1, "", "threshold_class"], [14, 3, 1, "", "to_simple_threshold"], [14, 3, 1, "", "train"], [14, 4, 1, "", "window_secs"]], "merlion.post_process.threshold.Threshold": [[14, 1, 1, "", "TSADMetric"], [14, 3, 1, "", "to_simple_threshold"], [14, 3, 1, "", "train"]], "merlion.post_process.threshold.Threshold.TSADMetric": [[14, 2, 1, "", "F1"], [14, 2, 1, "", "F2"], [14, 2, 1, "", "F5"], [14, 2, 1, "", "MeanTimeToDetect"], [14, 2, 1, "", "NABScore"], [14, 2, 1, "", "NABScoreLowFN"], [14, 2, 1, "", "NABScoreLowFP"], [14, 2, 1, "", "PointAdjustedF1"], [14, 2, 1, "", "PointAdjustedPrecision"], [14, 2, 1, "", "PointAdjustedRecall"], [14, 2, 1, "", "PointwiseF1"], [14, 2, 1, "", "PointwisePrecision"], [14, 2, 1, "", "PointwiseRecall"], [14, 2, 1, "", "Precision"], [14, 2, 1, "", "Recall"]], "merlion.spark": [[15, 0, 0, "-", "dataset"], [15, 0, 0, "-", "pandas_udf"]], "merlion.spark.dataset": [[15, 6, 1, "", "TSID_COL_NAME"], [15, 5, 1, "", "add_tsid_column"], [15, 5, 1, "", "create_hier_dataset"], [15, 5, 1, "", "read_dataset"], [15, 5, 1, "", "write_dataset"]], "merlion.spark.pandas_udf": [[15, 5, 1, "", "anomaly"], [15, 5, 1, "", "forecast"], [15, 5, 1, "", "reconciliation"]], "merlion.transform": [[16, 0, 0, "-", "anomalize"], [16, 0, 0, "-", "base"], [16, 0, 0, "-", "bound"], [16, 0, 0, "-", "factory"], [16, 0, 0, "-", "moving_average"], [16, 0, 0, "-", "normalize"], [16, 0, 0, "-", "resample"], [16, 0, 0, "-", "sequence"]], "merlion.transform.anomalize": [[16, 1, 1, "", "Anomalize"], [16, 1, 1, "", "LevelShift"], [16, 1, 1, "", "Shock"], [16, 1, 1, "", "TrendChange"]], "merlion.transform.anomalize.Anomalize": [[16, 4, 1, "", "is_trained"], [16, 4, 1, "", "natural_bounds"], [16, 3, 1, "", "random_is_anom"]], "merlion.transform.anomalize.Shock": [[16, 4, 1, "", "anom_width_range"], [16, 3, 1, "", "random_anom_width"], [16, 3, 1, "", "random_is_anom"], [16, 3, 1, "", "random_sd_units"], [16, 4, 1, "", "sd_range"], [16, 3, 1, "", "train"]], "merlion.transform.anomalize.TrendChange": [[16, 3, 1, "", "random_scale"], [16, 4, 1, "", "scale_range"], [16, 3, 1, "", "train"]], "merlion.transform.base": [[16, 1, 1, "", "Identity"], [16, 1, 1, "", "InvertibleTransformBase"], [16, 1, 1, "", "TransformBase"]], "merlion.transform.base.Identity": [[16, 4, 1, "", "identity_inversion"], [16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.transform.base.InvertibleTransformBase": [[16, 3, 1, "", "_invert"], [16, 4, 1, "", "identity_inversion"], [16, 4, 1, "", "proper_inversion"]], "merlion.transform.base.TransformBase": [[16, 3, 1, "", "_invert"], [16, 3, 1, "", "from_dict"], [16, 4, 1, "", "identity_inversion"], [16, 3, 1, "", "invert"], [16, 4, 1, "", "proper_inversion"], [16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "to_dict"], [16, 3, 1, "", "train"]], "merlion.transform.bound": [[16, 1, 1, "", "LowerUpperClip"]], "merlion.transform.bound.LowerUpperClip": [[16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.transform.factory": [[16, 1, 1, "", "TransformFactory"]], "merlion.transform.factory.TransformFactory": [[16, 3, 1, "", "create"], [16, 3, 1, "", "get_transform_class"]], "merlion.transform.moving_average": [[16, 1, 1, "", "DifferenceTransform"], [16, 1, 1, "", "ExponentialMovingAverage"], [16, 1, 1, "", "LagTransform"], [16, 1, 1, "", "MovingAverage"], [16, 1, 1, "", "MovingPercentile"]], "merlion.transform.moving_average.DifferenceTransform": [[16, 3, 1, "", "train"]], "merlion.transform.moving_average.ExponentialMovingAverage": [[16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.transform.moving_average.LagTransform": [[16, 3, 1, "", "compute_lag"], [16, 3, 1, "", "train"]], "merlion.transform.moving_average.MovingAverage": [[16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.transform.moving_average.MovingPercentile": [[16, 3, 1, "", "train"]], "merlion.transform.normalize": [[16, 1, 1, "", "AbsVal"], [16, 1, 1, "", "BoxCoxTransform"], [16, 1, 1, "", "MeanVarNormalize"], [16, 1, 1, "", "MinMaxNormalize"], [16, 1, 1, "", "Rescale"]], "merlion.transform.normalize.AbsVal": [[16, 4, 1, "", "identity_inversion"], [16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.transform.normalize.BoxCoxTransform": [[16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.transform.normalize.MeanVarNormalize": [[16, 3, 1, "", "train"]], "merlion.transform.normalize.MinMaxNormalize": [[16, 3, 1, "", "train"]], "merlion.transform.normalize.Rescale": [[16, 4, 1, "", "is_trained"], [16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.transform.resample": [[16, 1, 1, "", "Shingle"], [16, 1, 1, "", "TemporalResample"]], "merlion.transform.resample.Shingle": [[16, 3, 1, "", "train"]], "merlion.transform.resample.TemporalResample": [[16, 4, 1, "", "aggregation_policy"], [16, 4, 1, "", "granularity"], [16, 4, 1, "", "missing_value_policy"], [16, 4, 1, "", "proper_inversion"], [16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.transform.sequence": [[16, 1, 1, "", "TransformSequence"], [16, 1, 1, "", "TransformStack"]], "merlion.transform.sequence.TransformSequence": [[16, 3, 1, "", "append"], [16, 3, 1, "", "from_dict"], [16, 4, 1, "", "identity_inversion"], [16, 3, 1, "", "invert"], [16, 4, 1, "", "proper_inversion"], [16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "to_dict"], [16, 3, 1, "", "train"]], "merlion.transform.sequence.TransformStack": [[16, 3, 1, "", "invert"], [16, 4, 1, "", "proper_inversion"], [16, 4, 1, "", "requires_inversion_state"], [16, 3, 1, "", "train"]], "merlion.utils": [[17, 0, 0, "-", "conj_priors"], [17, 0, 0, "-", "data_io"], [17, 0, 0, "-", "hts"], [17, 0, 0, "-", "istat"], [17, 0, 0, "-", "resample"], [17, 0, 0, "-", "time_series"], [17, 0, 0, "-", "ts_generator"]], "merlion.utils.conj_priors": [[17, 1, 1, "", "BayesianLinReg"], [17, 1, 1, "", "BayesianMVLinReg"], [17, 1, 1, "", "BetaBernoulli"], [17, 1, 1, "", "ConjPrior"], [17, 1, 1, "", "MVNormInvWishart"], [17, 1, 1, "", "NormInvGamma"], [17, 1, 1, "", "ScalarConjPrior"]], "merlion.utils.conj_priors.BayesianLinReg": [[17, 3, 1, "", "forecast"], [17, 4, 1, "", "n_params"], [17, 3, 1, "", "posterior"], [17, 3, 1, "", "posterior_explicit"], [17, 3, 1, "", "update"]], "merlion.utils.conj_priors.BayesianMVLinReg": [[17, 3, 1, "", "forecast"], [17, 4, 1, "", "n_params"], [17, 3, 1, "", "posterior"], [17, 3, 1, "", "posterior_explicit"], [17, 3, 1, "", "process_time_series"], [17, 3, 1, "", "update"]], "merlion.utils.conj_priors.BetaBernoulli": [[17, 3, 1, "", "forecast"], [17, 4, 1, "", "n_params"], [17, 3, 1, "", "posterior"], [17, 3, 1, "", "theta_posterior"], [17, 3, 1, "", "update"]], "merlion.utils.conj_priors.ConjPrior": [[17, 3, 1, "", "forecast"], [17, 3, 1, "", "from_dict"], [17, 3, 1, "", "get_time_series_values"], [17, 4, 1, "", "n_params"], [17, 3, 1, "", "posterior"], [17, 3, 1, "", "process_time_series"], [17, 3, 1, "", "to_dict"], [17, 3, 1, "", "update"]], "merlion.utils.conj_priors.MVNormInvWishart": [[17, 3, 1, "", "Sigma_posterior"], [17, 3, 1, "", "forecast"], [17, 3, 1, "", "mu_posterior"], [17, 4, 1, "", "n_params"], [17, 3, 1, "", "posterior"], [17, 3, 1, "", "process_time_series"], [17, 3, 1, "", "update"]], "merlion.utils.conj_priors.NormInvGamma": [[17, 3, 1, "", "forecast"], [17, 3, 1, "", "mu_posterior"], [17, 4, 1, "", "n_params"], [17, 3, 1, "", "posterior"], [17, 3, 1, "", "sigma2_posterior"], [17, 3, 1, "", "update"]], "merlion.utils.conj_priors.ScalarConjPrior": [[17, 3, 1, "", "get_time_series_values"], [17, 3, 1, "", "process_time_series"]], "merlion.utils.data_io": [[17, 5, 1, "", "csv_to_time_series"], [17, 5, 1, "", "data_io_decorator"], [17, 5, 1, "", "df_to_time_series"]], "merlion.utils.hts": [[17, 5, 1, "", "minT_reconciliation"]], "merlion.utils.istat": [[17, 1, 1, "", "ExponentialMovingAverage"], [17, 1, 1, "", "IStat"], [17, 1, 1, "", "Mean"], [17, 1, 1, "", "RecencyWeightedVariance"], [17, 1, 1, "", "Variance"]], "merlion.utils.istat.ExponentialMovingAverage": [[17, 3, 1, "", "drop"], [17, 4, 1, "", "recency_weight"], [17, 4, 1, "", "value"]], "merlion.utils.istat.IStat": [[17, 3, 1, "", "add"], [17, 3, 1, "", "add_batch"], [17, 3, 1, "", "drop"], [17, 3, 1, "", "drop_batch"], [17, 4, 1, "", "n"], [17, 4, 1, "", "value"]], "merlion.utils.istat.Mean": [[17, 3, 1, "", "add"], [17, 3, 1, "", "drop"], [17, 4, 1, "", "value"]], "merlion.utils.istat.RecencyWeightedVariance": [[17, 3, 1, "", "drop"], [17, 2, 1, "", "mean_class"], [17, 4, 1, "", "recency_weight"]], "merlion.utils.istat.Variance": [[17, 3, 1, "", "add"], [17, 4, 1, "", "corrected_value"], [17, 3, 1, "", "drop"], [17, 2, 1, "", "mean_class"], [17, 4, 1, "", "sd"], [17, 4, 1, "", "se"], [17, 4, 1, "", "true_value"], [17, 4, 1, "", "value"]], "merlion.utils.resample": [[17, 1, 1, "", "AggregationPolicy"], [17, 1, 1, "", "AlignPolicy"], [17, 1, 1, "", "MissingValuePolicy"], [17, 5, 1, "", "get_date_offset"], [17, 5, 1, "", "granularity_str_to_seconds"], [17, 5, 1, "", "infer_granularity"], [17, 5, 1, "", "reindex_df"], [17, 5, 1, "", "to_offset"], [17, 5, 1, "", "to_pd_datetime"], [17, 5, 1, "", "to_timestamp"]], "merlion.utils.resample.AggregationPolicy": [[17, 2, 1, "", "First"], [17, 2, 1, "", "Last"], [17, 2, 1, "", "Max"], [17, 2, 1, "", "Mean"], [17, 2, 1, "", "Median"], [17, 2, 1, "", "Min"], [17, 2, 1, "", "Sum"]], "merlion.utils.resample.AlignPolicy": [[17, 2, 1, "", "FixedGranularity"], [17, 2, 1, "", "FixedReference"], [17, 2, 1, "", "InnerJoin"], [17, 2, 1, "", "OuterJoin"]], "merlion.utils.resample.MissingValuePolicy": [[17, 2, 1, "", "BFill"], [17, 2, 1, "", "FFill"], [17, 2, 1, "", "Interpolate"], [17, 2, 1, "", "Nearest"], [17, 2, 1, "", "ZFill"]], "merlion.utils.time_series": [[17, 1, 1, "", "TimeSeries"], [17, 1, 1, "", "UnivariateTimeSeries"], [17, 5, 1, "", "assert_equal_timedeltas"]], "merlion.utils.time_series.TimeSeries": [[17, 3, 1, "", "__getitem__"], [17, 3, 1, "", "__iter__"], [17, 3, 1, "", "align"], [17, 3, 1, "", "bisect"], [17, 3, 1, "", "concat"], [17, 4, 1, "", "dim"], [17, 3, 1, "", "from_pd"], [17, 3, 1, "", "from_ts_list"], [17, 4, 1, "", "index"], [17, 4, 1, "", "is_aligned"], [17, 3, 1, "", "is_empty"], [17, 3, 1, "", "items"], [17, 4, 1, "", "names"], [17, 4, 1, "", "np_time_stamps"], [17, 3, 1, "", "rename"], [17, 4, 1, "", "shape"], [17, 3, 1, "", "squeeze"], [17, 4, 1, "", "t0"], [17, 4, 1, "", "tf"], [17, 4, 1, "", "time_stamps"], [17, 3, 1, "", "to_csv"], [17, 3, 1, "", "to_pd"], [17, 3, 1, "", "window"]], "merlion.utils.time_series.UnivariateTimeSeries": [[17, 3, 1, "", "__getitem__"], [17, 3, 1, "", "__iter__"], [17, 3, 1, "", "bisect"], [17, 3, 1, "", "concat"], [17, 3, 1, "", "copy"], [17, 3, 1, "", "empty"], [17, 3, 1, "", "from_dict"], [17, 3, 1, "", "from_pd"], [17, 3, 1, "", "is_empty"], [17, 4, 1, "", "np_time_stamps"], [17, 4, 1, "", "np_values"], [17, 4, 1, "", "t0"], [17, 4, 1, "", "tf"], [17, 4, 1, "", "time_stamps"], [17, 3, 1, "", "to_dict"], [17, 3, 1, "", "to_pd"], [17, 3, 1, "", "to_ts"], [17, 4, 1, "", "values"], [17, 3, 1, "", "window"]], "merlion.utils.ts_generator": [[17, 1, 1, "", "GeneratorComposer"], [17, 1, 1, "", "GeneratorConcatenator"], [17, 1, 1, "", "TimeSeriesGenerator"]], "merlion.utils.ts_generator.GeneratorComposer": [[17, 4, 1, "", "generators"]], "merlion.utils.ts_generator.GeneratorConcatenator": [[17, 4, 1, "", "generators"], [17, 3, 1, "", "y"]], "merlion.utils.ts_generator.TimeSeriesGenerator": [[17, 3, 1, "", "generate"], [17, 4, 1, "", "n"], [17, 4, 1, "", "step"], [17, 4, 1, "", "x0"], [17, 3, 1, "", "y"]], "ts_datasets": [[19, 0, 0, "-", "anomaly"], [18, 0, 0, "-", "base"], [20, 0, 0, "-", "forecast"]], "ts_datasets.anomaly": [[19, 1, 1, "", "CustomAnomalyDataset"], [19, 1, 1, "", "IOpsCompetition"], [19, 1, 1, "", "MSL"], [19, 1, 1, "", "NAB"], [19, 1, 1, "", "SMAP"], [19, 1, 1, "", "SMD"], [19, 1, 1, "", "Synthetic"], [19, 1, 1, "", "TSADBaseDataset"], [19, 1, 1, "", "UCR"], [19, 5, 1, "", "get_dataset"]], "ts_datasets.anomaly.CustomAnomalyDataset": [[19, 3, 1, "", "check_ts_for_metadata"], [19, 4, 1, "", "metadata_cols"]], "ts_datasets.anomaly.IOpsCompetition": [[19, 4, 1, "", "max_lag_sec"]], "ts_datasets.anomaly.MSL": [[19, 2, 1, "", "url"]], "ts_datasets.anomaly.NAB": [[19, 3, 1, "", "download"], [19, 3, 1, "", "load_labels"], [19, 4, 1, "", "max_lead_sec"], [19, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.SMAP": [[19, 2, 1, "", "url"]], "ts_datasets.anomaly.SMD": [[19, 2, 1, "", "filename"], [19, 2, 1, "", "url"], [19, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.Synthetic": [[19, 2, 1, "", "anomaly_subsets"], [19, 2, 1, "", "base_ts_subsets"], [19, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.TSADBaseDataset": [[19, 3, 1, "", "describe"], [19, 4, 1, "", "max_lag_sec"], [19, 4, 1, "", "max_lead_sec"]], "ts_datasets.anomaly.UCR": [[19, 3, 1, "", "download"]], "ts_datasets.base": [[18, 1, 1, "", "BaseDataset"]], "ts_datasets.base.BaseDataset": [[18, 3, 1, "", "describe"], [18, 2, 1, "", "metadata"], [18, 2, 1, "", "time_series"]], "ts_datasets.forecast": [[20, 1, 1, "", "CustomDataset"], [20, 1, 1, "", "EnergyPower"], [20, 1, 1, "", "M4"], [20, 1, 1, "", "SeattleTrail"], [20, 1, 1, "", "SolarPlant"], [20, 5, 1, "", "get_dataset"]], "ts_datasets.forecast.CustomDataset": [[20, 3, 1, "", "check_ts_for_metadata"], [20, 4, 1, "", "metadata_cols"]], "ts_datasets.forecast.M4": [[20, 2, 1, "", "url"], [20, 2, 1, "", "valid_subsets"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"merlion": [0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 23, 26, 27, 30, 31], "architectur": 0, "transform": [0, 11, 16, 25], "train": [0, 24, 27, 28, 31, 32], "invers": [0, 25], "multivari": [0, 6, 11, 28, 32], "time": [0, 2, 23, 28, 32], "seri": [0, 2, 23, 28, 32], "model": [0, 5, 6, 9, 11, 24, 27, 28, 29, 31, 32, 34], "pre": 0, "process": 0, "user": 0, "defin": [0, 34], "implement": 0, "post": [0, 29], "multipl": 0, "variant": 0, "simpl": [0, 29, 34], "ensembl": [0, 10], "layer": [0, 5], "other": 0, "modul": [0, 18], "welcom": 1, "": [1, 23], "document": [1, 15], "instal": 1, "get": 1, "start": 1, "content": 1, "indic": 1, "tabl": 1, "intellig": 2, "dashboard": 3, "packag": [3, 4, 5, 13, 14, 15, 16, 17, 19, 20], "evalu": [4, 27, 28, 29, 31, 32, 34], "base": [4, 5, 6, 8, 9, 10, 11, 14, 16, 18, 34], "anomali": [4, 6, 7, 8, 10, 19, 21, 22, 26, 27, 28, 29, 34], "forecast": [4, 10, 11, 20, 21, 22, 24, 25, 30, 31, 32, 33, 34], "subpackag": [5, 6, 18], "default": [5, 24], "factori": [5, 14, 16], "deep_bas": [5, 11], "class": [6, 9, 11, 23, 29, 34], "univari": [6, 11], "dbl": 6, "windstat": 6, "spectral_residu": 6, "stat_threshold": 6, "zm": 6, "isolation_forest": 6, "random_cut_forest": 6, "autoencod": 6, "vae": 6, "dagmm": 6, "lstm_ed": 6, "deep_point_anomaly_detector": 6, "change_point": 7, "bocpd": 7, "forecast_bas": 8, "arima": [8, 11], "sarima": [8, 11], "et": [8, 11], "prophet": [8, 11], "mse": 8, "automl": 9, "autoet": 9, "autoprophet": 9, "autosarima": [9, 24], "util": [9, 12, 17], "season": 9, "search": 9, "combin": 10, "sklearn_bas": 11, "smoother": 11, "vector_ar": 11, "tree": 11, "deep_ar": 11, "autoform": 11, "etsform": 11, "inform": 11, "time_featur": 12, "rolling_window_dataset": 12, "early_stop": 12, "autosarima_util": 12, "plot": 13, "post_process": 14, "sequenc": [14, 16], "calibr": 14, "threshold": 14, "spark": 15, "set": 15, "up": 15, "k8": 15, "oper": 15, "specifi": 15, "app": 15, "api": 15, "dataset": [15, 18, 22, 24], "pandas_udf": 15, "primit": 16, "resampl": [16, 17], "moving_averag": 16, "normal": 16, "bound": 16, "miscellan": 16, "anom": 16, "time_seri": 17, "data_io": 17, "ht": 17, "ts_gener": 17, "conj_prior": 17, "istat": 17, "ts_dataset": [18, 19, 20], "easi": 18, "data": [18, 23], "load": [18, 22, 27, 31], "tutori": [21, 24], "exampl": [21, 29, 34], "code": 21, "basic": [21, 23], "detect": [21, 22, 26, 28, 29], "advanc": 21, "featur": [21, 23], "custom": [22, 29], "gener": 22, "purpos": 22, "broader": 22, "takeawai": 22, "format": 23, "univariatetimeseri": 23, "The": 23, "build": 23, "block": 23, "timeseri": 23, "standard": 23, "index": 23, "align": 23, "A": [23, 26, 29, 30, 34], "few": 23, "us": [23, 27, 31], "prepar": 24, "full": 24, "approxim": 24, "suggest": 24, "without": 24, "slower": 24, "partial": 24, "proof": 25, "concept": 25, "gentl": [26, 30], "introduct": [26, 30], "how": [27, 31], "detector": [27, 34], "initi": [27, 28, 31, 32], "infer": [27, 28, 31, 32], "quantit": [27, 28, 29, 31, 32, 34], "visual": [27, 29, 31, 34], "save": [27, 31], "simul": [27, 31], "live": [27, 31], "deploy": [27, 31], "ad": [29, 34], "new": [29, 34], "config": [29, 34], "run": [29, 34], "rule": 29, "With": 33, "exogen": 33, "regressor": 33}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Merlion Architecture": [[0, "merlion-architecture"]], "Transforms": [[0, "transforms"]], "Training": [[0, "training"]], "Inversion": [[0, "inversion"]], "Multivariate Time Series": [[0, "multivariate-time-series"]], "Models": [[0, "models"], [9, "models"]], "Pre-Processing": [[0, "pre-processing"]], "User-Defined Implementations": [[0, "user-defined-implementations"]], "Post-Processing": [[0, "post-processing"], [0, "id1"]], "Multiple Time Series": [[0, "multiple-time-series"]], "Model Variants": [[0, "model-variants"]], "Simple Variants": [[0, "simple-variants"]], "Ensembles": [[0, "ensembles"]], "Layered Models": [[0, "layered-models"]], "Other Modules": [[0, "other-modules"]], "Welcome to Merlion\u2019s documentation!": [[1, "welcome-to-merlion-s-documentation"]], "Installation": [[1, "installation"]], "Getting Started": [[1, "getting-started"]], "Contents:": [[1, null]], "Indices and tables": [[1, "indices-and-tables"]], "merlion: Time Series Intelligence": [[2, "merlion-time-series-intelligence"]], "merlion.dashboard package": [[3, "merlion-dashboard-package"]], "merlion.evaluate package": [[4, "merlion-evaluate-package"]], "merlion.evaluate.base": [[4, "module-merlion.evaluate.base"]], "merlion.evaluate.anomaly": [[4, "module-merlion.evaluate.anomaly"]], "merlion.evaluate.forecast": [[4, "module-merlion.evaluate.forecast"]], "merlion.models package": [[5, "merlion-models-package"]], "Subpackages": [[5, "subpackages"], [6, "subpackages"], [18, "subpackages"]], "defaults": [[5, "module-merlion.models.defaults"]], "factory": [[5, "module-merlion.models.factory"]], "base": [[5, "module-merlion.models.base"]], "deep_base": [[5, "module-merlion.models.deep_base"]], "layers": [[5, "module-merlion.models.layers"]], "anomaly": [[6, "module-merlion.models.anomaly"]], "Base classes": [[6, "base-classes"], [9, "base-classes"], [11, "base-classes"]], "anomaly.base": [[6, "module-merlion.models.anomaly.base"]], "Univariate models": [[6, "univariate-models"], [11, "univariate-models"]], "anomaly.dbl": [[6, "module-merlion.models.anomaly.dbl"]], "anomaly.windstats": [[6, "module-merlion.models.anomaly.windstats"]], "anomaly.spectral_residual": [[6, "module-merlion.models.anomaly.spectral_residual"]], "anomaly.stat_threshold": [[6, "module-merlion.models.anomaly.stat_threshold"]], "anomaly.zms": [[6, "module-merlion.models.anomaly.zms"]], "Multivariate models": [[6, "multivariate-models"], [11, "multivariate-models"]], "anomaly.isolation_forest": [[6, "module-merlion.models.anomaly.isolation_forest"]], "anomaly.random_cut_forest": [[6, "module-merlion.models.anomaly.random_cut_forest"]], "anomaly.autoencoder": [[6, "module-merlion.models.anomaly.autoencoder"]], "anomaly.vae": [[6, "module-merlion.models.anomaly.vae"]], "anomaly.dagmm": [[6, "module-merlion.models.anomaly.dagmm"]], "anomaly.lstm_ed": [[6, "module-merlion.models.anomaly.lstm_ed"]], "anomaly.deep_point_anomaly_detector": [[6, "module-merlion.models.anomaly.deep_point_anomaly_detector"]], "anomaly.change_point": [[7, "module-merlion.models.anomaly.change_point"]], "anomaly.change_point.bocpd": [[7, "module-merlion.models.anomaly.change_point.bocpd"]], "anomaly.forecast_based": [[8, "module-merlion.models.anomaly.forecast_based"]], "anomaly.forecast_based.base": [[8, "module-merlion.models.anomaly.forecast_based.base"]], "anomaly.forecast_based.arima": [[8, "module-merlion.models.anomaly.forecast_based.arima"]], "anomaly.forecast_based.sarima": [[8, "module-merlion.models.anomaly.forecast_based.sarima"]], "anomaly.forecast_based.ets": [[8, "module-merlion.models.anomaly.forecast_based.ets"]], "anomaly.forecast_based.prophet": [[8, "module-merlion.models.anomaly.forecast_based.prophet"]], "anomaly.forecast_based.mses": [[8, "module-merlion.models.anomaly.forecast_based.mses"]], "automl": [[9, "module-merlion.models.automl"]], "automl.base": [[9, "module-merlion.models.automl.base"]], "automl.autoets": [[9, "module-merlion.models.automl.autoets"]], "automl.autoprophet": [[9, "module-merlion.models.automl.autoprophet"]], "automl.autosarima": [[9, "module-merlion.models.automl.autosarima"]], "Utilities": [[9, "utilities"]], "automl.seasonality": [[9, "module-merlion.models.automl.seasonality"]], "automl.search": [[9, "module-merlion.models.automl.search"]], "ensemble": [[10, "module-merlion.models.ensemble"]], "ensemble.base": [[10, "module-merlion.models.ensemble.base"]], "ensemble.combine": [[10, "module-merlion.models.ensemble.combine"]], "ensemble.anomaly": [[10, "module-merlion.models.ensemble.anomaly"]], "ensemble.forecast": [[10, "module-merlion.models.ensemble.forecast"]], "forecast": [[11, "module-merlion.models.forecast"]], "forecast.base": [[11, "module-merlion.models.forecast.base"]], "forecast.deep_base": [[11, "module-merlion.models.forecast.deep_base"]], "forecast.sklearn_base": [[11, "module-merlion.models.forecast.sklearn_base"]], "forecast.arima": [[11, "module-merlion.models.forecast.arima"]], "forecast.sarima": [[11, "module-merlion.models.forecast.sarima"]], "forecast.ets": [[11, "module-merlion.models.forecast.ets"]], "forecast.prophet": [[11, "module-merlion.models.forecast.prophet"]], "forecast.smoother": [[11, "module-merlion.models.forecast.smoother"]], "forecast.vector_ar": [[11, "module-merlion.models.forecast.vector_ar"]], "forecast.trees": [[11, "module-merlion.models.forecast.trees"]], "forecast.deep_ar": [[11, "module-merlion.models.forecast.deep_ar"]], "forecast.autoformer": [[11, "module-merlion.models.forecast.autoformer"]], "forecast.etsformer": [[11, "module-merlion.models.forecast.etsformer"]], "forecast.informer": [[11, "module-merlion.models.forecast.informer"]], "forecast.transformer": [[11, "module-merlion.models.forecast.transformer"]], "utils": [[12, "module-merlion.models.utils"]], "utils.time_features": [[12, "module-merlion.models.utils.time_features"]], "utils.rolling_window_dataset": [[12, "module-merlion.models.utils.rolling_window_dataset"]], "utils.early_stopping": [[12, "module-merlion.models.utils.early_stopping"]], "utils.autosarima_utils": [[12, "module-merlion.models.utils.autosarima_utils"]], "merlion.plot package": [[13, "module-merlion.plot"]], "merlion.post_process package": [[14, "merlion-post-process-package"]], "merlion.post_process.base": [[14, "module-merlion.post_process.base"]], "merlion.post_process.factory": [[14, "module-merlion.post_process.factory"]], "merlion.post_process.sequence": [[14, "module-merlion.post_process.sequence"]], "merlion.post_process.calibrate": [[14, "merlion-post-process-calibrate"]], "merlion.post_process.threshold": [[14, "module-merlion.post_process.threshold"]], "merlion.spark package": [[15, "merlion-spark-package"]], "Setting up the spark-on-k8s-operator": [[15, "setting-up-the-spark-on-k8s-operator"]], "Specifying a Spark App": [[15, "specifying-a-spark-app"]], "API Documentation": [[15, "api-documentation"]], "merlion.spark.dataset": [[15, "module-merlion.spark.dataset"]], "merlion.spark.pandas_udf": [[15, "module-merlion.spark.pandas_udf"]], "merlion.transform package": [[16, "merlion-transform-package"]], "Base primitives": [[16, "base-primitives"]], "transform.factory": [[16, "module-merlion.transform.factory"]], "transform.base": [[16, "module-merlion.transform.base"]], "transform.sequence": [[16, "module-merlion.transform.sequence"]], "Resampling": [[16, "resampling"]], "transform.resample": [[16, "module-merlion.transform.resample"]], "transform.moving_average": [[16, "module-merlion.transform.moving_average"]], "Normalization": [[16, "normalization"]], "transform.normalize": [[16, "module-merlion.transform.normalize"]], "transform.bound": [[16, "module-merlion.transform.bound"]], "Miscellaneous": [[16, "miscellaneous"]], "transform.anomalize": [[16, "module-merlion.transform.anomalize"]], "merlion.utils package": [[17, "merlion-utils-package"]], "merlion.utils.time_series": [[17, "module-merlion.utils.time_series"]], "merlion.utils.resample": [[17, "module-merlion.utils.resample"]], "merlion.utils.data_io": [[17, "module-merlion.utils.data_io"]], "merlion.utils.hts": [[17, "module-merlion.utils.hts"]], "merlion.utils.ts_generator": [[17, "module-merlion.utils.ts_generator"]], "merlion.utils.conj_priors": [[17, "module-merlion.utils.conj_priors"]], "merlion.utils.istat": [[17, "module-merlion.utils.istat"]], "ts_datasets: Easy Data Loading": [[18, "ts-datasets-easy-data-loading"]], "datasets.base module": [[18, "module-ts_datasets.base"]], "ts_datasets.anomaly package": [[19, "module-ts_datasets.anomaly"]], "ts_datasets.forecast package": [[20, "module-ts_datasets.forecast"]], "Tutorials & Example Code": [[21, "tutorials-example-code"]], "Basics": [[21, "basics"]], "Anomaly Detection": [[21, "anomaly-detection"]], "Forecasting": [[21, "forecasting"]], "Advanced Features": [[21, "advanced-features"]], "Loading Custom Datasets": [[22, "Loading-Custom-Datasets"]], "Anomaly Detection Datasets": [[22, "Anomaly-Detection-Datasets"]], "General Purpose (Forecasting) Datasets": [[22, "General-Purpose-(Forecasting)-Datasets"]], "Broader Takeaways": [[22, "Broader-Takeaways"]], "Merlion\u2019s Data Format": [[23, "Merlion's-Data-Format"]], "UnivariateTimeSeries: The Basic Building Block": [[23, "UnivariateTimeSeries:-The-Basic-Building-Block"]], "TimeSeries: Merlion\u2019s Standard Data Class": [[23, "TimeSeries:-Merlion's-Standard-Data-Class"]], "Time Series Indexing & Alignment": [[23, "Time-Series-Indexing-&-Alignment"]], "TimeSeries: A Few Useful Features": [[23, "TimeSeries:-A-Few-Useful-Features"]], "Tutorial for AutoSARIMA Forecasting Model": [[24, "Tutorial-for-AutoSARIMA-Forecasting-Model"]], "Prepare dataset": [[24, "Prepare-dataset"]], "Train a full AutoSarima model with approximation (suggested, default)": [[24, "Train-a-full-AutoSarima-model-with-approximation-(suggested,-default)"]], "Train a full AutoSarima model without approximation (slower)": [[24, "Train-a-full-AutoSarima-model-without-approximation-(slower)"]], "Train a partial autosarima model": [[24, "Train-a-partial-autosarima-model"]], "Proof of Concept: Inverse Transforms for Forecasters": [[25, "Proof-of-Concept:-Inverse-Transforms-for-Forecasters"]], "A Gentle Introduction to Anomaly Detection in Merlion": [[26, "A-Gentle-Introduction-to-Anomaly-Detection-in-Merlion"]], "How to Use Anomaly Detectors in Merlion": [[27, "How-to-Use-Anomaly-Detectors-in-Merlion"]], "Model Initialization": [[27, "Model-Initialization"], [31, "Model-Initialization"]], "Model Training": [[27, "Model-Training"], [31, "Model-Training"]], "Model Inference": [[27, "Model-Inference"], [31, "Model-Inference"]], "Quantitative Evaluation": [[27, "Quantitative-Evaluation"], [29, "Quantitative-Evaluation"], [34, "Quantitative-Evaluation"]], "Model Visualization": [[27, "Model-Visualization"]], "Saving & Loading Models": [[27, "Saving-&-Loading-Models"], [31, "Saving-&-Loading-Models"]], "Simulating Live Model Deployment": [[27, "Simulating-Live-Model-Deployment"], [31, "Simulating-Live-Model-Deployment"]], "Multivariate Time Series Anomaly Detection": [[28, "Multivariate-Time-Series-Anomaly-Detection"]], "Model Initialization and Training": [[28, "Model-Initialization-and-Training"], [32, "Model-Initialization-and-Training"]], "Model Inference and Quantitative Evaluation": [[28, "Model-Inference-and-Quantitative-Evaluation"], [32, "Model-Inference-and-Quantitative-Evaluation"]], "Adding New Anomaly Detection Models": [[29, "Adding-New-Anomaly-Detection-Models"]], "Model Config Class": [[29, "Model-Config-Class"], [34, "Model-Config-Class"]], "Model Class": [[29, "Model-Class"], [34, "Model-Class"]], "Running the Model: A Simple Example": [[29, "Running-the-Model:-A-Simple-Example"], [34, "Running-the-Model:-A-Simple-Example"]], "Visualization": [[29, "Visualization"], [34, "Visualization"]], "Customizing the Post-Rule": [[29, "Customizing-the-Post-Rule"]], "A Gentle Introduction to Forecasting in Merlion": [[30, "A-Gentle-Introduction-to-Forecasting-in-Merlion"]], "How to Use Forecasters in Merlion": [[31, "How-to-Use-Forecasters-in-Merlion"]], "Model Visualization and Quantitative Evaluation": [[31, "Model-Visualization-and-Quantitative-Evaluation"]], "Multivariate Time Series Forecasting": [[32, "Multivariate-Time-Series-Forecasting"]], "Forecasting With Exogenous Regressors": [[33, "Forecasting-With-Exogenous-Regressors"]], "Adding a New Forecasting Model": [[34, "Adding-a-New-Forecasting-Model"]], "Defining a Forecaster-Based Anomaly Detector": [[34, "Defining-a-Forecaster-Based-Anomaly-Detector"]]}, "indexentries": {"merlion": [[2, "module-merlion"]], "module": [[2, "module-merlion"], [4, "module-merlion.evaluate"], [4, "module-merlion.evaluate.anomaly"], [4, "module-merlion.evaluate.base"], [4, "module-merlion.evaluate.forecast"], [5, "module-merlion.models"], [5, "module-merlion.models.base"], [5, "module-merlion.models.deep_base"], [5, "module-merlion.models.defaults"], [5, "module-merlion.models.factory"], [5, "module-merlion.models.layers"], [6, "module-merlion.models.anomaly"], [6, "module-merlion.models.anomaly.autoencoder"], [6, "module-merlion.models.anomaly.base"], [6, "module-merlion.models.anomaly.dagmm"], [6, "module-merlion.models.anomaly.dbl"], [6, "module-merlion.models.anomaly.deep_point_anomaly_detector"], [6, "module-merlion.models.anomaly.isolation_forest"], [6, "module-merlion.models.anomaly.lstm_ed"], [6, "module-merlion.models.anomaly.random_cut_forest"], [6, "module-merlion.models.anomaly.spectral_residual"], [6, "module-merlion.models.anomaly.stat_threshold"], [6, "module-merlion.models.anomaly.vae"], [6, "module-merlion.models.anomaly.windstats"], [6, "module-merlion.models.anomaly.zms"], [7, "module-merlion.models.anomaly.change_point"], [7, "module-merlion.models.anomaly.change_point.bocpd"], [8, "module-merlion.models.anomaly.forecast_based"], [8, "module-merlion.models.anomaly.forecast_based.arima"], [8, "module-merlion.models.anomaly.forecast_based.base"], [8, "module-merlion.models.anomaly.forecast_based.ets"], [8, "module-merlion.models.anomaly.forecast_based.mses"], [8, "module-merlion.models.anomaly.forecast_based.prophet"], [8, "module-merlion.models.anomaly.forecast_based.sarima"], [9, "module-merlion.models.automl"], [9, "module-merlion.models.automl.autoets"], [9, "module-merlion.models.automl.autoprophet"], [9, "module-merlion.models.automl.autosarima"], [9, "module-merlion.models.automl.base"], [9, "module-merlion.models.automl.search"], [9, "module-merlion.models.automl.seasonality"], [10, "module-merlion.models.ensemble"], [10, "module-merlion.models.ensemble.anomaly"], [10, "module-merlion.models.ensemble.base"], [10, "module-merlion.models.ensemble.combine"], [10, "module-merlion.models.ensemble.forecast"], [11, "module-merlion.models.forecast"], [11, "module-merlion.models.forecast.arima"], [11, "module-merlion.models.forecast.autoformer"], [11, "module-merlion.models.forecast.base"], [11, "module-merlion.models.forecast.deep_ar"], [11, "module-merlion.models.forecast.deep_base"], [11, "module-merlion.models.forecast.ets"], [11, "module-merlion.models.forecast.etsformer"], [11, "module-merlion.models.forecast.informer"], [11, "module-merlion.models.forecast.prophet"], [11, "module-merlion.models.forecast.sarima"], [11, "module-merlion.models.forecast.sklearn_base"], [11, "module-merlion.models.forecast.smoother"], [11, "module-merlion.models.forecast.transformer"], [11, "module-merlion.models.forecast.trees"], [11, "module-merlion.models.forecast.vector_ar"], [12, "module-merlion.models.utils"], [12, "module-merlion.models.utils.autosarima_utils"], [12, "module-merlion.models.utils.early_stopping"], [12, "module-merlion.models.utils.rolling_window_dataset"], [12, "module-merlion.models.utils.time_features"], [13, "module-merlion.plot"], [14, "module-merlion.post_process"], [14, "module-merlion.post_process.base"], [14, "module-merlion.post_process.calibrate"], [14, "module-merlion.post_process.factory"], [14, "module-merlion.post_process.sequence"], [14, "module-merlion.post_process.threshold"], [15, "module-merlion.spark"], [15, "module-merlion.spark.dataset"], [15, "module-merlion.spark.pandas_udf"], [16, "module-merlion.transform"], [16, "module-merlion.transform.anomalize"], [16, "module-merlion.transform.base"], [16, "module-merlion.transform.bound"], [16, "module-merlion.transform.factory"], [16, "module-merlion.transform.moving_average"], [16, "module-merlion.transform.normalize"], [16, "module-merlion.transform.resample"], [16, "module-merlion.transform.sequence"], [17, "module-merlion.utils"], [17, "module-merlion.utils.conj_priors"], [17, "module-merlion.utils.data_io"], [17, "module-merlion.utils.hts"], [17, "module-merlion.utils.istat"], [17, "module-merlion.utils.resample"], [17, "module-merlion.utils.time_series"], [17, "module-merlion.utils.ts_generator"], [18, "module-ts_datasets"], [18, "module-ts_datasets.base"], [19, "module-ts_datasets.anomaly"], [20, "module-ts_datasets.forecast"]], "evaluatorbase (class in merlion.evaluate.base)": [[4, "merlion.evaluate.base.EvaluatorBase"]], "evaluatorconfig (class in merlion.evaluate.base)": [[4, "merlion.evaluate.base.EvaluatorConfig"]], "f1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.F1"]], "f2 (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.F2"]], "f5 (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.F5"]], "forecastevaluator (class in merlion.evaluate.forecast)": [[4, "merlion.evaluate.forecast.ForecastEvaluator"]], "forecastevaluatorconfig (class in merlion.evaluate.forecast)": [[4, "merlion.evaluate.forecast.ForecastEvaluatorConfig"]], "forecastmetric (class in merlion.evaluate.forecast)": [[4, "merlion.evaluate.forecast.ForecastMetric"]], "forecastscoreaccumulator (class in merlion.evaluate.forecast)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator"]], "mae (merlion.evaluate.forecast.forecastmetric attribute)": [[4, "merlion.evaluate.forecast.ForecastMetric.MAE"]], "marre (merlion.evaluate.forecast.forecastmetric attribute)": [[4, "merlion.evaluate.forecast.ForecastMetric.MARRE"]], "mase (merlion.evaluate.forecast.forecastmetric attribute)": [[4, "merlion.evaluate.forecast.ForecastMetric.MASE"]], "msis (merlion.evaluate.forecast.forecastmetric attribute)": [[4, "merlion.evaluate.forecast.ForecastMetric.MSIS"]], "meantimetodetect (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.MeanTimeToDetect"]], "nabscore (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.NABScore"]], "nabscorelowfn (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.NABScoreLowFN"]], "nabscorelowfp (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.NABScoreLowFP"]], "pointadjusted (merlion.evaluate.anomaly.scoretype attribute)": [[4, "merlion.evaluate.anomaly.ScoreType.PointAdjusted"]], "pointadjustedf1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedF1"]], "pointadjustedprecision (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedPrecision"]], "pointadjustedrecall (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedRecall"]], "pointwise (merlion.evaluate.anomaly.scoretype attribute)": [[4, "merlion.evaluate.anomaly.ScoreType.Pointwise"]], "pointwisef1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.PointwiseF1"]], "pointwiseprecision (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.PointwisePrecision"]], "pointwiserecall (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.PointwiseRecall"]], "precision (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.Precision"]], "rmse (merlion.evaluate.forecast.forecastmetric attribute)": [[4, "merlion.evaluate.forecast.ForecastMetric.RMSE"]], "rmspe (merlion.evaluate.forecast.forecastmetric attribute)": [[4, "merlion.evaluate.forecast.ForecastMetric.RMSPE"]], "recall (merlion.evaluate.anomaly.tsadmetric attribute)": [[4, "merlion.evaluate.anomaly.TSADMetric.Recall"]], "revisedpointadjusted (merlion.evaluate.anomaly.scoretype attribute)": [[4, "merlion.evaluate.anomaly.ScoreType.RevisedPointAdjusted"]], "scoretype (class in merlion.evaluate.anomaly)": [[4, "merlion.evaluate.anomaly.ScoreType"]], "tsadevaluator (class in merlion.evaluate.anomaly)": [[4, "merlion.evaluate.anomaly.TSADEvaluator"]], "tsadevaluatorconfig (class in merlion.evaluate.anomaly)": [[4, "merlion.evaluate.anomaly.TSADEvaluatorConfig"]], "tsadmetric (class in merlion.evaluate.anomaly)": [[4, "merlion.evaluate.anomaly.TSADMetric"]], "tsadscoreaccumulator (class in merlion.evaluate.anomaly)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator"]], "accumulate_forecast_score() (in module merlion.evaluate.forecast)": [[4, "merlion.evaluate.forecast.accumulate_forecast_score"]], "accumulate_tsad_score() (in module merlion.evaluate.anomaly)": [[4, "merlion.evaluate.anomaly.accumulate_tsad_score"]], "cadence (merlion.evaluate.base.evaluatorbase property)": [[4, "merlion.evaluate.base.EvaluatorBase.cadence"]], "cadence (merlion.evaluate.base.evaluatorconfig property)": [[4, "merlion.evaluate.base.EvaluatorConfig.cadence"]], "cadence (merlion.evaluate.forecast.forecastevaluator property)": [[4, "merlion.evaluate.forecast.ForecastEvaluator.cadence"]], "cadence (merlion.evaluate.forecast.forecastevaluatorconfig property)": [[4, "merlion.evaluate.forecast.ForecastEvaluatorConfig.cadence"]], "check_before_eval() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator.check_before_eval"]], "config_class (merlion.evaluate.anomaly.tsadevaluator attribute)": [[4, "merlion.evaluate.anomaly.TSADEvaluator.config_class"]], "config_class (merlion.evaluate.base.evaluatorbase attribute)": [[4, "merlion.evaluate.base.EvaluatorBase.config_class"]], "config_class (merlion.evaluate.forecast.forecastevaluator attribute)": [[4, "merlion.evaluate.forecast.ForecastEvaluator.config_class"]], "default_retrain_kwargs() (merlion.evaluate.anomaly.tsadevaluator method)": [[4, "merlion.evaluate.anomaly.TSADEvaluator.default_retrain_kwargs"]], "default_retrain_kwargs() (merlion.evaluate.base.evaluatorbase method)": [[4, "merlion.evaluate.base.EvaluatorBase.default_retrain_kwargs"]], "default_train_kwargs() (merlion.evaluate.base.evaluatorbase method)": [[4, "merlion.evaluate.base.EvaluatorBase.default_train_kwargs"]], "evaluate() (merlion.evaluate.anomaly.tsadevaluator method)": [[4, "merlion.evaluate.anomaly.TSADEvaluator.evaluate"]], "evaluate() (merlion.evaluate.base.evaluatorbase method)": [[4, "merlion.evaluate.base.EvaluatorBase.evaluate"]], "evaluate() (merlion.evaluate.forecast.forecastevaluator method)": [[4, "merlion.evaluate.forecast.ForecastEvaluator.evaluate"]], "f1() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator.f1"]], "f_beta() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator.f_beta"]], "get_predict() (merlion.evaluate.anomaly.tsadevaluator method)": [[4, "merlion.evaluate.anomaly.TSADEvaluator.get_predict"]], "get_predict() (merlion.evaluate.base.evaluatorbase method)": [[4, "merlion.evaluate.base.EvaluatorBase.get_predict"]], "horizon (merlion.evaluate.base.evaluatorbase property)": [[4, "merlion.evaluate.base.EvaluatorBase.horizon"]], "horizon (merlion.evaluate.base.evaluatorconfig property)": [[4, "merlion.evaluate.base.EvaluatorConfig.horizon"]], "horizon (merlion.evaluate.forecast.forecastevaluator property)": [[4, "merlion.evaluate.forecast.ForecastEvaluator.horizon"]], "horizon (merlion.evaluate.forecast.forecastevaluatorconfig property)": [[4, "merlion.evaluate.forecast.ForecastEvaluatorConfig.horizon"]], "mae() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator.mae"]], "marre() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator.marre"]], "mase() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator.mase"]], "max_delay_sec (merlion.evaluate.anomaly.tsadevaluator property)": [[4, "merlion.evaluate.anomaly.TSADEvaluator.max_delay_sec"]], "max_early_sec (merlion.evaluate.anomaly.tsadevaluator property)": [[4, "merlion.evaluate.anomaly.TSADEvaluator.max_early_sec"]], "mean_anomaly_duration() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_anomaly_duration"]], "mean_detected_anomaly_duration() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_detected_anomaly_duration"]], "mean_time_to_detect() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_time_to_detect"]], "merlion.evaluate": [[4, "module-merlion.evaluate"]], "merlion.evaluate.anomaly": [[4, "module-merlion.evaluate.anomaly"]], "merlion.evaluate.base": [[4, "module-merlion.evaluate.base"]], "merlion.evaluate.forecast": [[4, "module-merlion.evaluate.forecast"]], "msis() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator.msis"]], "nab_score() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator.nab_score"]], "precision() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator.precision"]], "recall() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[4, "merlion.evaluate.anomaly.TSADScoreAccumulator.recall"]], "retrain_freq (merlion.evaluate.base.evaluatorbase property)": [[4, "merlion.evaluate.base.EvaluatorBase.retrain_freq"]], "retrain_freq (merlion.evaluate.base.evaluatorconfig property)": [[4, "merlion.evaluate.base.EvaluatorConfig.retrain_freq"]], "rmse() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator.rmse"]], "rmspe() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator.rmspe"]], "smape (merlion.evaluate.forecast.forecastmetric attribute)": [[4, "merlion.evaluate.forecast.ForecastMetric.sMAPE"]], "smape() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[4, "merlion.evaluate.forecast.ForecastScoreAccumulator.smape"]], "to_dict() (merlion.evaluate.base.evaluatorconfig method)": [[4, "merlion.evaluate.base.EvaluatorConfig.to_dict"]], "train_window (merlion.evaluate.base.evaluatorbase property)": [[4, "merlion.evaluate.base.EvaluatorBase.train_window"]], "train_window (merlion.evaluate.base.evaluatorconfig property)": [[4, "merlion.evaluate.base.EvaluatorConfig.train_window"]], "adagrad (merlion.models.deep_base.optimizer attribute)": [[5, "merlion.models.deep_base.Optimizer.Adagrad"]], "adam (merlion.models.deep_base.optimizer attribute)": [[5, "merlion.models.deep_base.Optimizer.Adam"]], "adamw (merlion.models.deep_base.optimizer attribute)": [[5, "merlion.models.deep_base.Optimizer.AdamW"]], "config (class in merlion.models.base)": [[5, "merlion.models.base.Config"]], "deepconfig (class in merlion.models.deep_base)": [[5, "merlion.models.deep_base.DeepConfig"]], "deepmodelbase (class in merlion.models.deep_base)": [[5, "merlion.models.deep_base.DeepModelBase"]], "defaultdetector (class in merlion.models.defaults)": [[5, "merlion.models.defaults.DefaultDetector"]], "defaultdetectorconfig (class in merlion.models.defaults)": [[5, "merlion.models.defaults.DefaultDetectorConfig"]], "defaultforecaster (class in merlion.models.defaults)": [[5, "merlion.models.defaults.DefaultForecaster"]], "defaultforecasterconfig (class in merlion.models.defaults)": [[5, "merlion.models.defaults.DefaultForecasterConfig"]], "layereddetector (class in merlion.models.layers)": [[5, "merlion.models.layers.LayeredDetector"]], "layeredforecaster (class in merlion.models.layers)": [[5, "merlion.models.layers.LayeredForecaster"]], "layeredforecastingdetector (class in merlion.models.layers)": [[5, "merlion.models.layers.LayeredForecastingDetector"]], "layeredmodel (class in merlion.models.layers)": [[5, "merlion.models.layers.LayeredModel"]], "layeredmodelconfig (class in merlion.models.layers)": [[5, "merlion.models.layers.LayeredModelConfig"]], "lossfunction (class in merlion.models.deep_base)": [[5, "merlion.models.deep_base.LossFunction"]], "modelbase (class in merlion.models.base)": [[5, "merlion.models.base.ModelBase"]], "modelfactory (class in merlion.models.factory)": [[5, "merlion.models.factory.ModelFactory"]], "multipletimeseriesmodelmixin (class in merlion.models.base)": [[5, "merlion.models.base.MultipleTimeseriesModelMixin"]], "normalizingconfig (class in merlion.models.base)": [[5, "merlion.models.base.NormalizingConfig"]], "optimizer (class in merlion.models.deep_base)": [[5, "merlion.models.deep_base.Optimizer"]], "rmsprop (merlion.models.deep_base.optimizer attribute)": [[5, "merlion.models.deep_base.Optimizer.RMSprop"]], "sgd (merlion.models.deep_base.optimizer attribute)": [[5, "merlion.models.deep_base.Optimizer.SGD"]], "torchmodel (class in merlion.models.deep_base)": [[5, "merlion.models.deep_base.TorchModel"]], "auto_align (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.auto_align"]], "base_model (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.base_model"]], "base_model (merlion.models.layers.layeredmodel property)": [[5, "merlion.models.layers.LayeredModel.base_model"]], "base_model (merlion.models.layers.layeredmodelconfig property)": [[5, "merlion.models.layers.LayeredModelConfig.base_model"]], "config_class (merlion.models.base.modelbase attribute)": [[5, "merlion.models.base.ModelBase.config_class"]], "config_class (merlion.models.deep_base.deepmodelbase attribute)": [[5, "merlion.models.deep_base.DeepModelBase.config_class"]], "config_class (merlion.models.defaults.defaultdetector attribute)": [[5, "merlion.models.defaults.DefaultDetector.config_class"]], "config_class (merlion.models.defaults.defaultforecaster attribute)": [[5, "merlion.models.defaults.DefaultForecaster.config_class"]], "config_class (merlion.models.layers.layeredmodel attribute)": [[5, "merlion.models.layers.LayeredModel.config_class"]], "create() (merlion.models.factory.modelfactory class method)": [[5, "merlion.models.factory.ModelFactory.create"]], "deep_model_class (merlion.models.deep_base.deepmodelbase attribute)": [[5, "merlion.models.deep_base.DeepModelBase.deep_model_class"]], "device (merlion.models.deep_base.torchmodel property)": [[5, "merlion.models.deep_base.TorchModel.device"]], "dim (merlion.models.base.config attribute)": [[5, "merlion.models.base.Config.dim"]], "dim (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.dim"]], "filename (merlion.models.base.config attribute)": [[5, "merlion.models.base.Config.filename"]], "filename (merlion.models.base.modelbase attribute)": [[5, "merlion.models.base.ModelBase.filename"]], "forecast() (merlion.models.layers.layeredforecaster method)": [[5, "merlion.models.layers.LayeredForecaster.forecast"]], "forward() (merlion.models.deep_base.torchmodel method)": [[5, "merlion.models.deep_base.TorchModel.forward"]], "from_bytes() (merlion.models.base.modelbase class method)": [[5, "merlion.models.base.ModelBase.from_bytes"]], "from_dict() (merlion.models.base.config class method)": [[5, "merlion.models.base.Config.from_dict"]], "from_dict() (merlion.models.layers.layeredmodelconfig class method)": [[5, "merlion.models.layers.LayeredModelConfig.from_dict"]], "full_transform (merlion.models.base.normalizingconfig property)": [[5, "merlion.models.base.NormalizingConfig.full_transform"]], "get_anomaly_score() (merlion.models.layers.layereddetector method)": [[5, "merlion.models.layers.LayeredDetector.get_anomaly_score"]], "get_model_class() (merlion.models.factory.modelfactory class method)": [[5, "merlion.models.factory.ModelFactory.get_model_class"]], "get_unused_kwargs() (merlion.models.base.config method)": [[5, "merlion.models.base.Config.get_unused_kwargs"]], "get_unused_kwargs() (merlion.models.layers.layeredmodelconfig method)": [[5, "merlion.models.layers.LayeredModelConfig.get_unused_kwargs"]], "granularity (merlion.models.defaults.defaultdetector property)": [[5, "merlion.models.defaults.DefaultDetector.granularity"]], "granularity (merlion.models.defaults.defaultforecaster property)": [[5, "merlion.models.defaults.DefaultForecaster.granularity"]], "guassian_nll (merlion.models.deep_base.lossfunction attribute)": [[5, "merlion.models.deep_base.LossFunction.guassian_nll"]], "huber (merlion.models.deep_base.lossfunction attribute)": [[5, "merlion.models.deep_base.LossFunction.huber"]], "instantiate_or_copy_model() (in module merlion.models.factory)": [[5, "merlion.models.factory.instantiate_or_copy_model"]], "l1 (merlion.models.deep_base.lossfunction attribute)": [[5, "merlion.models.deep_base.LossFunction.l1"]], "last_train_time (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.last_train_time"]], "load() (merlion.models.base.modelbase class method)": [[5, "merlion.models.base.ModelBase.load"]], "load() (merlion.models.factory.modelfactory class method)": [[5, "merlion.models.factory.ModelFactory.load"]], "load_bytes() (merlion.models.factory.modelfactory class method)": [[5, "merlion.models.factory.ModelFactory.load_bytes"]], "loss_fn (merlion.models.deep_base.deepconfig property)": [[5, "merlion.models.deep_base.DeepConfig.loss_fn"]], "merlion.models": [[5, "module-merlion.models"]], "merlion.models.base": [[5, "module-merlion.models.base"]], "merlion.models.deep_base": [[5, "module-merlion.models.deep_base"]], "merlion.models.defaults": [[5, "module-merlion.models.defaults"]], "merlion.models.factory": [[5, "module-merlion.models.factory"]], "merlion.models.layers": [[5, "module-merlion.models.layers"]], "model (merlion.models.layers.layeredmodel property)": [[5, "merlion.models.layers.LayeredModel.model"]], "mse (merlion.models.deep_base.lossfunction attribute)": [[5, "merlion.models.deep_base.LossFunction.mse"]], "optimizer (merlion.models.deep_base.deepconfig property)": [[5, "merlion.models.deep_base.DeepConfig.optimizer"]], "require_even_sampling (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.require_even_sampling"]], "require_even_sampling (merlion.models.layers.layeredmodel property)": [[5, "merlion.models.layers.LayeredModel.require_even_sampling"]], "require_univariate (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.require_univariate"]], "require_univariate (merlion.models.layers.layeredmodel property)": [[5, "merlion.models.layers.LayeredModel.require_univariate"]], "reset() (merlion.models.base.modelbase method)": [[5, "merlion.models.base.ModelBase.reset"]], "reset() (merlion.models.defaults.defaultdetector method)": [[5, "merlion.models.defaults.DefaultDetector.reset"]], "reset() (merlion.models.defaults.defaultforecaster method)": [[5, "merlion.models.defaults.DefaultForecaster.reset"]], "reset() (merlion.models.layers.layeredmodel method)": [[5, "merlion.models.layers.LayeredModel.reset"]], "save() (merlion.models.base.modelbase method)": [[5, "merlion.models.base.ModelBase.save"]], "supports_exog (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.supports_exog"]], "supports_exog (merlion.models.defaults.defaultforecaster property)": [[5, "merlion.models.defaults.DefaultForecaster.supports_exog"]], "timedelta (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.timedelta"]], "to_bytes() (merlion.models.base.modelbase method)": [[5, "merlion.models.base.ModelBase.to_bytes"]], "to_cpu() (merlion.models.deep_base.deepmodelbase method)": [[5, "merlion.models.deep_base.DeepModelBase.to_cpu"]], "to_dict() (merlion.models.base.config method)": [[5, "merlion.models.base.Config.to_dict"]], "to_dict() (merlion.models.layers.layeredmodelconfig method)": [[5, "merlion.models.layers.LayeredModelConfig.to_dict"]], "to_gpu() (merlion.models.deep_base.deepmodelbase method)": [[5, "merlion.models.deep_base.DeepModelBase.to_gpu"]], "train() (merlion.models.base.modelbase method)": [[5, "merlion.models.base.ModelBase.train"]], "train() (merlion.models.defaults.defaultdetector method)": [[5, "merlion.models.defaults.DefaultDetector.train"]], "train() (merlion.models.defaults.defaultforecaster method)": [[5, "merlion.models.defaults.DefaultForecaster.train"]], "train_data (merlion.models.base.modelbase attribute)": [[5, "merlion.models.base.ModelBase.train_data"]], "train_data (merlion.models.layers.layeredmodel property)": [[5, "merlion.models.layers.LayeredModel.train_data"]], "train_multiple() (merlion.models.base.multipletimeseriesmodelmixin method)": [[5, "merlion.models.base.MultipleTimeseriesModelMixin.train_multiple"]], "train_post_process() (merlion.models.base.modelbase method)": [[5, "merlion.models.base.ModelBase.train_post_process"]], "train_post_process() (merlion.models.layers.layeredmodel method)": [[5, "merlion.models.layers.LayeredModel.train_post_process"]], "train_pre_process() (merlion.models.base.modelbase method)": [[5, "merlion.models.base.ModelBase.train_pre_process"]], "train_pre_process() (merlion.models.layers.layeredmodel method)": [[5, "merlion.models.layers.LayeredModel.train_pre_process"]], "transform (merlion.models.base.config attribute)": [[5, "merlion.models.base.Config.transform"]], "transform (merlion.models.base.modelbase property)": [[5, "merlion.models.base.ModelBase.transform"]], "transform (merlion.models.base.normalizingconfig property)": [[5, "merlion.models.base.NormalizingConfig.transform"]], "transform_time_series() (merlion.models.base.modelbase method)": [[5, "merlion.models.base.ModelBase.transform_time_series"]], "autoencoder (class in merlion.models.anomaly.autoencoder)": [[6, "merlion.models.anomaly.autoencoder.AutoEncoder"]], "autoencoderconfig (class in merlion.models.anomaly.autoencoder)": [[6, "merlion.models.anomaly.autoencoder.AutoEncoderConfig"]], "dagmm (class in merlion.models.anomaly.dagmm)": [[6, "merlion.models.anomaly.dagmm.DAGMM"]], "dagmmconfig (class in merlion.models.anomaly.dagmm)": [[6, "merlion.models.anomaly.dagmm.DAGMMConfig"]], "deeppointanomalydetector (class in merlion.models.anomaly.deep_point_anomaly_detector)": [[6, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector"]], "deeppointanomalydetectorconfig (class in merlion.models.anomaly.deep_point_anomaly_detector)": [[6, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetectorConfig"]], "detectorbase (class in merlion.models.anomaly.base)": [[6, "merlion.models.anomaly.base.DetectorBase"]], "detectorconfig (class in merlion.models.anomaly.base)": [[6, "merlion.models.anomaly.base.DetectorConfig"]], "dynamicbaseline (class in merlion.models.anomaly.dbl)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline"]], "dynamicbaselineconfig (class in merlion.models.anomaly.dbl)": [[6, "merlion.models.anomaly.dbl.DynamicBaselineConfig"]], "isolationforest (class in merlion.models.anomaly.isolation_forest)": [[6, "merlion.models.anomaly.isolation_forest.IsolationForest"]], "isolationforestconfig (class in merlion.models.anomaly.isolation_forest)": [[6, "merlion.models.anomaly.isolation_forest.IsolationForestConfig"]], "jvmsingleton (class in merlion.models.anomaly.random_cut_forest)": [[6, "merlion.models.anomaly.random_cut_forest.JVMSingleton"]], "lstmed (class in merlion.models.anomaly.lstm_ed)": [[6, "merlion.models.anomaly.lstm_ed.LSTMED"]], "lstmedconfig (class in merlion.models.anomaly.lstm_ed)": [[6, "merlion.models.anomaly.lstm_ed.LSTMEDConfig"]], "multipletimeseriesdetectormixin (class in merlion.models.anomaly.base)": [[6, "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin"]], "nocalibrationdetectorconfig (class in merlion.models.anomaly.base)": [[6, "merlion.models.anomaly.base.NoCalibrationDetectorConfig"]], "randomcutforest (class in merlion.models.anomaly.random_cut_forest)": [[6, "merlion.models.anomaly.random_cut_forest.RandomCutForest"]], "randomcutforestconfig (class in merlion.models.anomaly.random_cut_forest)": [[6, "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig"]], "segment (class in merlion.models.anomaly.dbl)": [[6, "merlion.models.anomaly.dbl.Segment"]], "segmenter (class in merlion.models.anomaly.dbl)": [[6, "merlion.models.anomaly.dbl.Segmenter"]], "spectralresidual (class in merlion.models.anomaly.spectral_residual)": [[6, "merlion.models.anomaly.spectral_residual.SpectralResidual"]], "spectralresidualconfig (class in merlion.models.anomaly.spectral_residual)": [[6, "merlion.models.anomaly.spectral_residual.SpectralResidualConfig"]], "statthreshold (class in merlion.models.anomaly.stat_threshold)": [[6, "merlion.models.anomaly.stat_threshold.StatThreshold"]], "statthresholdconfig (class in merlion.models.anomaly.stat_threshold)": [[6, "merlion.models.anomaly.stat_threshold.StatThresholdConfig"]], "trend (class in merlion.models.anomaly.dbl)": [[6, "merlion.models.anomaly.dbl.Trend"]], "vae (class in merlion.models.anomaly.vae)": [[6, "merlion.models.anomaly.vae.VAE"]], "vaeconfig (class in merlion.models.anomaly.vae)": [[6, "merlion.models.anomaly.vae.VAEConfig"]], "windstats (class in merlion.models.anomaly.windstats)": [[6, "merlion.models.anomaly.windstats.WindStats"]], "windstatsconfig (class in merlion.models.anomaly.windstats)": [[6, "merlion.models.anomaly.windstats.WindStatsConfig"]], "zms (class in merlion.models.anomaly.zms)": [[6, "merlion.models.anomaly.zms.ZMS"]], "zmsconfig (class in merlion.models.anomaly.zms)": [[6, "merlion.models.anomaly.zms.ZMSConfig"]], "add() (merlion.models.anomaly.dbl.segment method)": [[6, "merlion.models.anomaly.dbl.Segment.add"]], "add() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.add"]], "adjust_z_scores (merlion.models.anomaly.zms.zms property)": [[6, "merlion.models.anomaly.zms.ZMS.adjust_z_scores"]], "calibrator (merlion.models.anomaly.base.detectorbase property)": [[6, "merlion.models.anomaly.base.DetectorBase.calibrator"]], "calibrator (merlion.models.anomaly.base.detectorconfig attribute)": [[6, "merlion.models.anomaly.base.DetectorConfig.calibrator"]], "calibrator (merlion.models.anomaly.base.nocalibrationdetectorconfig property)": [[6, "merlion.models.anomaly.base.NoCalibrationDetectorConfig.calibrator"]], "config_class (merlion.models.anomaly.autoencoder.autoencoder attribute)": [[6, "merlion.models.anomaly.autoencoder.AutoEncoder.config_class"]], "config_class (merlion.models.anomaly.base.detectorbase attribute)": [[6, "merlion.models.anomaly.base.DetectorBase.config_class"]], "config_class (merlion.models.anomaly.dagmm.dagmm attribute)": [[6, "merlion.models.anomaly.dagmm.DAGMM.config_class"]], "config_class (merlion.models.anomaly.dbl.dynamicbaseline attribute)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.config_class"]], "config_class (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector attribute)": [[6, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.config_class"]], "config_class (merlion.models.anomaly.isolation_forest.isolationforest attribute)": [[6, "merlion.models.anomaly.isolation_forest.IsolationForest.config_class"]], "config_class (merlion.models.anomaly.lstm_ed.lstmed attribute)": [[6, "merlion.models.anomaly.lstm_ed.LSTMED.config_class"]], "config_class (merlion.models.anomaly.random_cut_forest.randomcutforest attribute)": [[6, "merlion.models.anomaly.random_cut_forest.RandomCutForest.config_class"]], "config_class (merlion.models.anomaly.spectral_residual.spectralresidual attribute)": [[6, "merlion.models.anomaly.spectral_residual.SpectralResidual.config_class"]], "config_class (merlion.models.anomaly.stat_threshold.statthreshold attribute)": [[6, "merlion.models.anomaly.stat_threshold.StatThreshold.config_class"]], "config_class (merlion.models.anomaly.vae.vae attribute)": [[6, "merlion.models.anomaly.vae.VAE.config_class"]], "config_class (merlion.models.anomaly.windstats.windstats attribute)": [[6, "merlion.models.anomaly.windstats.WindStats.config_class"]], "config_class (merlion.models.anomaly.zms.zms attribute)": [[6, "merlion.models.anomaly.zms.ZMS.config_class"]], "daily (merlion.models.anomaly.dbl.trend attribute)": [[6, "merlion.models.anomaly.dbl.Trend.daily"]], "data (merlion.models.anomaly.dbl.dynamicbaseline property)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.data"]], "day_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[6, "merlion.models.anomaly.dbl.Segmenter.day_delta"]], "day_key() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.day_key"]], "determine_train_window() (merlion.models.anomaly.dbl.dynamicbaselineconfig method)": [[6, "merlion.models.anomaly.dbl.DynamicBaselineConfig.determine_train_window"]], "drop() (merlion.models.anomaly.dbl.segment method)": [[6, "merlion.models.anomaly.dbl.Segment.drop"]], "drop() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.drop"]], "enable_calibrator (merlion.models.anomaly.base.detectorconfig attribute)": [[6, "merlion.models.anomaly.base.DetectorConfig.enable_calibrator"]], "enable_calibrator (merlion.models.anomaly.base.nocalibrationdetectorconfig property)": [[6, "merlion.models.anomaly.base.NoCalibrationDetectorConfig.enable_calibrator"]], "enable_threshold (merlion.models.anomaly.base.detectorconfig attribute)": [[6, "merlion.models.anomaly.base.DetectorConfig.enable_threshold"]], "fixed_period (merlion.models.anomaly.dbl.dynamicbaseline property)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.fixed_period"]], "fixed_period (merlion.models.anomaly.dbl.dynamicbaselineconfig property)": [[6, "merlion.models.anomaly.dbl.DynamicBaselineConfig.fixed_period"]], "from_dict() (merlion.models.anomaly.base.detectorconfig class method)": [[6, "merlion.models.anomaly.base.DetectorConfig.from_dict"]], "full_transform (merlion.models.anomaly.zms.zmsconfig property)": [[6, "merlion.models.anomaly.zms.ZMSConfig.full_transform"]], "gateway() (merlion.models.anomaly.random_cut_forest.jvmsingleton class method)": [[6, "merlion.models.anomaly.random_cut_forest.JVMSingleton.gateway"]], "get_anomaly_label() (merlion.models.anomaly.base.detectorbase method)": [[6, "merlion.models.anomaly.base.DetectorBase.get_anomaly_label"]], "get_anomaly_score() (merlion.models.anomaly.base.detectorbase method)": [[6, "merlion.models.anomaly.base.DetectorBase.get_anomaly_score"]], "get_baseline() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.get_baseline"]], "get_baseline() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.get_baseline"]], "get_baseline_figure() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.get_baseline_figure"]], "get_figure() (merlion.models.anomaly.base.detectorbase method)": [[6, "merlion.models.anomaly.base.DetectorBase.get_figure"]], "get_relevant() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.get_relevant"]], "has_fixed_period (merlion.models.anomaly.dbl.dynamicbaseline property)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.has_fixed_period"]], "hour_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[6, "merlion.models.anomaly.dbl.Segmenter.hour_delta"]], "java_params (merlion.models.anomaly.random_cut_forest.randomcutforestconfig property)": [[6, "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig.java_params"]], "lag_inflation (merlion.models.anomaly.zms.zms property)": [[6, "merlion.models.anomaly.zms.ZMS.lag_inflation"]], "lag_scales (merlion.models.anomaly.zms.zms property)": [[6, "merlion.models.anomaly.zms.ZMS.lag_scales"]], "merlion.models.anomaly": [[6, "module-merlion.models.anomaly"]], "merlion.models.anomaly.autoencoder": [[6, "module-merlion.models.anomaly.autoencoder"]], "merlion.models.anomaly.base": [[6, "module-merlion.models.anomaly.base"]], "merlion.models.anomaly.dagmm": [[6, "module-merlion.models.anomaly.dagmm"]], "merlion.models.anomaly.dbl": [[6, "module-merlion.models.anomaly.dbl"]], "merlion.models.anomaly.deep_point_anomaly_detector": [[6, "module-merlion.models.anomaly.deep_point_anomaly_detector"]], "merlion.models.anomaly.isolation_forest": [[6, "module-merlion.models.anomaly.isolation_forest"]], "merlion.models.anomaly.lstm_ed": [[6, "module-merlion.models.anomaly.lstm_ed"]], "merlion.models.anomaly.random_cut_forest": [[6, "module-merlion.models.anomaly.random_cut_forest"]], "merlion.models.anomaly.spectral_residual": [[6, "module-merlion.models.anomaly.spectral_residual"]], "merlion.models.anomaly.stat_threshold": [[6, "module-merlion.models.anomaly.stat_threshold"]], "merlion.models.anomaly.vae": [[6, "module-merlion.models.anomaly.vae"]], "merlion.models.anomaly.windstats": [[6, "module-merlion.models.anomaly.windstats"]], "merlion.models.anomaly.zms": [[6, "module-merlion.models.anomaly.zms"]], "min_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[6, "merlion.models.anomaly.dbl.Segmenter.min_delta"]], "monthly (merlion.models.anomaly.dbl.trend attribute)": [[6, "merlion.models.anomaly.dbl.Trend.monthly"]], "n_lags (merlion.models.anomaly.zms.zms property)": [[6, "merlion.models.anomaly.zms.ZMS.n_lags"]], "n_lags (merlion.models.anomaly.zms.zmsconfig property)": [[6, "merlion.models.anomaly.zms.ZMSConfig.n_lags"]], "online_updates (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[6, "merlion.models.anomaly.random_cut_forest.RandomCutForest.online_updates"]], "plot_anomaly() (merlion.models.anomaly.base.detectorbase method)": [[6, "merlion.models.anomaly.base.DetectorBase.plot_anomaly"]], "plot_anomaly_plotly() (merlion.models.anomaly.base.detectorbase method)": [[6, "merlion.models.anomaly.base.DetectorBase.plot_anomaly_plotly"]], "post_rule (merlion.models.anomaly.base.detectorbase property)": [[6, "merlion.models.anomaly.base.DetectorBase.post_rule"]], "post_rule (merlion.models.anomaly.base.detectorconfig property)": [[6, "merlion.models.anomaly.base.DetectorConfig.post_rule"]], "require_even_sampling (merlion.models.anomaly.autoencoder.autoencoder property)": [[6, "merlion.models.anomaly.autoencoder.AutoEncoder.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.dagmm.dagmm property)": [[6, "merlion.models.anomaly.dagmm.DAGMM.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.dbl.dynamicbaseline property)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector property)": [[6, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.isolation_forest.isolationforest property)": [[6, "merlion.models.anomaly.isolation_forest.IsolationForest.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.lstm_ed.lstmed property)": [[6, "merlion.models.anomaly.lstm_ed.LSTMED.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[6, "merlion.models.anomaly.random_cut_forest.RandomCutForest.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[6, "merlion.models.anomaly.spectral_residual.SpectralResidual.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.stat_threshold.statthreshold property)": [[6, "merlion.models.anomaly.stat_threshold.StatThreshold.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.vae.vae property)": [[6, "merlion.models.anomaly.vae.VAE.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.windstats.windstats property)": [[6, "merlion.models.anomaly.windstats.WindStats.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.zms.zms property)": [[6, "merlion.models.anomaly.zms.ZMS.require_even_sampling"]], "require_univariate (merlion.models.anomaly.autoencoder.autoencoder property)": [[6, "merlion.models.anomaly.autoencoder.AutoEncoder.require_univariate"]], "require_univariate (merlion.models.anomaly.dagmm.dagmm property)": [[6, "merlion.models.anomaly.dagmm.DAGMM.require_univariate"]], "require_univariate (merlion.models.anomaly.dbl.dynamicbaseline property)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.require_univariate"]], "require_univariate (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector property)": [[6, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.require_univariate"]], "require_univariate (merlion.models.anomaly.isolation_forest.isolationforest property)": [[6, "merlion.models.anomaly.isolation_forest.IsolationForest.require_univariate"]], "require_univariate (merlion.models.anomaly.lstm_ed.lstmed property)": [[6, "merlion.models.anomaly.lstm_ed.LSTMED.require_univariate"]], "require_univariate (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[6, "merlion.models.anomaly.random_cut_forest.RandomCutForest.require_univariate"]], "require_univariate (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[6, "merlion.models.anomaly.spectral_residual.SpectralResidual.require_univariate"]], "require_univariate (merlion.models.anomaly.stat_threshold.statthreshold property)": [[6, "merlion.models.anomaly.stat_threshold.StatThreshold.require_univariate"]], "require_univariate (merlion.models.anomaly.vae.vae property)": [[6, "merlion.models.anomaly.vae.VAE.require_univariate"]], "require_univariate (merlion.models.anomaly.windstats.windstats property)": [[6, "merlion.models.anomaly.windstats.WindStats.require_univariate"]], "require_univariate (merlion.models.anomaly.zms.zms property)": [[6, "merlion.models.anomaly.zms.ZMS.require_univariate"]], "reset() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.reset"]], "score() (merlion.models.anomaly.dbl.segment method)": [[6, "merlion.models.anomaly.dbl.Segment.score"]], "score() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.score"]], "segment_key() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.segment_key"]], "target_seq_index (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[6, "merlion.models.anomaly.spectral_residual.SpectralResidual.target_seq_index"]], "threshold (merlion.models.anomaly.base.detectorbase property)": [[6, "merlion.models.anomaly.base.DetectorBase.threshold"]], "threshold (merlion.models.anomaly.base.detectorconfig attribute)": [[6, "merlion.models.anomaly.base.DetectorConfig.threshold"]], "to_dict() (merlion.models.anomaly.dbl.dynamicbaselineconfig method)": [[6, "merlion.models.anomaly.dbl.DynamicBaselineConfig.to_dict"]], "to_dict() (merlion.models.anomaly.zms.zmsconfig method)": [[6, "merlion.models.anomaly.zms.ZMSConfig.to_dict"]], "train() (merlion.models.anomaly.base.detectorbase method)": [[6, "merlion.models.anomaly.base.DetectorBase.train"]], "train() (merlion.models.anomaly.zms.zms method)": [[6, "merlion.models.anomaly.zms.ZMS.train"]], "train_multiple() (merlion.models.anomaly.base.multipletimeseriesdetectormixin method)": [[6, "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin.train_multiple"]], "train_multiple() (merlion.models.anomaly.dagmm.dagmm method)": [[6, "merlion.models.anomaly.dagmm.DAGMM.train_multiple"]], "train_post_process() (merlion.models.anomaly.base.detectorbase method)": [[6, "merlion.models.anomaly.base.DetectorBase.train_post_process"]], "train_window (merlion.models.anomaly.dbl.dynamicbaseline property)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.train_window"]], "trend (merlion.models.anomaly.dbl.segmenter property)": [[6, "merlion.models.anomaly.dbl.Segmenter.trend"]], "trends (merlion.models.anomaly.dbl.dynamicbaselineconfig property)": [[6, "merlion.models.anomaly.dbl.DynamicBaselineConfig.trends"]], "trends (merlion.models.anomaly.dbl.segmenter property)": [[6, "merlion.models.anomaly.dbl.Segmenter.trends"]], "update() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[6, "merlion.models.anomaly.dbl.DynamicBaseline.update"]], "weekday_key() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.weekday_key"]], "weekly (merlion.models.anomaly.dbl.trend attribute)": [[6, "merlion.models.anomaly.dbl.Trend.weekly"]], "wind_delta (merlion.models.anomaly.dbl.segmenter property)": [[6, "merlion.models.anomaly.dbl.Segmenter.wind_delta"]], "window_key() (merlion.models.anomaly.dbl.segmenter method)": [[6, "merlion.models.anomaly.dbl.Segmenter.window_key"]], "zero_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[6, "merlion.models.anomaly.dbl.Segmenter.zero_delta"]], "auto (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[7, "merlion.models.anomaly.change_point.bocpd.ChangeKind.Auto"]], "bocpd (class in merlion.models.anomaly.change_point.bocpd)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD"]], "bocpdconfig (class in merlion.models.anomaly.change_point.bocpd)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPDConfig"]], "changekind (class in merlion.models.anomaly.change_point.bocpd)": [[7, "merlion.models.anomaly.change_point.bocpd.ChangeKind"]], "levelshift (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[7, "merlion.models.anomaly.change_point.bocpd.ChangeKind.LevelShift"]], "trendchange (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[7, "merlion.models.anomaly.change_point.bocpd.ChangeKind.TrendChange"]], "change_kind (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.change_kind"]], "change_kind (merlion.models.anomaly.change_point.bocpd.bocpdconfig property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPDConfig.change_kind"]], "config_class (merlion.models.anomaly.change_point.bocpd.bocpd attribute)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.config_class"]], "cp_prior (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.cp_prior"]], "get_anomaly_score() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.get_anomaly_score"]], "get_figure() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.get_figure"]], "lag (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.lag"]], "last_train_time (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.last_train_time"]], "merlion.models.anomaly.change_point": [[7, "module-merlion.models.anomaly.change_point"]], "merlion.models.anomaly.change_point.bocpd": [[7, "module-merlion.models.anomaly.change_point.bocpd"]], "min_likelihood (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.min_likelihood"]], "n_seen (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.n_seen"]], "require_even_sampling (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.require_even_sampling"]], "require_univariate (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.require_univariate"]], "train_pre_process() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.train_pre_process"]], "update() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[7, "merlion.models.anomaly.change_point.bocpd.BOCPD.update"]], "arimadetector (class in merlion.models.anomaly.forecast_based.arima)": [[8, "merlion.models.anomaly.forecast_based.arima.ArimaDetector"]], "arimadetectorconfig (class in merlion.models.anomaly.forecast_based.arima)": [[8, "merlion.models.anomaly.forecast_based.arima.ArimaDetectorConfig"]], "etsdetector (class in merlion.models.anomaly.forecast_based.ets)": [[8, "merlion.models.anomaly.forecast_based.ets.ETSDetector"]], "etsdetectorconfig (class in merlion.models.anomaly.forecast_based.ets)": [[8, "merlion.models.anomaly.forecast_based.ets.ETSDetectorConfig"]], "forecastingdetectorbase (class in merlion.models.anomaly.forecast_based.base)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase"]], "msesdetector (class in merlion.models.anomaly.forecast_based.mses)": [[8, "merlion.models.anomaly.forecast_based.mses.MSESDetector"]], "msesdetectorconfig (class in merlion.models.anomaly.forecast_based.mses)": [[8, "merlion.models.anomaly.forecast_based.mses.MSESDetectorConfig"]], "prophetdetector (class in merlion.models.anomaly.forecast_based.prophet)": [[8, "merlion.models.anomaly.forecast_based.prophet.ProphetDetector"]], "prophetdetectorconfig (class in merlion.models.anomaly.forecast_based.prophet)": [[8, "merlion.models.anomaly.forecast_based.prophet.ProphetDetectorConfig"]], "sarimadetector (class in merlion.models.anomaly.forecast_based.sarima)": [[8, "merlion.models.anomaly.forecast_based.sarima.SarimaDetector"]], "sarimadetectorconfig (class in merlion.models.anomaly.forecast_based.sarima)": [[8, "merlion.models.anomaly.forecast_based.sarima.SarimaDetectorConfig"]], "config_class (merlion.models.anomaly.forecast_based.arima.arimadetector attribute)": [[8, "merlion.models.anomaly.forecast_based.arima.ArimaDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.ets.etsdetector attribute)": [[8, "merlion.models.anomaly.forecast_based.ets.ETSDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.mses.msesdetector attribute)": [[8, "merlion.models.anomaly.forecast_based.mses.MSESDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.prophet.prophetdetector attribute)": [[8, "merlion.models.anomaly.forecast_based.prophet.ProphetDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.sarima.sarimadetector attribute)": [[8, "merlion.models.anomaly.forecast_based.sarima.SarimaDetector.config_class"]], "forecast_to_anom_score() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.forecast_to_anom_score"]], "get_anomaly_label() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_anomaly_label"]], "get_anomaly_score() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_anomaly_score"]], "get_anomaly_score() (merlion.models.anomaly.forecast_based.mses.msesdetector method)": [[8, "merlion.models.anomaly.forecast_based.mses.MSESDetector.get_anomaly_score"]], "get_figure() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_figure"]], "merlion.models.anomaly.forecast_based": [[8, "module-merlion.models.anomaly.forecast_based"]], "merlion.models.anomaly.forecast_based.arima": [[8, "module-merlion.models.anomaly.forecast_based.arima"]], "merlion.models.anomaly.forecast_based.base": [[8, "module-merlion.models.anomaly.forecast_based.base"]], "merlion.models.anomaly.forecast_based.ets": [[8, "module-merlion.models.anomaly.forecast_based.ets"]], "merlion.models.anomaly.forecast_based.mses": [[8, "module-merlion.models.anomaly.forecast_based.mses"]], "merlion.models.anomaly.forecast_based.prophet": [[8, "module-merlion.models.anomaly.forecast_based.prophet"]], "merlion.models.anomaly.forecast_based.sarima": [[8, "module-merlion.models.anomaly.forecast_based.sarima"]], "online_updates (merlion.models.anomaly.forecast_based.mses.msesdetector property)": [[8, "merlion.models.anomaly.forecast_based.mses.MSESDetector.online_updates"]], "plot_anomaly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_anomaly"]], "plot_anomaly_plotly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_anomaly_plotly"]], "plot_forecast() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_forecast"]], "plot_forecast_plotly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_forecast_plotly"]], "train() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.train"]], "train_post_process() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[8, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.train_post_process"]], "acf (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[9, "merlion.models.automl.seasonality.PeriodicityStrategy.ACF"]], "aic (merlion.models.automl.base.informationcriterion attribute)": [[9, "merlion.models.automl.base.InformationCriterion.AIC"]], "aicc (merlion.models.automl.base.informationcriterion attribute)": [[9, "merlion.models.automl.base.InformationCriterion.AICc"]], "all (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[9, "merlion.models.automl.seasonality.PeriodicityStrategy.All"]], "autoets (class in merlion.models.automl.autoets)": [[9, "merlion.models.automl.autoets.AutoETS"]], "autoetsconfig (class in merlion.models.automl.autoets)": [[9, "merlion.models.automl.autoets.AutoETSConfig"]], "automlmixin (class in merlion.models.automl.base)": [[9, "merlion.models.automl.base.AutoMLMixIn"]], "autoprophet (class in merlion.models.automl.autoprophet)": [[9, "merlion.models.automl.autoprophet.AutoProphet"]], "autoprophetconfig (class in merlion.models.automl.autoprophet)": [[9, "merlion.models.automl.autoprophet.AutoProphetConfig"]], "autosarima (class in merlion.models.automl.autosarima)": [[9, "merlion.models.automl.autosarima.AutoSarima"]], "autosarimaconfig (class in merlion.models.automl.autosarima)": [[9, "merlion.models.automl.autosarima.AutoSarimaConfig"]], "bic (merlion.models.automl.base.informationcriterion attribute)": [[9, "merlion.models.automl.base.InformationCriterion.BIC"]], "gridsearch (class in merlion.models.automl.search)": [[9, "merlion.models.automl.search.GridSearch"]], "icautomlforecaster (class in merlion.models.automl.base)": [[9, "merlion.models.automl.base.ICAutoMLForecaster"]], "icconfig (class in merlion.models.automl.base)": [[9, "merlion.models.automl.base.ICConfig"]], "informationcriterion (class in merlion.models.automl.base)": [[9, "merlion.models.automl.base.InformationCriterion"]], "max (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[9, "merlion.models.automl.seasonality.PeriodicityStrategy.Max"]], "min (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[9, "merlion.models.automl.seasonality.PeriodicityStrategy.Min"]], "periodicitystrategy (class in merlion.models.automl.seasonality)": [[9, "merlion.models.automl.seasonality.PeriodicityStrategy"]], "seasonalityconfig (class in merlion.models.automl.seasonality)": [[9, "merlion.models.automl.seasonality.SeasonalityConfig"]], "seasonalitylayer (class in merlion.models.automl.seasonality)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer"]], "seasonalitymodel (class in merlion.models.automl.seasonality)": [[9, "merlion.models.automl.seasonality.SeasonalityModel"]], "config_class (merlion.models.automl.autoets.autoets attribute)": [[9, "merlion.models.automl.autoets.AutoETS.config_class"]], "config_class (merlion.models.automl.autoprophet.autoprophet attribute)": [[9, "merlion.models.automl.autoprophet.AutoProphet.config_class"]], "config_class (merlion.models.automl.autosarima.autosarima attribute)": [[9, "merlion.models.automl.autosarima.AutoSarima.config_class"]], "config_class (merlion.models.automl.base.icautomlforecaster attribute)": [[9, "merlion.models.automl.base.ICAutoMLForecaster.config_class"]], "config_class (merlion.models.automl.seasonality.seasonalitylayer attribute)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.config_class"]], "detect_seasonality() (merlion.models.automl.seasonality.seasonalitylayer static method)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.detect_seasonality"]], "evaluate_theta() (merlion.models.automl.autosarima.autosarima method)": [[9, "merlion.models.automl.autosarima.AutoSarima.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.base.automlmixin method)": [[9, "merlion.models.automl.base.AutoMLMixIn.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.base.icautomlforecaster method)": [[9, "merlion.models.automl.base.ICAutoMLForecaster.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.evaluate_theta"]], "generate_theta() (merlion.models.automl.autoets.autoets method)": [[9, "merlion.models.automl.autoets.AutoETS.generate_theta"]], "generate_theta() (merlion.models.automl.autoprophet.autoprophet method)": [[9, "merlion.models.automl.autoprophet.AutoProphet.generate_theta"]], "generate_theta() (merlion.models.automl.autosarima.autosarima method)": [[9, "merlion.models.automl.autosarima.AutoSarima.generate_theta"]], "generate_theta() (merlion.models.automl.base.automlmixin method)": [[9, "merlion.models.automl.base.AutoMLMixIn.generate_theta"]], "generate_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.generate_theta"]], "get_ic() (merlion.models.automl.autoets.autoets method)": [[9, "merlion.models.automl.autoets.AutoETS.get_ic"]], "get_ic() (merlion.models.automl.autoprophet.autoprophet method)": [[9, "merlion.models.automl.autoprophet.AutoProphet.get_ic"]], "get_ic() (merlion.models.automl.base.icautomlforecaster method)": [[9, "merlion.models.automl.base.ICAutoMLForecaster.get_ic"]], "information_criterion (merlion.models.automl.base.icautomlforecaster property)": [[9, "merlion.models.automl.base.ICAutoMLForecaster.information_criterion"]], "information_criterion (merlion.models.automl.base.icconfig property)": [[9, "merlion.models.automl.base.ICConfig.information_criterion"]], "max_lag (merlion.models.automl.seasonality.seasonalitylayer property)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.max_lag"]], "merlion.models.automl": [[9, "module-merlion.models.automl"]], "merlion.models.automl.autoets": [[9, "module-merlion.models.automl.autoets"]], "merlion.models.automl.autoprophet": [[9, "module-merlion.models.automl.autoprophet"]], "merlion.models.automl.autosarima": [[9, "module-merlion.models.automl.autosarima"]], "merlion.models.automl.base": [[9, "module-merlion.models.automl.base"]], "merlion.models.automl.search": [[9, "module-merlion.models.automl.search"]], "merlion.models.automl.seasonality": [[9, "module-merlion.models.automl.seasonality"]], "multi_seasonality (merlion.models.automl.autoprophet.autoprophetconfig property)": [[9, "merlion.models.automl.autoprophet.AutoProphetConfig.multi_seasonality"]], "multi_seasonality (merlion.models.automl.seasonality.seasonalityconfig property)": [[9, "merlion.models.automl.seasonality.SeasonalityConfig.multi_seasonality"]], "multi_seasonality (merlion.models.automl.seasonality.seasonalitylayer property)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.multi_seasonality"]], "order (merlion.models.automl.autosarima.autosarimaconfig property)": [[9, "merlion.models.automl.autosarima.AutoSarimaConfig.order"]], "periodicity_strategy (merlion.models.automl.seasonality.seasonalityconfig property)": [[9, "merlion.models.automl.seasonality.SeasonalityConfig.periodicity_strategy"]], "periodicity_strategy (merlion.models.automl.seasonality.seasonalitylayer property)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.periodicity_strategy"]], "pval (merlion.models.automl.seasonality.seasonalitylayer property)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.pval"]], "require_even_sampling (merlion.models.automl.seasonality.seasonalitylayer property)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.require_even_sampling"]], "require_univariate (merlion.models.automl.seasonality.seasonalitylayer property)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.require_univariate"]], "seasonal_order (merlion.models.automl.autosarima.autosarimaconfig property)": [[9, "merlion.models.automl.autosarima.AutoSarimaConfig.seasonal_order"]], "set_seasonality() (merlion.models.automl.seasonality.seasonalitymodel method)": [[9, "merlion.models.automl.seasonality.SeasonalityModel.set_seasonality"]], "set_theta() (merlion.models.automl.autoets.autoets method)": [[9, "merlion.models.automl.autoets.AutoETS.set_theta"]], "set_theta() (merlion.models.automl.autoprophet.autoprophet method)": [[9, "merlion.models.automl.autoprophet.AutoProphet.set_theta"]], "set_theta() (merlion.models.automl.autosarima.autosarima method)": [[9, "merlion.models.automl.autosarima.AutoSarima.set_theta"]], "set_theta() (merlion.models.automl.base.automlmixin method)": [[9, "merlion.models.automl.base.AutoMLMixIn.set_theta"]], "set_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[9, "merlion.models.automl.seasonality.SeasonalityLayer.set_theta"]], "supports_exog (merlion.models.automl.autoprophet.autoprophet property)": [[9, "merlion.models.automl.autoprophet.AutoProphet.supports_exog"]], "supports_exog (merlion.models.automl.autosarima.autosarima property)": [[9, "merlion.models.automl.autosarima.AutoSarima.supports_exog"]], "combinerbase (class in merlion.models.ensemble.combine)": [[10, "merlion.models.ensemble.combine.CombinerBase"]], "combinerfactory (class in merlion.models.ensemble.combine)": [[10, "merlion.models.ensemble.combine.CombinerFactory"]], "detectorensemble (class in merlion.models.ensemble.anomaly)": [[10, "merlion.models.ensemble.anomaly.DetectorEnsemble"]], "detectorensembleconfig (class in merlion.models.ensemble.anomaly)": [[10, "merlion.models.ensemble.anomaly.DetectorEnsembleConfig"]], "detectorensembletrainconfig (class in merlion.models.ensemble.anomaly)": [[10, "merlion.models.ensemble.anomaly.DetectorEnsembleTrainConfig"]], "ensemblebase (class in merlion.models.ensemble.base)": [[10, "merlion.models.ensemble.base.EnsembleBase"]], "ensembleconfig (class in merlion.models.ensemble.base)": [[10, "merlion.models.ensemble.base.EnsembleConfig"]], "ensembletrainconfig (class in merlion.models.ensemble.base)": [[10, "merlion.models.ensemble.base.EnsembleTrainConfig"]], "forecasterensemble (class in merlion.models.ensemble.forecast)": [[10, "merlion.models.ensemble.forecast.ForecasterEnsemble"]], "forecasterensembleconfig (class in merlion.models.ensemble.forecast)": [[10, "merlion.models.ensemble.forecast.ForecasterEnsembleConfig"]], "max (class in merlion.models.ensemble.combine)": [[10, "merlion.models.ensemble.combine.Max"]], "mean (class in merlion.models.ensemble.combine)": [[10, "merlion.models.ensemble.combine.Mean"]], "median (class in merlion.models.ensemble.combine)": [[10, "merlion.models.ensemble.combine.Median"]], "metricweightedmean (class in merlion.models.ensemble.combine)": [[10, "merlion.models.ensemble.combine.MetricWeightedMean"]], "modelselector (class in merlion.models.ensemble.combine)": [[10, "merlion.models.ensemble.combine.ModelSelector"]], "__call__() (merlion.models.ensemble.combine.combinerbase method)": [[10, "merlion.models.ensemble.combine.CombinerBase.__call__"]], "combiner (merlion.models.ensemble.base.ensemblebase property)": [[10, "merlion.models.ensemble.base.EnsembleBase.combiner"]], "config_class (merlion.models.ensemble.anomaly.detectorensemble attribute)": [[10, "merlion.models.ensemble.anomaly.DetectorEnsemble.config_class"]], "config_class (merlion.models.ensemble.base.ensemblebase attribute)": [[10, "merlion.models.ensemble.base.EnsembleBase.config_class"]], "config_class (merlion.models.ensemble.forecast.forecasterensemble attribute)": [[10, "merlion.models.ensemble.forecast.ForecasterEnsemble.config_class"]], "create() (merlion.models.ensemble.combine.combinerfactory class method)": [[10, "merlion.models.ensemble.combine.CombinerFactory.create"]], "from_dict() (merlion.models.ensemble.combine.combinerbase class method)": [[10, "merlion.models.ensemble.combine.CombinerBase.from_dict"]], "from_dict() (merlion.models.ensemble.combine.modelselector class method)": [[10, "merlion.models.ensemble.combine.ModelSelector.from_dict"]], "get_max_common_horizon() (merlion.models.ensemble.base.ensemblebase method)": [[10, "merlion.models.ensemble.base.EnsembleBase.get_max_common_horizon"]], "get_model_used() (merlion.models.ensemble.combine.combinerbase method)": [[10, "merlion.models.ensemble.combine.CombinerBase.get_model_used"]], "invert (merlion.models.ensemble.combine.modelselector property)": [[10, "merlion.models.ensemble.combine.ModelSelector.invert"]], "merlion.models.ensemble": [[10, "module-merlion.models.ensemble"]], "merlion.models.ensemble.anomaly": [[10, "module-merlion.models.ensemble.anomaly"]], "merlion.models.ensemble.base": [[10, "module-merlion.models.ensemble.base"]], "merlion.models.ensemble.combine": [[10, "module-merlion.models.ensemble.combine"]], "merlion.models.ensemble.forecast": [[10, "module-merlion.models.ensemble.forecast"]], "models (merlion.models.ensemble.base.ensemblebase property)": [[10, "merlion.models.ensemble.base.EnsembleBase.models"]], "models (merlion.models.ensemble.base.ensembleconfig attribute)": [[10, "merlion.models.ensemble.base.EnsembleConfig.models"]], "models_used (merlion.models.ensemble.base.ensemblebase property)": [[10, "merlion.models.ensemble.base.EnsembleBase.models_used"]], "models_used (merlion.models.ensemble.combine.combinerbase property)": [[10, "merlion.models.ensemble.combine.CombinerBase.models_used"]], "per_model_threshold (merlion.models.ensemble.anomaly.detectorensemble property)": [[10, "merlion.models.ensemble.anomaly.DetectorEnsemble.per_model_threshold"]], "per_model_threshold (merlion.models.ensemble.anomaly.detectorensembleconfig property)": [[10, "merlion.models.ensemble.anomaly.DetectorEnsembleConfig.per_model_threshold"]], "require_even_sampling (merlion.models.ensemble.anomaly.detectorensemble property)": [[10, "merlion.models.ensemble.anomaly.DetectorEnsemble.require_even_sampling"]], "require_even_sampling (merlion.models.ensemble.forecast.forecasterensemble property)": [[10, "merlion.models.ensemble.forecast.ForecasterEnsemble.require_even_sampling"]], "require_univariate (merlion.models.ensemble.anomaly.detectorensemble property)": [[10, "merlion.models.ensemble.anomaly.DetectorEnsemble.require_univariate"]], "requires_training (merlion.models.ensemble.combine.combinerbase property)": [[10, "merlion.models.ensemble.combine.CombinerBase.requires_training"]], "requires_training (merlion.models.ensemble.combine.modelselector property)": [[10, "merlion.models.ensemble.combine.ModelSelector.requires_training"]], "resample_time_stamps() (merlion.models.ensemble.forecast.forecasterensemble method)": [[10, "merlion.models.ensemble.forecast.ForecasterEnsemble.resample_time_stamps"]], "reset() (merlion.models.ensemble.base.ensemblebase method)": [[10, "merlion.models.ensemble.base.EnsembleBase.reset"]], "reset() (merlion.models.ensemble.combine.combinerbase method)": [[10, "merlion.models.ensemble.combine.CombinerBase.reset"]], "save() (merlion.models.ensemble.base.ensemblebase method)": [[10, "merlion.models.ensemble.base.EnsembleBase.save"]], "set_model_used() (merlion.models.ensemble.combine.combinerbase method)": [[10, "merlion.models.ensemble.combine.CombinerBase.set_model_used"]], "target_seq_index (merlion.models.ensemble.forecast.forecasterensembleconfig property)": [[10, "merlion.models.ensemble.forecast.ForecasterEnsembleConfig.target_seq_index"]], "to_bytes() (merlion.models.ensemble.base.ensemblebase method)": [[10, "merlion.models.ensemble.base.EnsembleBase.to_bytes"]], "to_dict() (merlion.models.ensemble.base.ensembleconfig method)": [[10, "merlion.models.ensemble.base.EnsembleConfig.to_dict"]], "to_dict() (merlion.models.ensemble.combine.combinerbase method)": [[10, "merlion.models.ensemble.combine.CombinerBase.to_dict"]], "to_dict() (merlion.models.ensemble.combine.modelselector method)": [[10, "merlion.models.ensemble.combine.ModelSelector.to_dict"]], "train() (merlion.models.ensemble.combine.combinerbase method)": [[10, "merlion.models.ensemble.combine.CombinerBase.train"]], "train() (merlion.models.ensemble.combine.modelselector method)": [[10, "merlion.models.ensemble.combine.ModelSelector.train"]], "train_combiner() (merlion.models.ensemble.base.ensemblebase method)": [[10, "merlion.models.ensemble.base.EnsembleBase.train_combiner"]], "train_combiner() (merlion.models.ensemble.forecast.forecasterensemble method)": [[10, "merlion.models.ensemble.forecast.ForecasterEnsemble.train_combiner"]], "train_pre_process() (merlion.models.ensemble.forecast.forecasterensemble method)": [[10, "merlion.models.ensemble.forecast.ForecasterEnsemble.train_pre_process"]], "train_valid_split() (merlion.models.ensemble.base.ensemblebase method)": [[10, "merlion.models.ensemble.base.EnsembleBase.train_valid_split"]], "weights (merlion.models.ensemble.combine.mean property)": [[10, "merlion.models.ensemble.combine.Mean.weights"]], "weights (merlion.models.ensemble.combine.metricweightedmean property)": [[10, "merlion.models.ensemble.combine.MetricWeightedMean.weights"]], "arima (class in merlion.models.forecast.arima)": [[11, "merlion.models.forecast.arima.Arima"]], "arimaconfig (class in merlion.models.forecast.arima)": [[11, "merlion.models.forecast.arima.ArimaConfig"]], "autoformerconfig (class in merlion.models.forecast.autoformer)": [[11, "merlion.models.forecast.autoformer.AutoformerConfig"]], "autoformerforecaster (class in merlion.models.forecast.autoformer)": [[11, "merlion.models.forecast.autoformer.AutoformerForecaster"]], "autoformermodel (class in merlion.models.forecast.autoformer)": [[11, "merlion.models.forecast.autoformer.AutoformerModel"]], "deeparconfig (class in merlion.models.forecast.deep_ar)": [[11, "merlion.models.forecast.deep_ar.DeepARConfig"]], "deeparforecaster (class in merlion.models.forecast.deep_ar)": [[11, "merlion.models.forecast.deep_ar.DeepARForecaster"]], "deeparmodel (class in merlion.models.forecast.deep_ar)": [[11, "merlion.models.forecast.deep_ar.DeepARModel"]], "deepforecaster (class in merlion.models.forecast.deep_base)": [[11, "merlion.models.forecast.deep_base.DeepForecaster"]], "deepforecasterconfig (class in merlion.models.forecast.deep_base)": [[11, "merlion.models.forecast.deep_base.DeepForecasterConfig"]], "deltaestimator (class in merlion.models.forecast.smoother)": [[11, "merlion.models.forecast.smoother.DeltaEstimator"]], "deltastats (class in merlion.models.forecast.smoother)": [[11, "merlion.models.forecast.smoother.DeltaStats"]], "ets (class in merlion.models.forecast.ets)": [[11, "merlion.models.forecast.ets.ETS"]], "etsconfig (class in merlion.models.forecast.ets)": [[11, "merlion.models.forecast.ets.ETSConfig"]], "etsformerconfig (class in merlion.models.forecast.etsformer)": [[11, "merlion.models.forecast.etsformer.ETSformerConfig"]], "etsformerforecaster (class in merlion.models.forecast.etsformer)": [[11, "merlion.models.forecast.etsformer.ETSformerForecaster"]], "etsformermodel (class in merlion.models.forecast.etsformer)": [[11, "merlion.models.forecast.etsformer.ETSformerModel"]], "extratreesforecaster (class in merlion.models.forecast.trees)": [[11, "merlion.models.forecast.trees.ExtraTreesForecaster"]], "extratreesforecasterconfig (class in merlion.models.forecast.trees)": [[11, "merlion.models.forecast.trees.ExtraTreesForecasterConfig"]], "forecasterbase (class in merlion.models.forecast.base)": [[11, "merlion.models.forecast.base.ForecasterBase"]], "forecasterconfig (class in merlion.models.forecast.base)": [[11, "merlion.models.forecast.base.ForecasterConfig"]], "forecasterexogbase (class in merlion.models.forecast.base)": [[11, "merlion.models.forecast.base.ForecasterExogBase"]], "forecasterexogconfig (class in merlion.models.forecast.base)": [[11, "merlion.models.forecast.base.ForecasterExogConfig"]], "informerconfig (class in merlion.models.forecast.informer)": [[11, "merlion.models.forecast.informer.InformerConfig"]], "informerforecaster (class in merlion.models.forecast.informer)": [[11, "merlion.models.forecast.informer.InformerForecaster"]], "informermodel (class in merlion.models.forecast.informer)": [[11, "merlion.models.forecast.informer.InformerModel"]], "lgbmforecaster (class in merlion.models.forecast.trees)": [[11, "merlion.models.forecast.trees.LGBMForecaster"]], "lgbmforecasterconfig (class in merlion.models.forecast.trees)": [[11, "merlion.models.forecast.trees.LGBMForecasterConfig"]], "mses (class in merlion.models.forecast.smoother)": [[11, "merlion.models.forecast.smoother.MSES"]], "msesconfig (class in merlion.models.forecast.smoother)": [[11, "merlion.models.forecast.smoother.MSESConfig"]], "msestrainconfig (class in merlion.models.forecast.smoother)": [[11, "merlion.models.forecast.smoother.MSESTrainConfig"]], "prophet (class in merlion.models.forecast.prophet)": [[11, "merlion.models.forecast.prophet.Prophet"]], "prophetconfig (class in merlion.models.forecast.prophet)": [[11, "merlion.models.forecast.prophet.ProphetConfig"]], "randomforestforecaster (class in merlion.models.forecast.trees)": [[11, "merlion.models.forecast.trees.RandomForestForecaster"]], "randomforestforecasterconfig (class in merlion.models.forecast.trees)": [[11, "merlion.models.forecast.trees.RandomForestForecasterConfig"]], "sklearnforecaster (class in merlion.models.forecast.sklearn_base)": [[11, "merlion.models.forecast.sklearn_base.SKLearnForecaster"]], "sklearnforecasterconfig (class in merlion.models.forecast.sklearn_base)": [[11, "merlion.models.forecast.sklearn_base.SKLearnForecasterConfig"]], "sarima (class in merlion.models.forecast.sarima)": [[11, "merlion.models.forecast.sarima.Sarima"]], "sarimaconfig (class in merlion.models.forecast.sarima)": [[11, "merlion.models.forecast.sarima.SarimaConfig"]], "transformerconfig (class in merlion.models.forecast.transformer)": [[11, "merlion.models.forecast.transformer.TransformerConfig"]], "transformerforecaster (class in merlion.models.forecast.transformer)": [[11, "merlion.models.forecast.transformer.TransformerForecaster"]], "transformermodel (class in merlion.models.forecast.transformer)": [[11, "merlion.models.forecast.transformer.TransformerModel"]], "vectorar (class in merlion.models.forecast.vector_ar)": [[11, "merlion.models.forecast.vector_ar.VectorAR"]], "vectorarconfig (class in merlion.models.forecast.vector_ar)": [[11, "merlion.models.forecast.vector_ar.VectorARConfig"]], "acc_max_scale (merlion.models.forecast.smoother.deltaestimator property)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.acc_max_scale"]], "acceleration() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.acceleration"]], "add_seasonality (merlion.models.forecast.prophet.prophet property)": [[11, "merlion.models.forecast.prophet.Prophet.add_seasonality"]], "backsteps (merlion.models.forecast.smoother.mses property)": [[11, "merlion.models.forecast.smoother.MSES.backsteps"]], "backsteps (merlion.models.forecast.smoother.msesconfig property)": [[11, "merlion.models.forecast.smoother.MSESConfig.backsteps"]], "batch_forecast() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.batch_forecast"]], "calculate_loss() (merlion.models.forecast.deep_ar.deeparmodel method)": [[11, "merlion.models.forecast.deep_ar.DeepARModel.calculate_loss"]], "config_class (merlion.models.forecast.arima.arima attribute)": [[11, "merlion.models.forecast.arima.Arima.config_class"]], "config_class (merlion.models.forecast.autoformer.autoformerforecaster attribute)": [[11, "merlion.models.forecast.autoformer.AutoformerForecaster.config_class"]], "config_class (merlion.models.forecast.base.forecasterbase attribute)": [[11, "merlion.models.forecast.base.ForecasterBase.config_class"]], "config_class (merlion.models.forecast.deep_ar.deeparforecaster attribute)": [[11, "merlion.models.forecast.deep_ar.DeepARForecaster.config_class"]], "config_class (merlion.models.forecast.deep_base.deepforecaster attribute)": [[11, "merlion.models.forecast.deep_base.DeepForecaster.config_class"]], "config_class (merlion.models.forecast.ets.ets attribute)": [[11, "merlion.models.forecast.ets.ETS.config_class"]], "config_class (merlion.models.forecast.etsformer.etsformerforecaster attribute)": [[11, "merlion.models.forecast.etsformer.ETSformerForecaster.config_class"]], "config_class (merlion.models.forecast.informer.informerforecaster attribute)": [[11, "merlion.models.forecast.informer.InformerForecaster.config_class"]], "config_class (merlion.models.forecast.prophet.prophet attribute)": [[11, "merlion.models.forecast.prophet.Prophet.config_class"]], "config_class (merlion.models.forecast.sarima.sarima attribute)": [[11, "merlion.models.forecast.sarima.Sarima.config_class"]], "config_class (merlion.models.forecast.sklearn_base.sklearnforecaster attribute)": [[11, "merlion.models.forecast.sklearn_base.SKLearnForecaster.config_class"]], "config_class (merlion.models.forecast.smoother.mses attribute)": [[11, "merlion.models.forecast.smoother.MSES.config_class"]], "config_class (merlion.models.forecast.transformer.transformerforecaster attribute)": [[11, "merlion.models.forecast.transformer.TransformerForecaster.config_class"]], "config_class (merlion.models.forecast.trees.extratreesforecaster attribute)": [[11, "merlion.models.forecast.trees.ExtraTreesForecaster.config_class"]], "config_class (merlion.models.forecast.trees.lgbmforecaster attribute)": [[11, "merlion.models.forecast.trees.LGBMForecaster.config_class"]], "config_class (merlion.models.forecast.trees.randomforestforecaster attribute)": [[11, "merlion.models.forecast.trees.RandomForestForecaster.config_class"]], "config_class (merlion.models.forecast.vector_ar.vectorar attribute)": [[11, "merlion.models.forecast.vector_ar.VectorAR.config_class"]], "daily_seasonality (merlion.models.forecast.prophet.prophet property)": [[11, "merlion.models.forecast.prophet.Prophet.daily_seasonality"]], "damped_trend (merlion.models.forecast.ets.ets property)": [[11, "merlion.models.forecast.ets.ETS.damped_trend"]], "data (merlion.models.forecast.smoother.deltaestimator property)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.data"]], "deep_model_class (merlion.models.forecast.autoformer.autoformerforecaster attribute)": [[11, "merlion.models.forecast.autoformer.AutoformerForecaster.deep_model_class"]], "deep_model_class (merlion.models.forecast.deep_ar.deeparforecaster attribute)": [[11, "merlion.models.forecast.deep_ar.DeepARForecaster.deep_model_class"]], "deep_model_class (merlion.models.forecast.etsformer.etsformerforecaster attribute)": [[11, "merlion.models.forecast.etsformer.ETSformerForecaster.deep_model_class"]], "deep_model_class (merlion.models.forecast.informer.informerforecaster attribute)": [[11, "merlion.models.forecast.informer.InformerForecaster.deep_model_class"]], "deep_model_class (merlion.models.forecast.transformer.transformerforecaster attribute)": [[11, "merlion.models.forecast.transformer.TransformerForecaster.deep_model_class"]], "delta_hat() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.delta_hat"]], "error (merlion.models.forecast.ets.ets property)": [[11, "merlion.models.forecast.ets.ETS.error"]], "exog_aggregation_policy (merlion.models.forecast.base.forecasterexogbase property)": [[11, "merlion.models.forecast.base.ForecasterExogBase.exog_aggregation_policy"]], "exog_aggregation_policy (merlion.models.forecast.base.forecasterexogconfig property)": [[11, "merlion.models.forecast.base.ForecasterExogConfig.exog_aggregation_policy"]], "exog_missing_value_policy (merlion.models.forecast.base.forecasterexogbase property)": [[11, "merlion.models.forecast.base.ForecasterExogBase.exog_missing_value_policy"]], "exog_missing_value_policy (merlion.models.forecast.base.forecasterexogconfig property)": [[11, "merlion.models.forecast.base.ForecasterExogConfig.exog_missing_value_policy"]], "exog_transform (merlion.models.forecast.base.forecasterexogbase property)": [[11, "merlion.models.forecast.base.ForecasterExogBase.exog_transform"]], "exog_transform (merlion.models.forecast.base.forecasterexogconfig attribute)": [[11, "merlion.models.forecast.base.ForecasterExogConfig.exog_transform"]], "forecast() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.forecast"]], "forward() (merlion.models.forecast.autoformer.autoformermodel method)": [[11, "merlion.models.forecast.autoformer.AutoformerModel.forward"]], "forward() (merlion.models.forecast.deep_ar.deeparmodel method)": [[11, "merlion.models.forecast.deep_ar.DeepARModel.forward"]], "forward() (merlion.models.forecast.etsformer.etsformermodel method)": [[11, "merlion.models.forecast.etsformer.ETSformerModel.forward"]], "forward() (merlion.models.forecast.informer.informermodel method)": [[11, "merlion.models.forecast.informer.InformerModel.forward"]], "forward() (merlion.models.forecast.transformer.transformermodel method)": [[11, "merlion.models.forecast.transformer.TransformerModel.forward"]], "get_figure() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.get_figure"]], "get_lagged_subsequences() (merlion.models.forecast.deep_ar.deeparmodel static method)": [[11, "merlion.models.forecast.deep_ar.DeepARModel.get_lagged_subsequences"]], "holidays (merlion.models.forecast.prophet.prophet property)": [[11, "merlion.models.forecast.prophet.Prophet.holidays"]], "invert_transform (merlion.models.forecast.base.forecasterbase property)": [[11, "merlion.models.forecast.base.ForecasterBase.invert_transform"]], "invert_transform (merlion.models.forecast.base.forecasterconfig attribute)": [[11, "merlion.models.forecast.base.ForecasterConfig.invert_transform"]], "jitter() (merlion.models.forecast.etsformer.etsformermodel method)": [[11, "merlion.models.forecast.etsformer.ETSformerModel.jitter"]], "lag (merlion.models.forecast.smoother.deltastats property)": [[11, "merlion.models.forecast.smoother.DeltaStats.lag"]], "loss_err() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.loss_err"]], "marginalize_xhat_h() (merlion.models.forecast.smoother.mses method)": [[11, "merlion.models.forecast.smoother.MSES.marginalize_xhat_h"]], "max_forecast_steps (merlion.models.forecast.base.forecasterbase property)": [[11, "merlion.models.forecast.base.ForecasterBase.max_forecast_steps"]], "max_forecast_steps (merlion.models.forecast.base.forecasterconfig attribute)": [[11, "merlion.models.forecast.base.ForecasterConfig.max_forecast_steps"]], "max_horizon (merlion.models.forecast.smoother.mses property)": [[11, "merlion.models.forecast.smoother.MSES.max_horizon"]], "max_scale (merlion.models.forecast.smoother.deltaestimator property)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.max_scale"]], "max_scale (merlion.models.forecast.smoother.msesconfig property)": [[11, "merlion.models.forecast.smoother.MSESConfig.max_scale"]], "maxlags (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[11, "merlion.models.forecast.sklearn_base.SKLearnForecaster.maxlags"]], "maxlags (merlion.models.forecast.vector_ar.vectorar property)": [[11, "merlion.models.forecast.vector_ar.VectorAR.maxlags"]], "merlion.models.forecast": [[11, "module-merlion.models.forecast"]], "merlion.models.forecast.arima": [[11, "module-merlion.models.forecast.arima"]], "merlion.models.forecast.autoformer": [[11, "module-merlion.models.forecast.autoformer"]], "merlion.models.forecast.base": [[11, "module-merlion.models.forecast.base"]], "merlion.models.forecast.deep_ar": [[11, "module-merlion.models.forecast.deep_ar"]], "merlion.models.forecast.deep_base": [[11, "module-merlion.models.forecast.deep_base"]], "merlion.models.forecast.ets": [[11, "module-merlion.models.forecast.ets"]], "merlion.models.forecast.etsformer": [[11, "module-merlion.models.forecast.etsformer"]], "merlion.models.forecast.informer": [[11, "module-merlion.models.forecast.informer"]], "merlion.models.forecast.prophet": [[11, "module-merlion.models.forecast.prophet"]], "merlion.models.forecast.sarima": [[11, "module-merlion.models.forecast.sarima"]], "merlion.models.forecast.sklearn_base": [[11, "module-merlion.models.forecast.sklearn_base"]], "merlion.models.forecast.smoother": [[11, "module-merlion.models.forecast.smoother"]], "merlion.models.forecast.transformer": [[11, "module-merlion.models.forecast.transformer"]], "merlion.models.forecast.trees": [[11, "module-merlion.models.forecast.trees"]], "merlion.models.forecast.vector_ar": [[11, "module-merlion.models.forecast.vector_ar"]], "model (merlion.models.forecast.sklearn_base.sklearnforecaster attribute)": [[11, "merlion.models.forecast.sklearn_base.SKLearnForecaster.model"]], "neg_err() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.neg_err"]], "order (merlion.models.forecast.sarima.sarima property)": [[11, "merlion.models.forecast.sarima.Sarima.order"]], "plot_forecast() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.plot_forecast"]], "plot_forecast_plotly() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.plot_forecast_plotly"]], "pos_err() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.pos_err"]], "prediction_stride (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[11, "merlion.models.forecast.sklearn_base.SKLearnForecaster.prediction_stride"]], "process_losses() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.process_losses"]], "require_even_sampling (merlion.models.forecast.deep_base.deepforecaster property)": [[11, "merlion.models.forecast.deep_base.DeepForecaster.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.ets.ets property)": [[11, "merlion.models.forecast.ets.ETS.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.prophet.prophet property)": [[11, "merlion.models.forecast.prophet.Prophet.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.sarima.sarima property)": [[11, "merlion.models.forecast.sarima.Sarima.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[11, "merlion.models.forecast.sklearn_base.SKLearnForecaster.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.smoother.mses property)": [[11, "merlion.models.forecast.smoother.MSES.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.vector_ar.vectorar property)": [[11, "merlion.models.forecast.vector_ar.VectorAR.require_even_sampling"]], "require_univariate (merlion.models.forecast.base.forecasterbase property)": [[11, "merlion.models.forecast.base.ForecasterBase.require_univariate"]], "require_univariate (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[11, "merlion.models.forecast.sklearn_base.SKLearnForecaster.require_univariate"]], "resample_time_stamps() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.resample_time_stamps"]], "rho (merlion.models.forecast.smoother.mses property)": [[11, "merlion.models.forecast.smoother.MSES.rho"]], "sampling_decoder() (merlion.models.forecast.deep_ar.deeparmodel method)": [[11, "merlion.models.forecast.deep_ar.DeepARModel.sampling_decoder"]], "scale() (merlion.models.forecast.etsformer.etsformermodel method)": [[11, "merlion.models.forecast.etsformer.ETSformerModel.scale"]], "seasonal (merlion.models.forecast.ets.ets property)": [[11, "merlion.models.forecast.ets.ETS.seasonal"]], "seasonal_order (merlion.models.forecast.arima.arimaconfig property)": [[11, "merlion.models.forecast.arima.ArimaConfig.seasonal_order"]], "seasonal_order (merlion.models.forecast.sarima.sarima property)": [[11, "merlion.models.forecast.sarima.Sarima.seasonal_order"]], "seasonal_periods (merlion.models.forecast.ets.ets property)": [[11, "merlion.models.forecast.ets.ETS.seasonal_periods"]], "seasonality_mode (merlion.models.forecast.prophet.prophet property)": [[11, "merlion.models.forecast.prophet.Prophet.seasonality_mode"]], "set_seasonality() (merlion.models.forecast.ets.ets method)": [[11, "merlion.models.forecast.ets.ETS.set_seasonality"]], "set_seasonality() (merlion.models.forecast.prophet.prophet method)": [[11, "merlion.models.forecast.prophet.Prophet.set_seasonality"]], "set_seasonality() (merlion.models.forecast.sarima.sarima method)": [[11, "merlion.models.forecast.sarima.Sarima.set_seasonality"]], "shift() (merlion.models.forecast.etsformer.etsformermodel method)": [[11, "merlion.models.forecast.etsformer.ETSformerModel.shift"]], "support_multivariate_output (merlion.models.forecast.base.forecasterbase property)": [[11, "merlion.models.forecast.base.ForecasterBase.support_multivariate_output"]], "support_multivariate_output (merlion.models.forecast.deep_base.deepforecaster property)": [[11, "merlion.models.forecast.deep_base.DeepForecaster.support_multivariate_output"]], "supports_exog (merlion.models.forecast.base.forecasterexogbase property)": [[11, "merlion.models.forecast.base.ForecasterExogBase.supports_exog"]], "target_name (merlion.models.forecast.base.forecasterbase attribute)": [[11, "merlion.models.forecast.base.ForecasterBase.target_name"]], "target_seq_index (merlion.models.forecast.base.forecasterbase property)": [[11, "merlion.models.forecast.base.ForecasterBase.target_seq_index"]], "target_seq_index (merlion.models.forecast.base.forecasterconfig attribute)": [[11, "merlion.models.forecast.base.ForecasterConfig.target_seq_index"]], "train() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.train"]], "train() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.train"]], "train_post_process() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.train_post_process"]], "train_pre_process() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.train_pre_process"]], "transform() (merlion.models.forecast.etsformer.etsformermodel method)": [[11, "merlion.models.forecast.etsformer.ETSformerModel.transform"]], "transform_exog_data() (merlion.models.forecast.base.forecasterbase method)": [[11, "merlion.models.forecast.base.ForecasterBase.transform_exog_data"]], "transform_exog_data() (merlion.models.forecast.base.forecasterexogbase method)": [[11, "merlion.models.forecast.base.ForecasterExogBase.transform_exog_data"]], "trend (merlion.models.forecast.ets.ets property)": [[11, "merlion.models.forecast.ets.ETS.trend"]], "tune() (merlion.models.forecast.smoother.deltastats method)": [[11, "merlion.models.forecast.smoother.DeltaStats.tune"]], "uncertainty_samples (merlion.models.forecast.prophet.prophet property)": [[11, "merlion.models.forecast.prophet.Prophet.uncertainty_samples"]], "unroll_encoder() (merlion.models.forecast.deep_ar.deeparmodel method)": [[11, "merlion.models.forecast.deep_ar.DeepARModel.unroll_encoder"]], "update() (merlion.models.forecast.smoother.mses method)": [[11, "merlion.models.forecast.smoother.MSES.update"]], "update_acceleration() (merlion.models.forecast.smoother.deltastats method)": [[11, "merlion.models.forecast.smoother.DeltaStats.update_acceleration"]], "update_loss() (merlion.models.forecast.smoother.deltastats method)": [[11, "merlion.models.forecast.smoother.DeltaStats.update_loss"]], "update_velocity() (merlion.models.forecast.smoother.deltastats method)": [[11, "merlion.models.forecast.smoother.DeltaStats.update_velocity"]], "vel_err() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.vel_err"]], "velocity() (merlion.models.forecast.smoother.deltaestimator method)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.velocity"]], "weekly_seasonality (merlion.models.forecast.prophet.prophet property)": [[11, "merlion.models.forecast.prophet.Prophet.weekly_seasonality"]], "x (merlion.models.forecast.smoother.deltaestimator property)": [[11, "merlion.models.forecast.smoother.DeltaEstimator.x"]], "xhat_h() (merlion.models.forecast.smoother.mses method)": [[11, "merlion.models.forecast.smoother.MSES.xhat_h"]], "yearly_seasonality (merlion.models.forecast.prophet.prophet property)": [[11, "merlion.models.forecast.prophet.Prophet.yearly_seasonality"]], "dayofmonth (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.DayOfMonth"]], "dayofweek (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.DayOfWeek"]], "dayofyear (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.DayOfYear"]], "earlystopping (class in merlion.models.utils.early_stopping)": [[12, "merlion.models.utils.early_stopping.EarlyStopping"]], "hourofday (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.HourOfDay"]], "kpss_stationaritytest() (in module merlion.models.utils.autosarima_utils)": [[12, "merlion.models.utils.autosarima_utils.KPSS_stationaritytest"]], "minuteofhour (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.MinuteOfHour"]], "monthofyear (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.MonthOfYear"]], "rollingwindowdataset (class in merlion.models.utils.rolling_window_dataset)": [[12, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset"]], "secondofminute (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.SecondOfMinute"]], "timefeature (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.TimeFeature"]], "weekofyear (class in merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.WeekOfYear"]], "collate_batch() (merlion.models.utils.rolling_window_dataset.rollingwindowdataset method)": [[12, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.collate_batch"]], "detect_maxiter_sarima_model() (in module merlion.models.utils.autosarima_utils)": [[12, "merlion.models.utils.autosarima_utils.detect_maxiter_sarima_model"]], "diff() (in module merlion.models.utils.autosarima_utils)": [[12, "merlion.models.utils.autosarima_utils.diff"]], "get_time_features() (in module merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.get_time_features"]], "load_best_model() (merlion.models.utils.early_stopping.earlystopping method)": [[12, "merlion.models.utils.early_stopping.EarlyStopping.load_best_model"]], "merlion.models.utils": [[12, "module-merlion.models.utils"]], "merlion.models.utils.autosarima_utils": [[12, "module-merlion.models.utils.autosarima_utils"]], "merlion.models.utils.early_stopping": [[12, "module-merlion.models.utils.early_stopping"]], "merlion.models.utils.rolling_window_dataset": [[12, "module-merlion.models.utils.rolling_window_dataset"]], "merlion.models.utils.time_features": [[12, "module-merlion.models.utils.time_features"]], "n_points (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[12, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.n_points"]], "n_train (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[12, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.n_train"]], "n_valid (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[12, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.n_valid"]], "n_windows (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[12, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.n_windows"]], "ndiffs() (in module merlion.models.utils.autosarima_utils)": [[12, "merlion.models.utils.autosarima_utils.ndiffs"]], "nsdiffs() (in module merlion.models.utils.autosarima_utils)": [[12, "merlion.models.utils.autosarima_utils.nsdiffs"]], "save_best_state_and_dict() (merlion.models.utils.early_stopping.earlystopping method)": [[12, "merlion.models.utils.early_stopping.EarlyStopping.save_best_state_and_dict"]], "seas_seasonalstationaritytest() (in module merlion.models.utils.autosarima_utils)": [[12, "merlion.models.utils.autosarima_utils.seas_seasonalstationaritytest"]], "seed (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[12, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.seed"]], "time_features_from_frequency_str() (in module merlion.models.utils.time_features)": [[12, "merlion.models.utils.time_features.time_features_from_frequency_str"]], "validation (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[12, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.validation"]], "figure (class in merlion.plot)": [[13, "merlion.plot.Figure"]], "mtsfigure (class in merlion.plot)": [[13, "merlion.plot.MTSFigure"]], "get_y() (merlion.plot.figure method)": [[13, "merlion.plot.Figure.get_y"]], "get_y() (merlion.plot.mtsfigure method)": [[13, "merlion.plot.MTSFigure.get_y"]], "get_yhat() (merlion.plot.figure method)": [[13, "merlion.plot.Figure.get_yhat"]], "get_yhat() (merlion.plot.mtsfigure method)": [[13, "merlion.plot.MTSFigure.get_yhat"]], "get_yhat_iqr() (merlion.plot.figure method)": [[13, "merlion.plot.Figure.get_yhat_iqr"]], "get_yhat_iqr() (merlion.plot.mtsfigure method)": [[13, "merlion.plot.MTSFigure.get_yhat_iqr"]], "merlion.plot": [[13, "module-merlion.plot"]], "plot() (merlion.plot.figure method)": [[13, "merlion.plot.Figure.plot"]], "plot_anoms() (in module merlion.plot)": [[13, "merlion.plot.plot_anoms"]], "plot_anoms_plotly() (in module merlion.plot)": [[13, "merlion.plot.plot_anoms_plotly"]], "plot_plotly() (merlion.plot.figure method)": [[13, "merlion.plot.Figure.plot_plotly"]], "plot_plotly() (merlion.plot.mtsfigure method)": [[13, "merlion.plot.MTSFigure.plot_plotly"]], "t0 (merlion.plot.figure property)": [[13, "merlion.plot.Figure.t0"]], "t0 (merlion.plot.mtsfigure property)": [[13, "merlion.plot.MTSFigure.t0"]], "t_split (merlion.plot.figure property)": [[13, "merlion.plot.Figure.t_split"]], "t_split (merlion.plot.mtsfigure property)": [[13, "merlion.plot.MTSFigure.t_split"]], "tf (merlion.plot.figure property)": [[13, "merlion.plot.Figure.tf"]], "tf (merlion.plot.mtsfigure property)": [[13, "merlion.plot.MTSFigure.tf"]], "adaptiveaggregatealarms (class in merlion.post_process.threshold)": [[14, "merlion.post_process.threshold.AdaptiveAggregateAlarms"]], "adaptivethreshold (class in merlion.post_process.threshold)": [[14, "merlion.post_process.threshold.AdaptiveThreshold"]], "aggregatealarms (class in merlion.post_process.threshold)": [[14, "merlion.post_process.threshold.AggregateAlarms"]], "anomscorecalibrator (class in merlion.post_process.calibrate)": [[14, "merlion.post_process.calibrate.AnomScoreCalibrator"]], "f1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.F1"]], "f2 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.F2"]], "f5 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.F5"]], "meantimetodetect (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.MeanTimeToDetect"]], "nabscore (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.NABScore"]], "nabscorelowfn (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.NABScoreLowFN"]], "nabscorelowfp (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.NABScoreLowFP"]], "pointadjustedf1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedF1"]], "pointadjustedprecision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedPrecision"]], "pointadjustedrecall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedRecall"]], "pointwisef1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.PointwiseF1"]], "pointwiseprecision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.PointwisePrecision"]], "pointwiserecall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.PointwiseRecall"]], "postrulebase (class in merlion.post_process.base)": [[14, "merlion.post_process.base.PostRuleBase"]], "postrulefactory (class in merlion.post_process.factory)": [[14, "merlion.post_process.factory.PostRuleFactory"]], "postrulesequence (class in merlion.post_process.sequence)": [[14, "merlion.post_process.sequence.PostRuleSequence"]], "precision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.Precision"]], "recall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric.Recall"]], "threshold (class in merlion.post_process.threshold)": [[14, "merlion.post_process.threshold.Threshold"]], "threshold.tsadmetric (class in merlion.post_process.threshold)": [[14, "merlion.post_process.threshold.Threshold.TSADMetric"]], "abs_score (merlion.post_process.threshold.aggregatealarms property)": [[14, "merlion.post_process.threshold.AggregateAlarms.abs_score"]], "alm_threshold (merlion.post_process.threshold.aggregatealarms property)": [[14, "merlion.post_process.threshold.AggregateAlarms.alm_threshold"]], "anchors (merlion.post_process.calibrate.anomscorecalibrator property)": [[14, "merlion.post_process.calibrate.AnomScoreCalibrator.anchors"]], "bin_sz (merlion.post_process.threshold.adaptiveaggregatealarms property)": [[14, "merlion.post_process.threshold.AdaptiveAggregateAlarms.bin_sz"]], "create() (merlion.post_process.factory.postrulefactory class method)": [[14, "merlion.post_process.factory.PostRuleFactory.create"]], "default_hist_gap_thres (merlion.post_process.threshold.adaptiveaggregatealarms property)": [[14, "merlion.post_process.threshold.AdaptiveAggregateAlarms.default_hist_gap_thres"]], "filter() (merlion.post_process.threshold.aggregatealarms method)": [[14, "merlion.post_process.threshold.AggregateAlarms.filter"]], "from_dict() (merlion.post_process.base.postrulebase class method)": [[14, "merlion.post_process.base.PostRuleBase.from_dict"]], "from_dict() (merlion.post_process.sequence.postrulesequence class method)": [[14, "merlion.post_process.sequence.PostRuleSequence.from_dict"]], "get_adaptive_thres() (in module merlion.post_process.threshold)": [[14, "merlion.post_process.threshold.get_adaptive_thres"]], "get_post_rule_class() (merlion.post_process.factory.postrulefactory class method)": [[14, "merlion.post_process.factory.PostRuleFactory.get_post_rule_class"]], "merlion.post_process": [[14, "module-merlion.post_process"]], "merlion.post_process.base": [[14, "module-merlion.post_process.base"]], "merlion.post_process.calibrate": [[14, "module-merlion.post_process.calibrate"]], "merlion.post_process.factory": [[14, "module-merlion.post_process.factory"]], "merlion.post_process.sequence": [[14, "module-merlion.post_process.sequence"]], "merlion.post_process.threshold": [[14, "module-merlion.post_process.threshold"]], "suppress_secs (merlion.post_process.threshold.aggregatealarms property)": [[14, "merlion.post_process.threshold.AggregateAlarms.suppress_secs"]], "threshold_class (merlion.post_process.threshold.adaptiveaggregatealarms attribute)": [[14, "merlion.post_process.threshold.AdaptiveAggregateAlarms.threshold_class"]], "threshold_class (merlion.post_process.threshold.aggregatealarms attribute)": [[14, "merlion.post_process.threshold.AggregateAlarms.threshold_class"]], "to_dict() (merlion.post_process.base.postrulebase method)": [[14, "merlion.post_process.base.PostRuleBase.to_dict"]], "to_dict() (merlion.post_process.sequence.postrulesequence method)": [[14, "merlion.post_process.sequence.PostRuleSequence.to_dict"]], "to_simple_threshold() (merlion.post_process.threshold.aggregatealarms method)": [[14, "merlion.post_process.threshold.AggregateAlarms.to_simple_threshold"]], "to_simple_threshold() (merlion.post_process.threshold.threshold method)": [[14, "merlion.post_process.threshold.Threshold.to_simple_threshold"]], "train() (merlion.post_process.base.postrulebase method)": [[14, "merlion.post_process.base.PostRuleBase.train"]], "train() (merlion.post_process.calibrate.anomscorecalibrator method)": [[14, "merlion.post_process.calibrate.AnomScoreCalibrator.train"]], "train() (merlion.post_process.sequence.postrulesequence method)": [[14, "merlion.post_process.sequence.PostRuleSequence.train"]], "train() (merlion.post_process.threshold.adaptivethreshold method)": [[14, "merlion.post_process.threshold.AdaptiveThreshold.train"]], "train() (merlion.post_process.threshold.aggregatealarms method)": [[14, "merlion.post_process.threshold.AggregateAlarms.train"]], "train() (merlion.post_process.threshold.threshold method)": [[14, "merlion.post_process.threshold.Threshold.train"]], "window_secs (merlion.post_process.threshold.aggregatealarms property)": [[14, "merlion.post_process.threshold.AggregateAlarms.window_secs"]], "tsid_col_name (in module merlion.spark.dataset)": [[15, "merlion.spark.dataset.TSID_COL_NAME"]], "add_tsid_column() (in module merlion.spark.dataset)": [[15, "merlion.spark.dataset.add_tsid_column"]], "anomaly() (in module merlion.spark.pandas_udf)": [[15, "merlion.spark.pandas_udf.anomaly"]], "create_hier_dataset() (in module merlion.spark.dataset)": [[15, "merlion.spark.dataset.create_hier_dataset"]], "forecast() (in module merlion.spark.pandas_udf)": [[15, "merlion.spark.pandas_udf.forecast"]], "merlion.spark": [[15, "module-merlion.spark"]], "merlion.spark.dataset": [[15, "module-merlion.spark.dataset"]], "merlion.spark.pandas_udf": [[15, "module-merlion.spark.pandas_udf"]], "read_dataset() (in module merlion.spark.dataset)": [[15, "merlion.spark.dataset.read_dataset"]], "reconciliation() (in module merlion.spark.pandas_udf)": [[15, "merlion.spark.pandas_udf.reconciliation"]], "write_dataset() (in module merlion.spark.dataset)": [[15, "merlion.spark.dataset.write_dataset"]], "absval (class in merlion.transform.normalize)": [[16, "merlion.transform.normalize.AbsVal"]], "anomalize (class in merlion.transform.anomalize)": [[16, "merlion.transform.anomalize.Anomalize"]], "boxcoxtransform (class in merlion.transform.normalize)": [[16, "merlion.transform.normalize.BoxCoxTransform"]], "differencetransform (class in merlion.transform.moving_average)": [[16, "merlion.transform.moving_average.DifferenceTransform"]], "exponentialmovingaverage (class in merlion.transform.moving_average)": [[16, "merlion.transform.moving_average.ExponentialMovingAverage"]], "identity (class in merlion.transform.base)": [[16, "merlion.transform.base.Identity"]], "invertibletransformbase (class in merlion.transform.base)": [[16, "merlion.transform.base.InvertibleTransformBase"]], "lagtransform (class in merlion.transform.moving_average)": [[16, "merlion.transform.moving_average.LagTransform"]], "levelshift (class in merlion.transform.anomalize)": [[16, "merlion.transform.anomalize.LevelShift"]], "lowerupperclip (class in merlion.transform.bound)": [[16, "merlion.transform.bound.LowerUpperClip"]], "meanvarnormalize (class in merlion.transform.normalize)": [[16, "merlion.transform.normalize.MeanVarNormalize"]], "minmaxnormalize (class in merlion.transform.normalize)": [[16, "merlion.transform.normalize.MinMaxNormalize"]], "movingaverage (class in merlion.transform.moving_average)": [[16, "merlion.transform.moving_average.MovingAverage"]], "movingpercentile (class in merlion.transform.moving_average)": [[16, "merlion.transform.moving_average.MovingPercentile"]], "rescale (class in merlion.transform.normalize)": [[16, "merlion.transform.normalize.Rescale"]], "shingle (class in merlion.transform.resample)": [[16, "merlion.transform.resample.Shingle"]], "shock (class in merlion.transform.anomalize)": [[16, "merlion.transform.anomalize.Shock"]], "temporalresample (class in merlion.transform.resample)": [[16, "merlion.transform.resample.TemporalResample"]], "transformbase (class in merlion.transform.base)": [[16, "merlion.transform.base.TransformBase"]], "transformfactory (class in merlion.transform.factory)": [[16, "merlion.transform.factory.TransformFactory"]], "transformsequence (class in merlion.transform.sequence)": [[16, "merlion.transform.sequence.TransformSequence"]], "transformstack (class in merlion.transform.sequence)": [[16, "merlion.transform.sequence.TransformStack"]], "trendchange (class in merlion.transform.anomalize)": [[16, "merlion.transform.anomalize.TrendChange"]], "_invert() (merlion.transform.base.invertibletransformbase method)": [[16, "merlion.transform.base.InvertibleTransformBase._invert"]], "_invert() (merlion.transform.base.transformbase method)": [[16, "merlion.transform.base.TransformBase._invert"]], "aggregation_policy (merlion.transform.resample.temporalresample property)": [[16, "merlion.transform.resample.TemporalResample.aggregation_policy"]], "anom_width_range (merlion.transform.anomalize.shock property)": [[16, "merlion.transform.anomalize.Shock.anom_width_range"]], "append() (merlion.transform.sequence.transformsequence method)": [[16, "merlion.transform.sequence.TransformSequence.append"]], "compute_lag() (merlion.transform.moving_average.lagtransform method)": [[16, "merlion.transform.moving_average.LagTransform.compute_lag"]], "create() (merlion.transform.factory.transformfactory class method)": [[16, "merlion.transform.factory.TransformFactory.create"]], "from_dict() (merlion.transform.base.transformbase class method)": [[16, "merlion.transform.base.TransformBase.from_dict"]], "from_dict() (merlion.transform.sequence.transformsequence class method)": [[16, "merlion.transform.sequence.TransformSequence.from_dict"]], "get_transform_class() (merlion.transform.factory.transformfactory class method)": [[16, "merlion.transform.factory.TransformFactory.get_transform_class"]], "granularity (merlion.transform.resample.temporalresample property)": [[16, "merlion.transform.resample.TemporalResample.granularity"]], "identity_inversion (merlion.transform.base.identity property)": [[16, "merlion.transform.base.Identity.identity_inversion"]], "identity_inversion (merlion.transform.base.invertibletransformbase property)": [[16, "merlion.transform.base.InvertibleTransformBase.identity_inversion"]], "identity_inversion (merlion.transform.base.transformbase property)": [[16, "merlion.transform.base.TransformBase.identity_inversion"]], "identity_inversion (merlion.transform.normalize.absval property)": [[16, "merlion.transform.normalize.AbsVal.identity_inversion"]], "identity_inversion (merlion.transform.sequence.transformsequence property)": [[16, "merlion.transform.sequence.TransformSequence.identity_inversion"]], "invert() (merlion.transform.base.transformbase method)": [[16, "merlion.transform.base.TransformBase.invert"]], "invert() (merlion.transform.sequence.transformsequence method)": [[16, "merlion.transform.sequence.TransformSequence.invert"]], "invert() (merlion.transform.sequence.transformstack method)": [[16, "merlion.transform.sequence.TransformStack.invert"]], "is_trained (merlion.transform.anomalize.anomalize property)": [[16, "merlion.transform.anomalize.Anomalize.is_trained"]], "is_trained (merlion.transform.normalize.rescale property)": [[16, "merlion.transform.normalize.Rescale.is_trained"]], "merlion.transform": [[16, "module-merlion.transform"]], "merlion.transform.anomalize": [[16, "module-merlion.transform.anomalize"]], "merlion.transform.base": [[16, "module-merlion.transform.base"]], "merlion.transform.bound": [[16, "module-merlion.transform.bound"]], "merlion.transform.factory": [[16, "module-merlion.transform.factory"]], "merlion.transform.moving_average": [[16, "module-merlion.transform.moving_average"]], "merlion.transform.normalize": [[16, "module-merlion.transform.normalize"]], "merlion.transform.resample": [[16, "module-merlion.transform.resample"]], "merlion.transform.sequence": [[16, "module-merlion.transform.sequence"]], "missing_value_policy (merlion.transform.resample.temporalresample property)": [[16, "merlion.transform.resample.TemporalResample.missing_value_policy"]], "natural_bounds (merlion.transform.anomalize.anomalize property)": [[16, "merlion.transform.anomalize.Anomalize.natural_bounds"]], "proper_inversion (merlion.transform.base.invertibletransformbase property)": [[16, "merlion.transform.base.InvertibleTransformBase.proper_inversion"]], "proper_inversion (merlion.transform.base.transformbase property)": [[16, "merlion.transform.base.TransformBase.proper_inversion"]], "proper_inversion (merlion.transform.resample.temporalresample property)": [[16, "merlion.transform.resample.TemporalResample.proper_inversion"]], "proper_inversion (merlion.transform.sequence.transformsequence property)": [[16, "merlion.transform.sequence.TransformSequence.proper_inversion"]], "proper_inversion (merlion.transform.sequence.transformstack property)": [[16, "merlion.transform.sequence.TransformStack.proper_inversion"]], "random_anom_width() (merlion.transform.anomalize.shock method)": [[16, "merlion.transform.anomalize.Shock.random_anom_width"]], "random_is_anom() (merlion.transform.anomalize.anomalize method)": [[16, "merlion.transform.anomalize.Anomalize.random_is_anom"]], "random_is_anom() (merlion.transform.anomalize.shock method)": [[16, "merlion.transform.anomalize.Shock.random_is_anom"]], "random_scale() (merlion.transform.anomalize.trendchange method)": [[16, "merlion.transform.anomalize.TrendChange.random_scale"]], "random_sd_units() (merlion.transform.anomalize.shock method)": [[16, "merlion.transform.anomalize.Shock.random_sd_units"]], "requires_inversion_state (merlion.transform.base.identity property)": [[16, "merlion.transform.base.Identity.requires_inversion_state"]], "requires_inversion_state (merlion.transform.base.transformbase property)": [[16, "merlion.transform.base.TransformBase.requires_inversion_state"]], "requires_inversion_state (merlion.transform.bound.lowerupperclip property)": [[16, "merlion.transform.bound.LowerUpperClip.requires_inversion_state"]], "requires_inversion_state (merlion.transform.moving_average.exponentialmovingaverage property)": [[16, "merlion.transform.moving_average.ExponentialMovingAverage.requires_inversion_state"]], "requires_inversion_state (merlion.transform.moving_average.movingaverage property)": [[16, "merlion.transform.moving_average.MovingAverage.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.absval property)": [[16, "merlion.transform.normalize.AbsVal.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.boxcoxtransform property)": [[16, "merlion.transform.normalize.BoxCoxTransform.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.rescale property)": [[16, "merlion.transform.normalize.Rescale.requires_inversion_state"]], "requires_inversion_state (merlion.transform.resample.temporalresample property)": [[16, "merlion.transform.resample.TemporalResample.requires_inversion_state"]], "requires_inversion_state (merlion.transform.sequence.transformsequence property)": [[16, "merlion.transform.sequence.TransformSequence.requires_inversion_state"]], "requires_inversion_state (merlion.transform.sequence.transformstack property)": [[16, "merlion.transform.sequence.TransformStack.requires_inversion_state"]], "scale_range (merlion.transform.anomalize.trendchange property)": [[16, "merlion.transform.anomalize.TrendChange.scale_range"]], "sd_range (merlion.transform.anomalize.shock property)": [[16, "merlion.transform.anomalize.Shock.sd_range"]], "to_dict() (merlion.transform.base.transformbase method)": [[16, "merlion.transform.base.TransformBase.to_dict"]], "to_dict() (merlion.transform.sequence.transformsequence method)": [[16, "merlion.transform.sequence.TransformSequence.to_dict"]], "train() (merlion.transform.anomalize.shock method)": [[16, "merlion.transform.anomalize.Shock.train"]], "train() (merlion.transform.anomalize.trendchange method)": [[16, "merlion.transform.anomalize.TrendChange.train"]], "train() (merlion.transform.base.identity method)": [[16, "merlion.transform.base.Identity.train"]], "train() (merlion.transform.base.transformbase method)": [[16, "merlion.transform.base.TransformBase.train"]], "train() (merlion.transform.bound.lowerupperclip method)": [[16, "merlion.transform.bound.LowerUpperClip.train"]], "train() (merlion.transform.moving_average.differencetransform method)": [[16, "merlion.transform.moving_average.DifferenceTransform.train"]], "train() (merlion.transform.moving_average.exponentialmovingaverage method)": [[16, "merlion.transform.moving_average.ExponentialMovingAverage.train"]], "train() (merlion.transform.moving_average.lagtransform method)": [[16, "merlion.transform.moving_average.LagTransform.train"]], "train() (merlion.transform.moving_average.movingaverage method)": [[16, "merlion.transform.moving_average.MovingAverage.train"]], "train() (merlion.transform.moving_average.movingpercentile method)": [[16, "merlion.transform.moving_average.MovingPercentile.train"]], "train() (merlion.transform.normalize.absval method)": [[16, "merlion.transform.normalize.AbsVal.train"]], "train() (merlion.transform.normalize.boxcoxtransform method)": [[16, "merlion.transform.normalize.BoxCoxTransform.train"]], "train() (merlion.transform.normalize.meanvarnormalize method)": [[16, "merlion.transform.normalize.MeanVarNormalize.train"]], "train() (merlion.transform.normalize.minmaxnormalize method)": [[16, "merlion.transform.normalize.MinMaxNormalize.train"]], "train() (merlion.transform.normalize.rescale method)": [[16, "merlion.transform.normalize.Rescale.train"]], "train() (merlion.transform.resample.shingle method)": [[16, "merlion.transform.resample.Shingle.train"]], "train() (merlion.transform.resample.temporalresample method)": [[16, "merlion.transform.resample.TemporalResample.train"]], "train() (merlion.transform.sequence.transformsequence method)": [[16, "merlion.transform.sequence.TransformSequence.train"]], "train() (merlion.transform.sequence.transformstack method)": [[16, "merlion.transform.sequence.TransformStack.train"]], "aggregationpolicy (class in merlion.utils.resample)": [[17, "merlion.utils.resample.AggregationPolicy"]], "alignpolicy (class in merlion.utils.resample)": [[17, "merlion.utils.resample.AlignPolicy"]], "bfill (merlion.utils.resample.missingvaluepolicy attribute)": [[17, "merlion.utils.resample.MissingValuePolicy.BFill"]], "bayesianlinreg (class in merlion.utils.conj_priors)": [[17, "merlion.utils.conj_priors.BayesianLinReg"]], "bayesianmvlinreg (class in merlion.utils.conj_priors)": [[17, "merlion.utils.conj_priors.BayesianMVLinReg"]], "betabernoulli (class in merlion.utils.conj_priors)": [[17, "merlion.utils.conj_priors.BetaBernoulli"]], "conjprior (class in merlion.utils.conj_priors)": [[17, "merlion.utils.conj_priors.ConjPrior"]], "exponentialmovingaverage (class in merlion.utils.istat)": [[17, "merlion.utils.istat.ExponentialMovingAverage"]], "ffill (merlion.utils.resample.missingvaluepolicy attribute)": [[17, "merlion.utils.resample.MissingValuePolicy.FFill"]], "first (merlion.utils.resample.aggregationpolicy attribute)": [[17, "merlion.utils.resample.AggregationPolicy.First"]], "fixedgranularity (merlion.utils.resample.alignpolicy attribute)": [[17, "merlion.utils.resample.AlignPolicy.FixedGranularity"]], "fixedreference (merlion.utils.resample.alignpolicy attribute)": [[17, "merlion.utils.resample.AlignPolicy.FixedReference"]], "generatorcomposer (class in merlion.utils.ts_generator)": [[17, "merlion.utils.ts_generator.GeneratorComposer"]], "generatorconcatenator (class in merlion.utils.ts_generator)": [[17, "merlion.utils.ts_generator.GeneratorConcatenator"]], "istat (class in merlion.utils.istat)": [[17, "merlion.utils.istat.IStat"]], "innerjoin (merlion.utils.resample.alignpolicy attribute)": [[17, "merlion.utils.resample.AlignPolicy.InnerJoin"]], "interpolate (merlion.utils.resample.missingvaluepolicy attribute)": [[17, "merlion.utils.resample.MissingValuePolicy.Interpolate"]], "last (merlion.utils.resample.aggregationpolicy attribute)": [[17, "merlion.utils.resample.AggregationPolicy.Last"]], "mvnorminvwishart (class in merlion.utils.conj_priors)": [[17, "merlion.utils.conj_priors.MVNormInvWishart"]], "max (merlion.utils.resample.aggregationpolicy attribute)": [[17, "merlion.utils.resample.AggregationPolicy.Max"]], "mean (class in merlion.utils.istat)": [[17, "merlion.utils.istat.Mean"]], "mean (merlion.utils.resample.aggregationpolicy attribute)": [[17, "merlion.utils.resample.AggregationPolicy.Mean"]], "median (merlion.utils.resample.aggregationpolicy attribute)": [[17, "merlion.utils.resample.AggregationPolicy.Median"]], "min (merlion.utils.resample.aggregationpolicy attribute)": [[17, "merlion.utils.resample.AggregationPolicy.Min"]], "missingvaluepolicy (class in merlion.utils.resample)": [[17, "merlion.utils.resample.MissingValuePolicy"]], "nearest (merlion.utils.resample.missingvaluepolicy attribute)": [[17, "merlion.utils.resample.MissingValuePolicy.Nearest"]], "norminvgamma (class in merlion.utils.conj_priors)": [[17, "merlion.utils.conj_priors.NormInvGamma"]], "outerjoin (merlion.utils.resample.alignpolicy attribute)": [[17, "merlion.utils.resample.AlignPolicy.OuterJoin"]], "recencyweightedvariance (class in merlion.utils.istat)": [[17, "merlion.utils.istat.RecencyWeightedVariance"]], "scalarconjprior (class in merlion.utils.conj_priors)": [[17, "merlion.utils.conj_priors.ScalarConjPrior"]], "sigma_posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[17, "merlion.utils.conj_priors.MVNormInvWishart.Sigma_posterior"]], "sum (merlion.utils.resample.aggregationpolicy attribute)": [[17, "merlion.utils.resample.AggregationPolicy.Sum"]], "timeseries (class in merlion.utils.time_series)": [[17, "merlion.utils.time_series.TimeSeries"]], "timeseriesgenerator (class in merlion.utils.ts_generator)": [[17, "merlion.utils.ts_generator.TimeSeriesGenerator"]], "univariatetimeseries (class in merlion.utils.time_series)": [[17, "merlion.utils.time_series.UnivariateTimeSeries"]], "variance (class in merlion.utils.istat)": [[17, "merlion.utils.istat.Variance"]], "zfill (merlion.utils.resample.missingvaluepolicy attribute)": [[17, "merlion.utils.resample.MissingValuePolicy.ZFill"]], "__getitem__() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.__getitem__"]], "__getitem__() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.__getitem__"]], "__iter__() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.__iter__"]], "__iter__() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.__iter__"]], "add() (merlion.utils.istat.istat method)": [[17, "merlion.utils.istat.IStat.add"]], "add() (merlion.utils.istat.mean method)": [[17, "merlion.utils.istat.Mean.add"]], "add() (merlion.utils.istat.variance method)": [[17, "merlion.utils.istat.Variance.add"]], "add_batch() (merlion.utils.istat.istat method)": [[17, "merlion.utils.istat.IStat.add_batch"]], "align() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.align"]], "assert_equal_timedeltas() (in module merlion.utils.time_series)": [[17, "merlion.utils.time_series.assert_equal_timedeltas"]], "bisect() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.bisect"]], "bisect() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.bisect"]], "concat() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.concat"]], "concat() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.concat"]], "copy() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.copy"]], "corrected_value (merlion.utils.istat.variance property)": [[17, "merlion.utils.istat.Variance.corrected_value"]], "csv_to_time_series() (in module merlion.utils.data_io)": [[17, "merlion.utils.data_io.csv_to_time_series"]], "data_io_decorator() (in module merlion.utils.data_io)": [[17, "merlion.utils.data_io.data_io_decorator"]], "df_to_time_series() (in module merlion.utils.data_io)": [[17, "merlion.utils.data_io.df_to_time_series"]], "dim (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.dim"]], "drop() (merlion.utils.istat.exponentialmovingaverage method)": [[17, "merlion.utils.istat.ExponentialMovingAverage.drop"]], "drop() (merlion.utils.istat.istat method)": [[17, "merlion.utils.istat.IStat.drop"]], "drop() (merlion.utils.istat.mean method)": [[17, "merlion.utils.istat.Mean.drop"]], "drop() (merlion.utils.istat.recencyweightedvariance method)": [[17, "merlion.utils.istat.RecencyWeightedVariance.drop"]], "drop() (merlion.utils.istat.variance method)": [[17, "merlion.utils.istat.Variance.drop"]], "drop_batch() (merlion.utils.istat.istat method)": [[17, "merlion.utils.istat.IStat.drop_batch"]], "empty() (merlion.utils.time_series.univariatetimeseries class method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.empty"]], "forecast() (merlion.utils.conj_priors.bayesianlinreg method)": [[17, "merlion.utils.conj_priors.BayesianLinReg.forecast"]], "forecast() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[17, "merlion.utils.conj_priors.BayesianMVLinReg.forecast"]], "forecast() (merlion.utils.conj_priors.betabernoulli method)": [[17, "merlion.utils.conj_priors.BetaBernoulli.forecast"]], "forecast() (merlion.utils.conj_priors.conjprior method)": [[17, "merlion.utils.conj_priors.ConjPrior.forecast"]], "forecast() (merlion.utils.conj_priors.mvnorminvwishart method)": [[17, "merlion.utils.conj_priors.MVNormInvWishart.forecast"]], "forecast() (merlion.utils.conj_priors.norminvgamma method)": [[17, "merlion.utils.conj_priors.NormInvGamma.forecast"]], "from_dict() (merlion.utils.conj_priors.conjprior class method)": [[17, "merlion.utils.conj_priors.ConjPrior.from_dict"]], "from_dict() (merlion.utils.time_series.univariatetimeseries class method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.from_dict"]], "from_pd() (merlion.utils.time_series.timeseries class method)": [[17, "merlion.utils.time_series.TimeSeries.from_pd"]], "from_pd() (merlion.utils.time_series.univariatetimeseries class method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.from_pd"]], "from_ts_list() (merlion.utils.time_series.timeseries class method)": [[17, "merlion.utils.time_series.TimeSeries.from_ts_list"]], "generate() (merlion.utils.ts_generator.timeseriesgenerator method)": [[17, "merlion.utils.ts_generator.TimeSeriesGenerator.generate"]], "generators (merlion.utils.ts_generator.generatorcomposer property)": [[17, "merlion.utils.ts_generator.GeneratorComposer.generators"]], "generators (merlion.utils.ts_generator.generatorconcatenator property)": [[17, "merlion.utils.ts_generator.GeneratorConcatenator.generators"]], "get_date_offset() (in module merlion.utils.resample)": [[17, "merlion.utils.resample.get_date_offset"]], "get_time_series_values() (merlion.utils.conj_priors.conjprior static method)": [[17, "merlion.utils.conj_priors.ConjPrior.get_time_series_values"]], "get_time_series_values() (merlion.utils.conj_priors.scalarconjprior static method)": [[17, "merlion.utils.conj_priors.ScalarConjPrior.get_time_series_values"]], "granularity_str_to_seconds() (in module merlion.utils.resample)": [[17, "merlion.utils.resample.granularity_str_to_seconds"]], "index (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.index"]], "infer_granularity() (in module merlion.utils.resample)": [[17, "merlion.utils.resample.infer_granularity"]], "is_aligned (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.is_aligned"]], "is_empty() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.is_empty"]], "is_empty() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.is_empty"]], "items() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.items"]], "mean_class (merlion.utils.istat.recencyweightedvariance attribute)": [[17, "merlion.utils.istat.RecencyWeightedVariance.mean_class"]], "mean_class (merlion.utils.istat.variance attribute)": [[17, "merlion.utils.istat.Variance.mean_class"]], "merlion.utils": [[17, "module-merlion.utils"]], "merlion.utils.conj_priors": [[17, "module-merlion.utils.conj_priors"]], "merlion.utils.data_io": [[17, "module-merlion.utils.data_io"]], "merlion.utils.hts": [[17, "module-merlion.utils.hts"]], "merlion.utils.istat": [[17, "module-merlion.utils.istat"]], "merlion.utils.resample": [[17, "module-merlion.utils.resample"]], "merlion.utils.time_series": [[17, "module-merlion.utils.time_series"]], "merlion.utils.ts_generator": [[17, "module-merlion.utils.ts_generator"]], "mint_reconciliation() (in module merlion.utils.hts)": [[17, "merlion.utils.hts.minT_reconciliation"]], "mu_posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[17, "merlion.utils.conj_priors.MVNormInvWishart.mu_posterior"]], "mu_posterior() (merlion.utils.conj_priors.norminvgamma method)": [[17, "merlion.utils.conj_priors.NormInvGamma.mu_posterior"]], "n (merlion.utils.istat.istat property)": [[17, "merlion.utils.istat.IStat.n"]], "n (merlion.utils.ts_generator.timeseriesgenerator property)": [[17, "merlion.utils.ts_generator.TimeSeriesGenerator.n"]], "n_params (merlion.utils.conj_priors.bayesianlinreg property)": [[17, "merlion.utils.conj_priors.BayesianLinReg.n_params"]], "n_params (merlion.utils.conj_priors.bayesianmvlinreg property)": [[17, "merlion.utils.conj_priors.BayesianMVLinReg.n_params"]], "n_params (merlion.utils.conj_priors.betabernoulli property)": [[17, "merlion.utils.conj_priors.BetaBernoulli.n_params"]], "n_params (merlion.utils.conj_priors.conjprior property)": [[17, "merlion.utils.conj_priors.ConjPrior.n_params"]], "n_params (merlion.utils.conj_priors.mvnorminvwishart property)": [[17, "merlion.utils.conj_priors.MVNormInvWishart.n_params"]], "n_params (merlion.utils.conj_priors.norminvgamma property)": [[17, "merlion.utils.conj_priors.NormInvGamma.n_params"]], "names (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.names"]], "np_time_stamps (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.np_time_stamps"]], "np_time_stamps (merlion.utils.time_series.univariatetimeseries property)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.np_time_stamps"]], "np_values (merlion.utils.time_series.univariatetimeseries property)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.np_values"]], "posterior() (merlion.utils.conj_priors.bayesianlinreg method)": [[17, "merlion.utils.conj_priors.BayesianLinReg.posterior"]], "posterior() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[17, "merlion.utils.conj_priors.BayesianMVLinReg.posterior"]], "posterior() (merlion.utils.conj_priors.betabernoulli method)": [[17, "merlion.utils.conj_priors.BetaBernoulli.posterior"]], "posterior() (merlion.utils.conj_priors.conjprior method)": [[17, "merlion.utils.conj_priors.ConjPrior.posterior"]], "posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[17, "merlion.utils.conj_priors.MVNormInvWishart.posterior"]], "posterior() (merlion.utils.conj_priors.norminvgamma method)": [[17, "merlion.utils.conj_priors.NormInvGamma.posterior"]], "posterior_explicit() (merlion.utils.conj_priors.bayesianlinreg method)": [[17, "merlion.utils.conj_priors.BayesianLinReg.posterior_explicit"]], "posterior_explicit() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[17, "merlion.utils.conj_priors.BayesianMVLinReg.posterior_explicit"]], "process_time_series() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[17, "merlion.utils.conj_priors.BayesianMVLinReg.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.conjprior method)": [[17, "merlion.utils.conj_priors.ConjPrior.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.mvnorminvwishart method)": [[17, "merlion.utils.conj_priors.MVNormInvWishart.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.scalarconjprior method)": [[17, "merlion.utils.conj_priors.ScalarConjPrior.process_time_series"]], "recency_weight (merlion.utils.istat.exponentialmovingaverage property)": [[17, "merlion.utils.istat.ExponentialMovingAverage.recency_weight"]], "recency_weight (merlion.utils.istat.recencyweightedvariance property)": [[17, "merlion.utils.istat.RecencyWeightedVariance.recency_weight"]], "reindex_df() (in module merlion.utils.resample)": [[17, "merlion.utils.resample.reindex_df"]], "rename() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.rename"]], "sd (merlion.utils.istat.variance property)": [[17, "merlion.utils.istat.Variance.sd"]], "se (merlion.utils.istat.variance property)": [[17, "merlion.utils.istat.Variance.se"]], "shape (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.shape"]], "sigma2_posterior() (merlion.utils.conj_priors.norminvgamma method)": [[17, "merlion.utils.conj_priors.NormInvGamma.sigma2_posterior"]], "squeeze() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.squeeze"]], "step (merlion.utils.ts_generator.timeseriesgenerator property)": [[17, "merlion.utils.ts_generator.TimeSeriesGenerator.step"]], "t0 (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.t0"]], "t0 (merlion.utils.time_series.univariatetimeseries property)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.t0"]], "tf (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.tf"]], "tf (merlion.utils.time_series.univariatetimeseries property)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.tf"]], "theta_posterior() (merlion.utils.conj_priors.betabernoulli method)": [[17, "merlion.utils.conj_priors.BetaBernoulli.theta_posterior"]], "time_stamps (merlion.utils.time_series.timeseries property)": [[17, "merlion.utils.time_series.TimeSeries.time_stamps"]], "time_stamps (merlion.utils.time_series.univariatetimeseries property)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.time_stamps"]], "to_csv() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.to_csv"]], "to_dict() (merlion.utils.conj_priors.conjprior method)": [[17, "merlion.utils.conj_priors.ConjPrior.to_dict"]], "to_dict() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.to_dict"]], "to_offset() (in module merlion.utils.resample)": [[17, "merlion.utils.resample.to_offset"]], "to_pd() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.to_pd"]], "to_pd() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.to_pd"]], "to_pd_datetime() (in module merlion.utils.resample)": [[17, "merlion.utils.resample.to_pd_datetime"]], "to_timestamp() (in module merlion.utils.resample)": [[17, "merlion.utils.resample.to_timestamp"]], "to_ts() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.to_ts"]], "true_value (merlion.utils.istat.variance property)": [[17, "merlion.utils.istat.Variance.true_value"]], "update() (merlion.utils.conj_priors.bayesianlinreg method)": [[17, "merlion.utils.conj_priors.BayesianLinReg.update"]], "update() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[17, "merlion.utils.conj_priors.BayesianMVLinReg.update"]], "update() (merlion.utils.conj_priors.betabernoulli method)": [[17, "merlion.utils.conj_priors.BetaBernoulli.update"]], "update() (merlion.utils.conj_priors.conjprior method)": [[17, "merlion.utils.conj_priors.ConjPrior.update"]], "update() (merlion.utils.conj_priors.mvnorminvwishart method)": [[17, "merlion.utils.conj_priors.MVNormInvWishart.update"]], "update() (merlion.utils.conj_priors.norminvgamma method)": [[17, "merlion.utils.conj_priors.NormInvGamma.update"]], "value (merlion.utils.istat.exponentialmovingaverage property)": [[17, "merlion.utils.istat.ExponentialMovingAverage.value"]], "value (merlion.utils.istat.istat property)": [[17, "merlion.utils.istat.IStat.value"]], "value (merlion.utils.istat.mean property)": [[17, "merlion.utils.istat.Mean.value"]], "value (merlion.utils.istat.variance property)": [[17, "merlion.utils.istat.Variance.value"]], "values (merlion.utils.time_series.univariatetimeseries property)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.values"]], "window() (merlion.utils.time_series.timeseries method)": [[17, "merlion.utils.time_series.TimeSeries.window"]], "window() (merlion.utils.time_series.univariatetimeseries method)": [[17, "merlion.utils.time_series.UnivariateTimeSeries.window"]], "x0 (merlion.utils.ts_generator.timeseriesgenerator property)": [[17, "merlion.utils.ts_generator.TimeSeriesGenerator.x0"]], "y() (merlion.utils.ts_generator.generatorconcatenator method)": [[17, "merlion.utils.ts_generator.GeneratorConcatenator.y"]], "y() (merlion.utils.ts_generator.timeseriesgenerator method)": [[17, "merlion.utils.ts_generator.TimeSeriesGenerator.y"]], "basedataset (class in ts_datasets.base)": [[18, "ts_datasets.base.BaseDataset"]], "describe() (ts_datasets.base.basedataset method)": [[18, "ts_datasets.base.BaseDataset.describe"]], "metadata (ts_datasets.base.basedataset attribute)": [[18, "ts_datasets.base.BaseDataset.metadata"]], "time_series (ts_datasets.base.basedataset attribute)": [[18, "ts_datasets.base.BaseDataset.time_series"]], "ts_datasets": [[18, "module-ts_datasets"]], "ts_datasets.base": [[18, "module-ts_datasets.base"]], "customanomalydataset (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.CustomAnomalyDataset"]], "iopscompetition (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.IOpsCompetition"]], "msl (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.MSL"]], "nab (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.NAB"]], "smap (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.SMAP"]], "smd (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.SMD"]], "synthetic (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.Synthetic"]], "tsadbasedataset (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.TSADBaseDataset"]], "ucr (class in ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.UCR"]], "anomaly_subsets (ts_datasets.anomaly.synthetic attribute)": [[19, "ts_datasets.anomaly.Synthetic.anomaly_subsets"]], "base_ts_subsets (ts_datasets.anomaly.synthetic attribute)": [[19, "ts_datasets.anomaly.Synthetic.base_ts_subsets"]], "check_ts_for_metadata() (ts_datasets.anomaly.customanomalydataset method)": [[19, "ts_datasets.anomaly.CustomAnomalyDataset.check_ts_for_metadata"]], "describe() (ts_datasets.anomaly.tsadbasedataset method)": [[19, "ts_datasets.anomaly.TSADBaseDataset.describe"]], "download() (ts_datasets.anomaly.nab method)": [[19, "ts_datasets.anomaly.NAB.download"]], "download() (ts_datasets.anomaly.ucr method)": [[19, "ts_datasets.anomaly.UCR.download"]], "filename (ts_datasets.anomaly.smd attribute)": [[19, "ts_datasets.anomaly.SMD.filename"]], "get_dataset() (in module ts_datasets.anomaly)": [[19, "ts_datasets.anomaly.get_dataset"]], "load_labels() (ts_datasets.anomaly.nab static method)": [[19, "ts_datasets.anomaly.NAB.load_labels"]], "max_lag_sec (ts_datasets.anomaly.iopscompetition property)": [[19, "ts_datasets.anomaly.IOpsCompetition.max_lag_sec"]], "max_lag_sec (ts_datasets.anomaly.tsadbasedataset property)": [[19, "ts_datasets.anomaly.TSADBaseDataset.max_lag_sec"]], "max_lead_sec (ts_datasets.anomaly.nab property)": [[19, "ts_datasets.anomaly.NAB.max_lead_sec"]], "max_lead_sec (ts_datasets.anomaly.tsadbasedataset property)": [[19, "ts_datasets.anomaly.TSADBaseDataset.max_lead_sec"]], "metadata_cols (ts_datasets.anomaly.customanomalydataset property)": [[19, "ts_datasets.anomaly.CustomAnomalyDataset.metadata_cols"]], "ts_datasets.anomaly": [[19, "module-ts_datasets.anomaly"]], "url (ts_datasets.anomaly.msl attribute)": [[19, "ts_datasets.anomaly.MSL.url"]], "url (ts_datasets.anomaly.smap attribute)": [[19, "ts_datasets.anomaly.SMAP.url"]], "url (ts_datasets.anomaly.smd attribute)": [[19, "ts_datasets.anomaly.SMD.url"]], "valid_subsets (ts_datasets.anomaly.nab attribute)": [[19, "ts_datasets.anomaly.NAB.valid_subsets"]], "valid_subsets (ts_datasets.anomaly.smd attribute)": [[19, "ts_datasets.anomaly.SMD.valid_subsets"]], "valid_subsets (ts_datasets.anomaly.synthetic attribute)": [[19, "ts_datasets.anomaly.Synthetic.valid_subsets"]], "customdataset (class in ts_datasets.forecast)": [[20, "ts_datasets.forecast.CustomDataset"]], "energypower (class in ts_datasets.forecast)": [[20, "ts_datasets.forecast.EnergyPower"]], "m4 (class in ts_datasets.forecast)": [[20, "ts_datasets.forecast.M4"]], "seattletrail (class in ts_datasets.forecast)": [[20, "ts_datasets.forecast.SeattleTrail"]], "solarplant (class in ts_datasets.forecast)": [[20, "ts_datasets.forecast.SolarPlant"]], "check_ts_for_metadata() (ts_datasets.forecast.customdataset method)": [[20, "ts_datasets.forecast.CustomDataset.check_ts_for_metadata"]], "get_dataset() (in module ts_datasets.forecast)": [[20, "ts_datasets.forecast.get_dataset"]], "metadata_cols (ts_datasets.forecast.customdataset property)": [[20, "ts_datasets.forecast.CustomDataset.metadata_cols"]], "ts_datasets.forecast": [[20, "module-ts_datasets.forecast"]], "url (ts_datasets.forecast.m4 attribute)": [[20, "ts_datasets.forecast.M4.url"]], "valid_subsets (ts_datasets.forecast.m4 attribute)": [[20, "ts_datasets.forecast.M4.valid_subsets"]]}})