Search.setIndex({"docnames": ["index", "merlion", "merlion.evaluate", "merlion.models", "merlion.models.anomaly", "merlion.models.anomaly.change_point", "merlion.models.anomaly.forecast_based", "merlion.models.automl", "merlion.models.ensemble", "merlion.models.forecast", "merlion.models.utils", "merlion.post_process", "merlion.spark", "merlion.transform", "merlion.utils", "ts_datasets", "ts_datasets.anomaly", "ts_datasets.forecast", "tutorials", "tutorials/CustomDataset", "tutorials/TimeSeries", "tutorials/advanced/1_AutoSARIMA_forecasting_tutorial", "tutorials/advanced/2_ForecastInvertPOC", "tutorials/anomaly/0_AnomalyIntro", "tutorials/anomaly/1_AnomalyFeatures", "tutorials/anomaly/2_AnomalyMultivariate", "tutorials/anomaly/3_AnomalyNewModel", "tutorials/forecast/0_ForecastIntro", "tutorials/forecast/1_ForecastFeatures", "tutorials/forecast/2_ForecastMultivariate", "tutorials/forecast/3_ForecastExogenous", "tutorials/forecast/4_ForecastNewModel"], "filenames": ["index.rst", "merlion.rst", "merlion.evaluate.rst", "merlion.models.rst", "merlion.models.anomaly.rst", "merlion.models.anomaly.change_point.rst", "merlion.models.anomaly.forecast_based.rst", "merlion.models.automl.rst", "merlion.models.ensemble.rst", "merlion.models.forecast.rst", "merlion.models.utils.rst", "merlion.post_process.rst", "merlion.spark.rst", "merlion.transform.rst", "merlion.utils.rst", "ts_datasets.rst", "ts_datasets.anomaly.rst", "ts_datasets.forecast.rst", "tutorials.rst", "tutorials/CustomDataset.ipynb", "tutorials/TimeSeries.ipynb", "tutorials/advanced/1_AutoSARIMA_forecasting_tutorial.ipynb", "tutorials/advanced/2_ForecastInvertPOC.ipynb", "tutorials/anomaly/0_AnomalyIntro.ipynb", "tutorials/anomaly/1_AnomalyFeatures.ipynb", "tutorials/anomaly/2_AnomalyMultivariate.ipynb", "tutorials/anomaly/3_AnomalyNewModel.ipynb", "tutorials/forecast/0_ForecastIntro.ipynb", "tutorials/forecast/1_ForecastFeatures.ipynb", "tutorials/forecast/2_ForecastMultivariate.ipynb", "tutorials/forecast/3_ForecastExogenous.ipynb", "tutorials/forecast/4_ForecastNewModel.ipynb"], "titles": ["Welcome to Merlion\u2019s documentation!", "merlion: Time Series Intelligence", "merlion.evaluate package", "merlion.models package", "merlion.models.anomaly package", "merlion.models.anomaly.change_point package", "merlion.models.anomaly.forecast_based package", "merlion.models.automl package", "merlion.models.ensemble package", "merlion.models.forecast package", "merlion.models.utils package", "merlion.post_process package", "merlion.spark package", "merlion.transform package", "merlion.utils package", "ts_datasets: Easy Data Loading", "ts_datasets.anomaly package", "ts_datasets.forecast package", "Tutorials &amp; Example Code", "Loading Custom Datasets", "Merlion\u2019s Data Format", "Tutorial for AutoSARIMA Forecasting Model", "Proof of Concept: Inverse Transforms for Forecasters", "A Gentle Introduction to Anomaly Detection in Merlion", "How to Use Anomaly Detectors in Merlion", "Multivariate Time Series Anomaly Detection", "Adding New Anomaly Detection Models", "A Gentle Introduction to Forecasting in Merlion", "How to Use Forecasters in Merlion", "Multivariate Time Series Forecasting", "Forecasting With Exogenous Regressors", "Adding a New Forecasting Model"], "terms": {"i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "python": [0, 1, 3, 4, 15, 19], "librari": [0, 1, 20], "time": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31], "seri": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31], "intellig": 0, "It": [0, 2, 4, 9, 13, 16, 19, 24, 28, 31], "featur": [0, 1, 9, 13, 14, 15, 16, 19, 24, 28, 30], "unifi": [0, 1], "interfac": [0, 1, 4, 5, 9], "mani": [0, 1, 2, 3, 4, 6, 11, 12, 16, 17, 19, 26, 28, 30, 31], "commonli": 0, "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 29, 30, 31], "model": [0, 1, 2, 11, 12, 14, 16, 18, 19, 22, 23, 27, 30], "dataset": [0, 1, 9, 10, 16, 17, 18, 23, 25, 26, 27, 29, 30, 31], "forecast": [0, 1, 3, 4, 5, 6, 12, 14, 15, 24], "anomali": [0, 1, 3, 9, 11, 12, 13, 15], "detect": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 21, 24, 29, 31], "chang": [0, 1, 3, 4, 5, 9, 13, 14, 16, 30], "point": [0, 1, 2, 3, 4, 5, 6, 9, 11, 13, 14, 21, 24, 28], "both": [0, 1, 4, 6, 9, 10, 13, 20, 21, 24, 26, 28, 30], "univari": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 17, 19, 20, 25, 26, 28, 29, 30, 31], "multivari": [0, 2, 3, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 30], "along": [0, 4, 13], "standard": [0, 1, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 18, 25, 26, 28, 29, 31], "pre": [0, 1, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 21, 24, 26, 28, 31], "process": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 24, 25, 26, 28, 30, 31], "post": [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 18, 24, 25, 31], "layer": [0, 1, 4, 7], "ha": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 19, 21, 23, 24, 26, 28, 30], "sever": [0, 4, 6], "modul": 0, "improv": [0, 4, 5, 9, 30], "eas": 0, "includ": [0, 1, 2, 3, 4, 5, 6, 9, 11, 13, 14, 16, 17, 24, 26, 28, 30], "visual": [0, 1, 18, 19, 21, 23, 27], "score": [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 24, 25, 26, 31], "calibr": [0, 1, 3, 4, 5, 6, 8, 9, 24, 25, 26], "interpet": 0, "automl": [0, 1, 3, 10, 21], "hyperparamet": [0, 3, 4, 7, 9, 24, 28], "tune": [0, 6, 9], "select": [0, 1, 4, 7, 8, 16, 21, 28, 29], "ensembl": [0, 1, 3, 9, 24, 28, 29], "also": [0, 3, 4, 6, 7, 9, 11, 13, 14, 19, 20, 23, 24, 25, 27, 28, 29, 30], "provid": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 19, 20, 21, 24, 26, 28, 30, 31], "uniqu": [0, 14], "evalu": [0, 1, 4, 7, 8, 11, 14, 18, 21, 22, 23, 27, 30], "framework": [0, 2, 9], "simul": [0, 1, 2, 6, 9, 18, 25, 29], "live": [0, 1, 2, 18, 25, 29], "deploy": [0, 1, 2, 18, 25, 29], "re": [0, 2, 11, 24, 28, 29], "train": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 19, 22, 23, 26, 27, 30, 31], "product": [0, 14], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "aim": 0, "engin": 0, "research": 0, "one": [0, 2, 4, 5, 6, 7, 8, 9, 13, 14, 17, 19, 20, 24, 26, 28, 30, 31], "stop": 0, "solut": 0, "rapidli": 0, "develop": [0, 28], "specif": [0, 1, 2, 3, 4, 6, 7, 9, 11, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31], "need": [0, 3, 4, 6, 8, 9, 14, 15, 19, 24, 31], "benchmark": [0, 2, 4, 15, 16, 19, 23], "them": [0, 3, 4, 5, 6, 8, 11, 12, 16, 21, 24, 28, 30], "across": [0, 9], "multipl": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 31], "consist": [0, 6, 9, 19, 20], "two": [0, 3, 4, 9, 13, 14, 16, 20, 24, 28, 29], "sub": [0, 1, 2, 9, 14, 15, 20], "packag": [0, 1, 15], "implement": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 26, 31], "core": [0, 3, 14, 15, 20], "ts_dataset": [0, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31], "loader": [0, 15, 16, 17, 19, 23, 27], "These": [0, 1, 3, 4, 5, 6, 11, 12, 16, 19, 20, 28], "load": [0, 1, 3, 4, 9, 16, 17, 18, 20, 25, 29], "panda": [0, 1, 3, 5, 7, 10, 12, 14, 15, 16, 19, 20, 21, 22, 24, 26, 28, 31], "datafram": [0, 1, 4, 6, 7, 9, 10, 12, 14, 15, 16, 20, 24, 26, 28, 31], "accompani": [0, 14], "metadata": [0, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 31], "you": [0, 2, 3, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 20, 24, 26, 28, 29, 31], "can": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31], "from": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "pypi": 0, "call": [0, 3, 7, 9, 12, 13, 14, 15, 16, 19, 20, 22, 24, 25, 26, 28, 29], "pip": [0, 15], "salesforc": 0, "mai": [0, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16, 17, 20, 24, 25, 26, 28, 29, 30, 31], "sourc": [0, 16, 17], "clone": 0, "repo": [0, 20], "e": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 21, 24, 25, 26, 29, 30], "edit": [0, 3, 15, 16, 17], "mode": [0, 7, 15, 16, 17], "addit": [0, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 24, 28, 30], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 24, 26, 28, 30], "depend": [0, 9, 28], "via": [0, 12, 14, 20], "all": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 25, 26, 28, 29, 30, 31], "individu": [0, 4, 8, 13, 14, 15, 19, 20, 24, 25, 28], "plot": [0, 4, 5, 6, 9, 21, 22, 23, 24, 26, 28, 31], "interact": 0, "deep": [0, 4, 14], "learn": [0, 4, 9, 11], "To": [0, 3, 9, 23, 25, 28, 29, 30], "must": [0, 3, 4, 5, 6, 7, 9, 12, 13, 16, 17, 26, 28, 29, 31], "flag": [0, 16, 17], "don": [0, 16, 17, 19, 28], "t": [0, 2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 26, 28, 30, 31], "want": [0, 2, 4, 7, 9, 13, 14, 16, 19, 24, 26, 28, 29], "manual": [0, 3, 4, 10, 12, 25], "specifi": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 24, 26, 28, 29, 30], "root": [0, 2, 10, 15, 16, 17, 19], "directori": [0, 3, 8, 15, 16, 17, 19, 24, 28, 31], "everi": [0, 2, 3, 4, 7, 9, 13, 25, 28, 31], "when": [0, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 20, 24, 26, 28], "initi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 18, 20, 23, 26, 27, 31], "its": [0, 1, 2, 3, 4, 6, 9, 12, 14, 20, 23, 24, 25, 26, 27, 28, 29], "note": [0, 2, 3, 4, 5, 6, 8, 9, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 28, 29, 30, 31], "follow": [0, 1, 2, 3, 4, 5, 6, 9, 11, 13, 14, 15, 16, 19, 20, 24, 26, 28, 31], "extern": 0, "some": [0, 1, 2, 3, 4, 6, 8, 9, 11, 15, 19, 20, 24, 25, 26, 28, 30, 31], "our": [0, 2, 19, 20, 24, 26, 28, 30, 31], "openmp": 0, "If": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 26, 28, 31], "conda": 0, "pleas": [0, 9, 14, 15, 16, 17, 20], "c": [0, 2, 14, 16, 21, 22, 24, 26, 28, 31], "forg": 0, "lightgbm": [0, 9], "befor": [0, 2, 3, 4, 5, 6, 8, 9, 13, 14, 19, 24, 26, 30, 31], "ensur": [0, 1, 3, 6, 8, 9, 14, 28], "configur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 21, 24, 26, 28], "work": [0, 3, 4, 5, 7, 8, 9, 14, 19, 20, 24, 25, 26, 28, 29], "your": [0, 7, 9, 14, 19, 20, 26, 31], "environ": 0, "mac": 0, "homebrew": 0, "brew": 0, "libomp": 0, "so": [0, 4, 5, 6, 9, 14, 16, 20, 21, 24, 26, 28, 29, 30, 31], "libari": 0, "avail": [0, 11, 13, 16, 28], "relev": [0, 3, 4, 5, 6, 7, 9, 19, 30], "lgbmforecast": [0, 3, 9], "which": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31], "part": [0, 13, 14, 26, 31], "defaultforecast": [0, 1, 3, 27, 29], "have": [0, 1, 2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 20, 24, 28, 30, 31], "java": [0, 4], "kit": 0, "jdk": 0, "For": [0, 2, 3, 4, 7, 9, 11, 12, 13, 14, 15, 16, 17, 20, 24, 25, 26, 28, 29, 30, 31], "ubuntu": 0, "sudo": 0, "apt": 0, "openjdk": 0, "11": [0, 2, 16, 19, 20, 24, 26, 28, 30, 31], "o": [0, 14, 19, 20, 24, 28, 30], "tap": 0, "adoptopenjdk": 0, "cask": 0, "adoptopenjdk11": 0, "found": [0, 4, 10, 16, 17], "path": [0, 12, 19, 20, 24, 28, 30], "java_hom": 0, "variabl": [0, 1, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 19, 20, 26, 29, 30, 31], "set": [0, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 16, 17, 20, 21, 24, 25, 26, 28, 30, 31], "randomcutforest": [0, 4], "defaultdetector": [0, 1, 3, 23, 25], "we": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31], "recommend": [0, 4, 5, 9], "link": [0, 1], "tutori": [0, 1, 14, 15, 16, 17, 25, 29, 30], "after": [0, 2, 3, 4, 5, 8, 9, 13, 14, 16, 26], "should": [0, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 24, 26, 28, 30], "read": [0, 12, 14, 15, 26, 31], "more": [0, 1, 2, 3, 6, 8, 9, 10, 11, 13, 16, 17, 19, 20, 24, 26, 28, 30, 31], "detail": [0, 2, 3, 4, 8, 9, 14, 16, 24, 26, 28, 31], "about": [0, 5, 6, 9, 30, 31], "main": [0, 4, 29], "structur": [0, 24, 28], "repres": [0, 3, 4, 5, 7, 8, 9, 12, 14, 15, 16, 24, 28], "here": [0, 2, 3, 4, 6, 16, 19, 20, 21, 24, 25, 26, 28, 29, 30, 31], "subpackag": 0, "submodul": 0, "easi": [0, 30], "base": [0, 1, 5, 10, 14, 16, 17, 18, 20, 22, 26, 28, 29], "exampl": [0, 1, 3, 4, 7, 12, 13, 14, 16, 17, 19, 20, 21, 24, 28, 30], "code": [0, 4, 6, 14, 16, 21], "basic": [0, 11, 31], "advanc": [0, 19, 21], "index": [0, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 29, 30, 31], "search": [0, 1, 3], "page": 0, "support": [1, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 19, 26, 28, 30], "kei": [1, 2, 3, 4, 7, 13, 14, 15, 16, 22, 24, 28], "each": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 28, 29, 30, 31], "associ": [1, 5, 9, 13], "own": [1, 3, 6, 14], "A": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 18, 24, 25, 28, 29], "under": [1, 19, 24, 28], "singl": [1, 3, 5, 8, 9, 11, 12, 13, 14, 16, 17, 19, 24, 26, 28], "share": [1, 24, 28], "special": [1, 3, 4, 5, 24], "default": [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 18, 20, 23, 24, 26, 27, 30, 31], "ar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 25, 26, 28, 29, 30, 31], "good": [1, 7], "get": [1, 2, 6, 9, 13, 14, 15, 16, 17, 20, 24, 25, 26, 28, 29, 30, 31], "start": [1, 2, 5, 9, 11, 12, 13, 14, 15, 16, 17, 20, 24, 28, 30], "change_point": [1, 3, 4], "those": [1, 6, 8, 9, 14, 16, 17, 20, 28], "exogen": [1, 2, 3, 5, 6, 8, 9, 10, 18], "regressor": [1, 9, 18], "forecast_bas": [1, 3, 4, 24, 31], "adapt": [1, 6, 24, 31], "residu": [1, 4, 6, 31], "between": [1, 3, 4, 6, 9, 13, 14, 19, 20, 24, 31], "predict": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31], "true": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31], "valu": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "timestamp": [1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 26, 28, 30, 31], "autom": [1, 2, 8, 14, 16], "variou": [1, 3, 9, 10, 12, 14, 30], "spark": 1, "api": [1, 12, 14, 15, 20, 24, 25, 26, 28, 29, 30, 31], "integr": [1, 6, 9, 12], "pyspark": [1, 12], "distribut": [1, 4, 5, 6, 9, 11, 12, 13, 14], "comput": [1, 2, 4, 6, 7, 8, 9, 12, 13, 14, 24, 26, 27, 28, 31], "run": [1, 4, 10, 12, 18, 21, 22, 24, 28, 30], "infer": [1, 4, 12, 14, 18, 30], "parallel": [1, 3, 4, 10, 12], "transform": [1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 18, 24, 26, 28, 29, 30, 31], "analysi": [1, 16], "callabl": [1, 3, 8, 11, 13, 14], "object": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 20, 24, 28], "input": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 24, 25, 26, 28, 29, 31], "post_process": [1, 2, 4, 24, 25, 26, 31], "rule": [1, 2, 3, 4, 5, 6, 8, 9, 11, 14, 16, 18, 24, 31], "appli": [1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 14, 24, 26, 30], "output": [1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 24], "current": [1, 4, 5, 11, 12, 13, 16, 17, 30], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 24, 25, 26, 28, 31], "interpret": [1, 11, 24, 26], "z": [1, 4, 5, 6, 9, 11, 13, 24, 26, 31], "deviat": [1, 4, 5, 13, 25, 26], "normal": [1, 3, 4, 5, 11, 14, 22, 26, 31], "random": [1, 4, 9, 13, 14, 24], "": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "threshold": [1, 3, 4, 5, 6, 8, 9, 24, 25, 26, 31], "reduc": [1, 14, 24], "noisi": [1, 24], "an": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31], "filter": [1, 4, 5, 6, 11, 26, 31], "sequenc": [1, 2, 3, 4, 5, 6, 7, 9, 10, 14, 17, 22, 25, 26], "metric": [1, 2, 3, 4, 6, 8, 9, 11, 16, 20, 24, 25, 26, 28, 29, 31], "pipelin": [1, 28], "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 24, 25, 26, 28, 30, 31], "task": [1, 2, 6, 12, 30], "util": [1, 2, 3, 4, 5, 9, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "timeseri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 23, 24, 27, 28], "resampl": [1, 6, 8, 9, 20, 22, 28, 29, 30], "function": [1, 2, 3, 5, 6, 9, 10, 11, 12, 14], "bayesian": [1, 5, 7, 14], "conjug": [1, 5, 14], "prior": [1, 5, 6, 9, 14, 30], "reconcili": [1, 12, 14], "hierarch": [1, 12, 14], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 26, 28, 29, 30, 31], "time_seri": [1, 3, 4, 5, 6, 9, 11, 13, 15, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31], "univariatetimeseri": [1, 2, 4, 7, 9, 13, 14, 18, 31], "notabl": [1, 14], "transpar": [1, 14, 20, 24, 28], "inter": [1, 3, 5, 6, 9], "oper": [1, 4, 13, 24], "respect": [1, 19], "check": [1, 14], "how": [1, 4, 5, 8, 9, 12, 14, 17, 18, 19, 20, 21, 26, 30, 31], "doc": [1, 9, 14, 15, 20, 24, 26, 28, 31], "abov": [1, 2, 19, 24, 26, 28, 31], "full": [1, 3, 4, 6, 9, 14, 18, 24, 26, 28, 31], "list": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 19, 20, 31], "dbl": [1, 3], "windstat": [1, 3, 24, 25], "isolation_forest": [1, 3, 24], "random_cut_forest": [1, 3], "spectral_residu": [1, 3], "stat_threshold": [1, 3], "zm": [1, 3, 25], "autoencod": [1, 3], "vae": [1, 3], "dagmm": [1, 3], "lstm_ed": [1, 3], "deep_point_anomaly_detector": [1, 3], "bocpd": [1, 3, 4], "arima": [1, 3, 4, 10, 28, 29], "sarima": [1, 3, 4, 7, 10, 21, 31], "et": [1, 3, 4, 7, 12, 14], "prophet": [1, 3, 4, 7, 22, 24, 28, 30], "lstm": [1, 3, 4], "mse": [1, 2, 3, 4, 8, 9, 28], "sklearn_bas": [1, 3], "smoother": [1, 3, 6, 28], "vector_ar": [1, 3], "tree": [1, 3, 4, 14, 17], "combin": [1, 3, 4, 7, 24, 25, 26, 28, 29], "season": [1, 2, 3, 4, 6, 9, 10, 16, 19, 21, 22, 24, 28], "autoet": [1, 3, 19], "autoprophet": [1, 3], "autosarima": [1, 3, 18], "rolling_window_dataset": [1, 3], "autosarima_util": [1, 3], "defaultdetectorconfig": [1, 3, 23], "config_class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 31], "granular": [1, 3, 6, 9, 13, 14, 17, 28, 29], "reset": [1, 3, 4, 8, 28], "defaultforecasterconfig": [1, 3, 27], "factori": [1, 8, 24, 25, 28, 29], "modelfactori": [1, 3, 24, 25, 28, 29], "get_model_class": [1, 3], "creat": [1, 3, 4, 7, 8, 11, 13, 14, 19, 20, 24, 25, 26, 28, 29, 31], "load_byt": [1, 3], "instantiate_or_copy_model": [1, 3], "config": [1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 22, 24, 25, 28, 29, 30], "filenam": [1, 3, 15, 16, 17], "dim": [1, 3, 4, 10, 14, 24, 25, 28, 29, 31], "to_dict": [1, 2, 3, 4, 8, 11, 13, 14], "from_dict": [1, 3, 4, 8, 11, 13, 14], "get_unused_kwarg": [1, 3], "normalizingconfig": [1, 3, 4], "full_transform": [1, 3, 4], "modelbas": [1, 2, 3, 4, 7, 8, 9], "train_data": [1, 3, 4, 5, 6, 7, 8, 9, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31], "base_model": [1, 3], "require_even_sampl": [1, 3, 4, 5, 7, 8, 9, 26, 31], "require_univari": [1, 3, 4, 5, 7, 8, 9, 26], "auto_align": [1, 3], "timedelta": [1, 3, 4, 13, 14, 28], "last_train_tim": [1, 3, 4, 5], "train_pre_process": [1, 3, 4, 5, 8, 9], "transform_time_seri": [1, 3], "train_post_process": [1, 3, 4, 6, 9], "save": [1, 3, 4, 8, 9, 12, 18, 19], "to_byt": [1, 3, 8], "from_byt": [1, 3], "multipletimeseriesmodelmixin": [1, 3, 4], "train_multipl": [1, 3, 4], "layeredmodelconfig": [1, 3, 7], "layeredmodel": [1, 3, 7, 8], "layereddetector": [1, 3], "get_anomaly_scor": [1, 3, 4, 5, 6, 24, 26, 31], "layeredforecast": [1, 3], "layeredforecastingdetector": [1, 3], "tsid_col_nam": [1, 12], "read_dataset": [1, 12], "write_dataset": [1, 12], "create_hier_dataset": [1, 12], "add_tsid_column": [1, 12], "pandas_udf": 1, "transformbas": [1, 3, 4, 6, 8, 9, 13], "_invert": [1, 13], "proper_invers": [1, 13], "requires_inversion_st": [1, 13], "identity_invers": [1, 13], "invert": [1, 3, 5, 6, 8, 9, 13, 22], "invertibletransformbas": [1, 13], "ident": [1, 13, 24, 25, 28, 29, 30], "bound": [1, 2], "lowerupperclip": [1, 13], "transformfactori": [1, 13], "get_transform_class": [1, 13], "moving_averag": [1, 22, 24], "movingaverag": [1, 13, 22], "movingpercentil": [1, 13], "exponentialmovingaverag": [1, 13, 14], "differencetransform": [1, 13, 22, 24], "lagtransform": [1, 13], "compute_lag": [1, 13], "absval": [1, 13], "rescal": [1, 3, 13], "is_train": [1, 13], "meanvarnorm": [1, 13, 22, 26, 31], "minmaxnorm": [1, 13, 22], "boxcoxtransform": [1, 13], "temporalresampl": [1, 13, 22, 28, 29], "aggregation_polici": [1, 13, 14, 28], "missing_value_polici": [1, 13, 14, 28], "shingl": [1, 4, 13, 24], "transformsequ": [1, 3, 13, 22, 24], "append": [1, 12, 13], "transformstack": [1, 13], "anom": [1, 4, 6], "natural_bound": [1, 13], "random_is_anom": [1, 13], "shock": [1, 13, 16], "anom_width_rang": [1, 13], "sd_rang": [1, 13], "random_sd_unit": [1, 13], "random_anom_width": [1, 13], "levelshift": [1, 4, 5, 13], "trendchang": [1, 4, 5, 13], "scale_rang": [1, 13], "random_scal": [1, 13], "postrulebas": [1, 11], "postrulefactori": [1, 11], "get_post_rule_class": [1, 11], "postrulesequ": [1, 11], "anomscorecalibr": [1, 4, 11, 24], "anchor": [1, 6, 9, 11, 24], "tsadmetr": [1, 2, 8, 11, 23, 24, 25, 26, 31], "to_simple_threshold": [1, 11], "aggregatealarm": [1, 11, 24, 25, 26, 31], "threshold_class": [1, 11], "alm_threshold": [1, 11, 24, 25, 26, 31], "abs_scor": [1, 8, 11, 24, 28], "window_sec": [1, 11], "suppress_sec": [1, 11], "get_adaptive_thr": [1, 11], "adaptivethreshold": [1, 11], "adaptiveaggregatealarm": [1, 11], "bin_sz": [1, 11], "default_hist_gap_thr": [1, 11], "evaluatorconfig": [1, 2], "cadenc": [1, 2, 25, 28, 29], "horizon": [1, 2, 6, 9, 28, 29], "evaluatorbas": [1, 2], "train_window": [1, 2, 4, 24, 28], "retrain_freq": [1, 2, 19, 24, 25, 28, 29], "default_train_kwarg": [1, 2], "default_retrain_kwarg": [1, 2], "get_predict": [1, 2, 24, 25, 28, 29], "scoretyp": [1, 2, 11], "pointwis": [1, 2, 11], "pointadjust": [1, 2, 11], "revisedpointadjust": [1, 2, 11], "tsadscoreaccumul": [1, 2, 11], "precis": [1, 2, 4, 5, 11, 23, 24, 25, 26, 28], "recal": [1, 2, 5, 11, 23, 24, 25, 26], "f1": [1, 2, 11, 23, 24, 25, 26], "f_beta": [1, 2, 11], "mean_time_to_detect": [1, 2, 11], "mean_detected_anomaly_dur": [1, 2], "mean_anomaly_dur": [1, 2], "nab_scor": [1, 2, 11], "accumulate_tsad_scor": [1, 2, 11], "meantimetodetect": [1, 2, 11, 23, 24, 25], "pointwisef1": [1, 2, 11], "pointwiseprecis": [1, 2, 11], "pointwiserecal": [1, 2, 11], "pointadjustedf1": [1, 2, 11, 25], "pointadjustedprecis": [1, 2, 11, 25], "pointadjustedrecal": [1, 2, 11, 25], "nabscor": [1, 2, 11], "nabscorelowfn": [1, 2, 11], "nabscorelowfp": [1, 2, 11], "f2": [1, 2, 11], "f5": [1, 2, 11], "tsadevaluatorconfig": [1, 2, 24, 25], "tsadevalu": [1, 2, 24, 25], "max_early_sec": [1, 2, 11], "max_delay_sec": [1, 2, 11], "forecastscoreaccumul": [1, 2], "check_before_ev": [1, 2], "mae": [1, 2], "marr": [1, 2], "rmse": [1, 2, 28, 29], "smape": [1, 2, 21, 22, 27, 28, 29, 30, 31], "rmspe": [1, 2], "mase": [1, 2], "msi": [1, 2, 27], "accumulate_forecast_scor": [1, 2], "forecastmetr": [1, 2, 8, 21, 22, 27, 28, 29, 30, 31], "forecastevaluatorconfig": [1, 2, 28, 29], "forecastevalu": [1, 2, 28, 29], "__getitem__": [1, 14, 15, 16], "__iter__": [1, 14, 15, 16], "np_time_stamp": [1, 14], "np_valu": [1, 14], "time_stamp": [1, 3, 4, 5, 6, 8, 9, 12, 14, 20, 22, 27, 28, 29, 30, 31], "t0": [1, 4, 14, 20], "tf": [1, 4, 14, 20], "is_empti": [1, 14], "copi": [1, 14, 20], "concat": [1, 14, 31], "bisect": [1, 14, 20], "window": [1, 4, 9, 10, 11, 13, 14, 16, 20, 24, 25, 29, 30], "to_pd": [1, 14, 20, 22, 24, 26, 27, 30, 31], "from_pd": [1, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "to_t": [1, 14], "empti": [1, 14], "name": [1, 2, 3, 7, 8, 9, 11, 12, 13, 14, 16, 17, 19, 20, 22, 24, 25, 28, 31], "item": [1, 11, 12, 14, 20, 30, 31], "renam": [1, 14], "is_align": [1, 14, 20], "squeez": [1, 14], "shape": [1, 10, 14, 20], "to_csv": [1, 14], "from_ts_list": [1, 14], "align": [1, 3, 4, 6, 9, 13, 14, 18, 22, 31], "assert_equal_timedelta": [1, 14], "alignpolici": [1, 14], "outerjoin": [1, 14], "innerjoin": [1, 14], "fixedrefer": [1, 14], "fixedgranular": [1, 14], "aggregationpolici": [1, 6, 8, 9, 13, 14, 30], "mean": [1, 2, 3, 4, 6, 8, 9, 13, 14, 19, 21, 23, 24, 25, 26, 28, 29, 30, 31], "sum": [1, 12, 14, 24], "median": [1, 8, 14], "first": [1, 4, 9, 12, 13, 14, 16, 17, 19, 20, 23, 24, 26, 28, 30, 31], "last": [1, 3, 4, 5, 6, 9, 12, 14, 28], "min": [1, 4, 7, 9, 14], "max": [1, 3, 4, 6, 7, 8, 9, 14, 22, 25], "missingvaluepolici": [1, 6, 8, 9, 13, 14, 30], "ffill": [1, 14], "bfill": [1, 14], "nearest": [1, 14], "interpol": [1, 13, 14, 28], "zfill": [1, 6, 8, 9, 14, 30], "to_pd_datetim": [1, 14, 31], "to_timestamp": [1, 14], "granularity_str_to_second": [1, 14], "get_gcd_timedelta": [1, 14], "infer_granular": [1, 14], "reindex_df": [1, 14], "data_io": 1, "df_to_time_seri": [1, 14], "data_io_decor": [1, 14], "csv_to_time_seri": [1, 14], "ht": [1, 12], "mint_reconcili": [1, 12, 14], "ts_gener": 1, "timeseriesgener": [1, 14], "n": [1, 2, 4, 6, 7, 9, 12, 13, 14, 20, 22, 23], "x0": [1, 14], "step": [1, 2, 3, 4, 5, 6, 8, 9, 10, 13, 14, 26, 29, 31], "y": [1, 2, 10, 11, 13, 14, 28, 30, 31], "gener": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 20, 24, 26, 28], "generatorcompos": [1, 14], "generatorconcaten": [1, 14], "conj_prior": [1, 5], "conjprior": [1, 5, 14], "get_time_series_valu": [1, 14], "process_time_seri": [1, 14], "posterior": [1, 5, 6, 9, 14], "updat": [1, 4, 5, 6, 9, 14], "scalarconjprior": [1, 14], "betabernoulli": [1, 14], "theta_posterior": [1, 14], "norminvgamma": [1, 14], "mu_posterior": [1, 14], "sigma2_posterior": [1, 14], "mvnorminvwishart": [1, 5, 14], "sigma_posterior": [1, 14], "bayesianlinreg": [1, 14], "posterior_explicit": [1, 14], "bayesianmvlinreg": [1, 5, 14], "istat": 1, "add": [1, 4, 6, 7, 9, 12, 14, 19, 26, 30, 31], "drop": [1, 4, 14], "add_batch": [1, 14], "drop_batch": [1, 14], "varianc": [1, 3, 4, 7, 13, 14, 26, 31], "mean_class": [1, 14], "true_valu": [1, 14], "corrected_valu": [1, 14], "sd": [1, 14], "se": [1, 14], "recency_weight": [1, 6, 9, 14, 28], "recencyweightedvari": [1, 14], "plot_anom": [1, 23, 24, 26], "ax": [1, 4, 6, 9, 21, 22, 23, 24, 26, 27, 28, 31], "anomaly_label": [1, 2, 3, 4, 6, 11, 23, 24, 26], "pink": 1, "matplotlib": [1, 4, 6, 9, 21, 22, 23, 24, 26, 27, 28, 31], "plot_anoms_plotli": 1, "fig": [1, 4, 6, 9, 21, 22, 23, 24, 26, 27, 28, 31], "plotli": [1, 4, 6, 9], "figur": [1, 4, 5, 6, 9, 21, 22, 24, 26, 28, 31], "none": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 22, 24, 26, 28, 29, 31], "yhat": 1, "yhat_lb": 1, "yhat_ub": 1, "y_prev": 1, "yhat_prev": 1, "yhat_prev_lb": 1, "yhat_prev_ub": 1, "yhat_color": 1, "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 21, 26, 30], "lower": [1, 2, 5, 9, 11, 13, 24, 27], "uncertainti": [1, 5, 6, 9, 14, 28, 31], "estim": [1, 4, 5, 6, 9, 10, 14, 28, 31], "upper": [1, 2, 13], "portion": [1, 13, 14, 20], "preced": [1, 3, 4, 5, 6, 9, 13], "str": [1, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17], "color": [1, 4, 6], "properti": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 26, 31], "being": [1, 2, 3, 5, 6, 7, 9, 12, 16, 20], "final": [1, 3, 4, 9, 14, 16, 23, 26, 27], "t_split": 1, "split": [1, 9, 13, 14, 15, 16, 21, 23, 24, 26, 27, 28, 30, 31], "test": [1, 2, 10, 12, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31], "get_i": 1, "actual": [1, 2, 3, 4, 7, 8, 9, 13, 14, 19, 20, 21, 26, 28, 29, 30, 31], "get_yhat": 1, "get_yhat_iqr": 1, "iqr": [1, 3, 9], "titl": 1, "metric_nam": [1, 24, 28], "figsiz": [1, 4, 6, 9, 21, 22, 24, 26, 28, 31], "1000": [1, 4, 5, 6, 8, 9, 20, 24], "600": [1, 4, 6, 9, 19], "label_alia": 1, "axi": [1, 6, 9, 14], "size": [1, 4, 6, 7, 9, 10, 11, 13, 14, 16, 24], "pixel": [1, 4, 6, 9], "dict": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 24, 26, 29], "map": [1, 4, 7, 9, 11, 13, 14], "entiti": 1, "y_hat": 1, "label": [1, 2, 3, 4, 6, 8, 10, 11, 13, 15, 16, 17, 22, 24, 25, 26, 31], "plot_plotli": 1, "mtsfigur": 1, "param": [1, 3, 4, 9, 13, 14, 21, 26], "perform": [2, 3, 4, 6, 7, 9, 11, 12, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 31], "differ": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 26, 28, 29], "abstract": [2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 26, 31], "defin": [2, 3, 4, 9, 12, 13, 16, 18, 21, 26], "float": [2, 4, 5, 6, 7, 8, 9, 11, 13, 14], "maximum": [2, 4, 5, 6, 7, 8, 9, 11, 16, 24, 25, 28, 29], "durat": [2, 4], "would": [2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 24, 26, 30], "like": [2, 3, 4, 5, 6, 8, 9, 10, 12, 14, 19, 20, 24, 25, 26, 28, 29, 30], "limit": 2, "frequenc": [2, 3, 4, 5, 7, 8, 9, 14], "onli": [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 19, 20, 21, 25, 26, 28, 30, 31], "onc": [2, 3, 4, 11, 24, 29], "obtain": [2, 4, 9, 12, 14, 20, 23, 24, 25, 27, 28, 29, 31], "new": [2, 4, 7, 9, 11, 14, 16, 18, 20, 24, 28], "same": [2, 3, 4, 6, 8, 9, 13, 14, 15, 16, 19, 20, 24, 25, 28, 30], "alert": [2, 24, 26], "condit": [2, 30], "0": [2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "interv": [2, 6, 9, 13, 14, 16, 21, 24, 27, 28], "number": [2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 19, 24, 28, 30], "second": [2, 11, 14, 16, 19, 20, 28], "produc": [2, 4, 9, 12, 13, 14, 24, 28], "retrain": [2, 24, 25, 28], "explicitli": [2, 7, 13, 16, 21, 24], "futur": [2, 9, 10, 13, 28, 29, 30], "equal": [2, 9, 13, 14, 16, 20, 26, 31], "histor": [2, 4, 9, 24, 28], "method": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 24, 26, 28, 31], "were": [2, 3, 11, 24], "increment": [2, 9, 14], "manner": [2, 24, 25, 29], "describ": [2, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16], "subclass": [2, 3, 8, 13], "slightli": 2, "protocol": [2, 24], "g": [2, 3, 4, 6, 7, 8, 9, 14, 15, 16, 17, 21, 24, 25, 29], "v": [2, 4, 31], "alia": [2, 3, 4, 5, 6, 7, 8, 9, 11, 14], "type": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 24, 25, 28, 29, 31], "train_val": [2, 24, 25, 28, 29], "test_val": [2, 24, 25, 28, 29], "exog_data": [2, 3, 5, 6, 7, 8, 9, 10, 30], "train_kwarg": [2, 24], "retrain_kwarg": [2, 24], "appropri": [2, 13, 14, 24, 26, 29, 31], "where": [2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 24, 26, 28, 30], "compar": [2, 4, 6, 11, 24, 28], "ground": [2, 6, 11, 24, 28, 31], "truth": [2, 6, 11, 21, 24, 28, 31], "keyword": [2, 3, 4, 7, 8, 11, 13, 16, 17, 28], "argument": [2, 3, 4, 7, 8, 11, 13, 16, 17, 20, 26, 28, 30], "subsequ": 2, "tupl": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 20, 31], "union": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 20], "train_result": [2, 3, 4, 6, 7, 9, 25, 29], "result": [2, 3, 4, 6, 7, 9, 11, 13, 16, 26, 28], "pretrain": 2, "ground_truth": [2, 11, 21, 23, 24, 25, 26, 27, 28, 29, 31], "given": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 20, 31], "accumul": 2, "enum": [2, 4, 5, 7, 11, 14, 24, 28], "algorithm": [2, 4, 5, 7, 9, 14, 16, 24, 25, 26, 28, 29], "fals": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 26, 28, 30, 31], "posit": [2, 4, 9, 13, 23, 24], "neg": [2, 4, 23], "see": [2, 3, 4, 9, 14, 16, 24, 26, 28, 30, 31], "technic": [2, 24], "report": [2, 24, 26], "prefer": 2, "revis": [2, 24], "adjust": [2, 7, 9, 13, 14, 24], "1": [2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "2": [2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "num_tp_anom": 2, "num_tp_pointwis": 2, "num_tp_point_adj": 2, "num_fn_anom": 2, "num_fn_pointwis": 2, "num_fn_point_adj": 2, "num_fp": 2, "num_tn": 2, "tp_score": 2, "fp_score": 2, "tp_detection_delai": 2, "tp_anom_dur": 2, "anom_dur": 2, "maintain": [2, 4], "summari": 2, "statist": [2, 4, 7, 9, 10, 14], "score_typ": [2, 11], "beta": [2, 11, 13, 14], "tp_weight": 2, "fp_weight": [2, 11], "fn_weight": [2, 11], "tn_weight": 2, "nab": [2, 15, 16, 23, 24, 26], "weight": [2, 4, 6, 8, 9, 12, 13, 14, 22], "error": [2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 20, 27, 28, 29, 31], "section": [2, 16, 19], "ii": 2, "http": [2, 4, 6, 9, 10, 16, 17], "arxiv": 2, "org": 2, "pdf": [2, 12, 14], "1510": 2, "03336": 2, "At": [2, 5, 13, 24, 28], "high": [2, 4, 5, 7, 13, 24], "level": [2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 16, 21], "cost": [2, 5, 24], "sensit": 2, "recenc": [2, 6, 9, 13, 14], "accuraci": [2, 5, 9], "measur": [2, 4, 27], "profil": 2, "github": [2, 4, 16, 17], "com": [2, 4, 6, 9, 10, 16, 17], "numenta": [2, 15, 16, 23], "blob": 2, "master": [2, 17], "json": [2, 3, 13, 24, 28], "reward": 2, "low": [2, 10, 24], "rate": [2, 4, 6, 9, 20, 30], "22": [2, 11, 20, 24, 25, 28, 30, 31], "ignor": [2, 5, 14, 16], "rel": [2, 4, 9, 13, 14, 24], "complet": [2, 24, 25, 26, 31], "compon": [2, 6, 7, 9, 10], "requir": [2, 3, 4, 6, 8, 9, 10, 13, 14, 16, 17, 20, 28], "indic": [2, 3, 4, 6, 7, 9, 13, 15, 16, 17, 19, 21, 28, 29], "whether": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 25, 28, 29, 30], "correspond": [2, 4, 5, 6, 9, 12, 14, 24, 28], "nonzero": [2, 24, 26], "amount": [2, 5, 13, 24, 28], "allow": [2, 3, 4, 5, 6, 7, 9, 10, 11, 16, 24, 28, 29], "occur": [2, 4, 5, 9, 14, 24], "incid": 2, "earli": [2, 16], "end": [2, 4, 6, 9, 13, 14], "dure": [2, 4, 9, 15], "becaus": [2, 4, 5, 6, 7, 9, 13, 14, 20, 21], "permit": [2, 16], "exactli": [2, 5, 6, 9, 13, 22], "take": [2, 4, 7, 8, 9, 13, 14, 20, 25, 28, 30, 31], "enumer": [2, 4, 7, 11], "partial": [2, 11, 14, 18], "form": [2, 3, 11, 14], "f": [2, 4, 11, 14, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "kwarg": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 24, 26, 29, 31], "functool": [2, 11, 14], "5": [2, 4, 6, 9, 11, 13, 14, 16, 17, 19, 20, 21, 22, 24, 26, 28, 29, 30, 31], "than": [2, 4, 5, 8, 11, 13, 19, 20, 25, 26], "count": 2, "real": [2, 14, 16, 28, 30], "while": [2, 3, 4, 6, 9, 12, 13, 14, 16, 24, 25, 27], "desir": [2, 4, 6, 9, 13, 14, 16, 17, 31], "typic": [2, 24, 28], "well": [2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 20, 24, 26, 28, 29, 31], "post_rule_train_config": [2, 3, 4, 6, 24], "custom": [2, 7, 15, 16, 17, 18, 30], "suppli": [2, 3, 4, 6, 13, 14, 28], "wish": [2, 3, 4, 5, 6, 7, 9, 12, 14, 19, 26, 30], "otherwis": [2, 3, 4, 5, 6, 9, 10, 11, 13, 14, 31], "continu": [2, 4, 26, 28], "sens": 2, "insampl": [2, 27], "period": [2, 4, 7, 10, 13, 21], "ub": [2, 3, 9, 27], "lb": [2, 3, 9, 27], "target_seq_index": [2, 3, 4, 5, 6, 8, 9, 10, 24, 28, 29, 30, 31], "m": [2, 10, 12, 13, 14, 20], "non": [2, 3, 7, 11, 12, 13, 14, 16, 17], "wherea": 2, "95": [2, 11, 13, 27], "target": [2, 4, 5, 7, 8, 9, 12, 19, 29, 30], "absolut": [2, 4, 8, 11, 13], "hat": [2, 6, 9, 14, 28, 31], "length": [2, 4, 6, 7, 9, 13, 14, 20, 21], "frac": [2, 4, 7, 13, 14, 24, 28, 31], "sum_": [2, 6, 9, 14, 28, 31], "y_t": [2, 13, 28, 31], "_t": [2, 13, 28, 31], "rang": [2, 3, 5, 6, 9, 10, 13, 14, 16], "100": [2, 4, 6, 7, 9, 13, 17, 19, 21, 22, 24, 25, 27, 28, 29, 31], "cdot": [2, 6, 9, 13, 14], "left": [2, 4, 13, 14, 20], "max_t": 2, "min_t": 2, "right": [2, 4, 14, 20], "squar": 2, "sqrt": [2, 14], "symmetr": [2, 28, 31], "percentag": 2, "200": [2, 19, 28, 31], "percent": [2, 31], "scale": [2, 4, 6, 9, 13, 14, 27, 28], "In": [2, 4, 10, 11, 13, 16, 17, 19, 20, 24, 26, 28, 30], "sampl": [2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 20, 26, 28, 29, 31], "x": [2, 4, 6, 9, 10, 11, 13, 14, 20, 24, 26, 30, 31], "x_t": [2, 4, 6, 9, 14], "x_": [2, 6, 9, 13, 14], "qualiti": [2, 24, 27, 28, 30], "l": [2, 7, 13, 21, 22, 24, 26, 28, 31], "u": [2, 13, 14, 28], "u_t": 2, "l_t": 2, "origin": [2, 3, 5, 8, 9, 10, 12, 13, 14, 16, 20, 22, 28], "formul": [2, 6, 9], "whenev": [2, 15], "make": [2, 5, 6, 7, 8, 9, 11, 16, 19, 20, 28], "broadli": 3, "contain": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 30], "distinct": 3, "subset": [3, 4, 9, 14, 15, 16, 17, 20, 22, 23, 24, 26, 27, 28, 31], "modelclass": [3, 24, 28], "inherit": [3, 4, 5, 6, 9, 13, 20, 26, 31], "potenti": [3, 4, 9, 13, 29], "trainabl": [3, 4, 9, 13], "refer": [3, 4, 6, 9, 14, 16, 20, 21, 22], "dirnam": [3, 8, 24, 28], "save_config": [3, 8], "binari": [3, 14, 24, 28], "pkl": 3, "disk": 3, "heavili": [3, 9], "exploit": 3, "fact": [3, 14, 23], "serializ": 3, "instanc": [3, 6, 20], "file": [3, 10, 12, 14, 16, 17, 19, 24, 28, 31], "overrid": [3, 4, 7, 13, 14, 16, 22, 24, 26, 28, 31], "remain": [3, 12], "fulli": 3, "user": [3, 4, 7, 9, 11, 13, 14, 16, 20, 21, 23, 24, 26, 28], "who": 3, "aren": [3, 20], "familiar": 3, "conveni": 3, "instanti": [3, 4, 13], "directli": [3, 7, 9, 14, 16, 20, 24, 28], "workflow": [3, 10], "import": [3, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "windstatsconfig": [3, 4, 24], "kind": [3, 5], "equival": [3, 6, 9, 13, 14], "wai": [3, 7, 13, 14, 15, 16, 20, 24, 25, 28], "model1a": 3, "wind_sz": [3, 4, 24], "60": [3, 11, 13, 14, 19, 24, 26, 28], "model1b": 3, "tmp": 3, "model2a": 3, "model2b": 3, "balanc": [3, 23, 27], "speed": [3, 7, 21], "n_thread": 3, "model_kwarg": [3, 7], "wrap": [3, 7, 14, 30], "5min": [3, 14, 16], "1h": [3, 4, 14, 28], "1d": [3, 10, 29], "etc": [3, 4, 15, 16, 19], "int": [3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 31], "thread": [3, 4, 9], "underli": [3, 5, 6, 7, 9, 24, 28], "Will": [3, 7], "other": [3, 7, 9, 13, 14, 24, 26, 28, 31], "try": [3, 7, 16, 17, 20, 26, 31], "pass": [3, 7, 10, 13, 20, 28], "howev": [3, 7, 16, 19, 20, 24, 25, 28, 30], "thei": [3, 4, 5, 6, 7, 9, 11, 14, 16, 20, 24, 30], "either": [3, 5, 6, 7, 9, 13, 14, 15, 16, 19, 20, 25], "effici": [3, 10, 23, 27], "intern": [3, 4, 5, 7, 8, 9, 10], "state": [3, 4, 5, 6, 8, 9, 13, 24, 28], "train_config": [3, 4, 6, 7, 8, 9, 21, 26, 31], "detector": [3, 4, 5, 6, 8, 9, 18], "unsupervis": [3, 4, 6, 24], "supervis": [3, 4, 6], "anomal": [3, 4, 6, 13, 16, 19, 24], "max_forecast_step": [3, 5, 6, 8, 9, 24, 28, 29, 31], "amongst": [3, 5, 6, 8, 9, 10], "whose": [3, 4, 5, 6, 8, 9, 10, 11, 12, 19, 26, 30, 31], "stamp": [3, 4, 9, 13, 14, 20, 28], "known": [3, 5, 6, 9, 10, 13], "priori": [3, 5, 6, 9, 10, 30], "independ": [3, 5, 6, 9, 14, 20], "forecasterexogbas": [3, 5, 6, 8, 9], "format": [3, 9, 10, 12, 16, 17, 18, 28], "forecasterbas": [3, 6, 7, 8, 9, 12, 22, 31], "classmethod": [3, 4, 8, 11, 13, 14], "return_unused_kwarg": [3, 4], "model_path": [3, 24, 28], "obj": [3, 14], "_skipped_kei": [3, 4, 8], "config_dict": [3, 4], "construct": [3, 4, 12], "dictionari": [3, 4, 9, 12, 14, 20], "unus": [3, 4], "arg": [3, 4], "dimens": [3, 4, 6, 9, 10, 14], "handl": [3, 4, 6, 8, 9, 10, 12, 14, 20], "case": [3, 4, 10, 12, 13, 15, 16, 17, 19, 21, 24, 26, 28, 29, 30], "lag": [3, 4, 5, 6, 7, 9, 10, 13], "itself": [3, 8, 14, 26, 28, 31], "bool": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 26], "assum": [3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 17, 19, 26, 28, 31], "fix": [3, 4, 5, 7, 8, 9], "give": [3, 6, 9, 13, 14, 24], "gap": [3, 11, 14], "dateoffset": 3, "wa": [3, 4, 5, 6, 7, 9, 16, 20, 28], "common": [3, 5, 8, 9], "most": [3, 4, 5, 8, 9, 14, 17, 20, 24, 26, 28, 31], "necessari": [3, 5, 8, 9, 14, 26, 31], "been": [3, 4, 5, 8, 9, 11], "time_series_prev": [3, 4, 5, 6, 8, 9, 24, 26, 28, 31], "context": [3, 4, 9, 28], "immedi": [3, 4, 5, 6, 9], "convert": [3, 4, 6, 7, 8, 9, 13, 14, 20, 28], "entir": [3, 5, 8, 12, 24, 28], "byte": [3, 8], "mixin": [3, 4, 7], "multiple_train_data": [3, 4], "act": [3, 7, 20], "wrapper": [3, 4, 7, 9, 14, 16, 17, 20], "around": [3, 4, 6, 7, 9, 14, 20, 24], "anoth": [3, 14], "often": 3, "basi": 3, "document": [3, 4, 8, 9, 14], "heart": 3, "store": [3, 4, 12, 15, 16, 17, 19, 24, 28, 30, 31], "retain": [3, 4, 11, 13, 20, 24], "attribut": 3, "do": [3, 4, 5, 7, 8, 9, 12, 13, 14, 19, 20, 24, 28, 31], "becom": [3, 14], "de": 3, "synchron": 3, "model_config": 3, "separ": [3, 6, 8, 9, 16], "overal": [3, 4, 6, 9], "hierarchi": [3, 12, 14], "access": [3, 4, 14, 20], "set_season": [3, 7, 9], "resolv": 3, "seasonalitymodel": [3, 7, 9], "automat": [3, 4, 5, 6, 7, 8, 9, 12, 19, 20, 21, 25, 26, 28, 29], "similarli": [3, 29], "detectorbas": [3, 4, 6, 8, 12, 26], "forecastingdetectorbas": [3, 4, 5, 6, 31], "overridden": [3, 7, 19], "top": 3, "doe": [3, 13, 14, 24], "duplic": [3, 23, 24, 26], "instead": [3, 4, 7, 10, 11, 14, 20, 24, 26, 30], "As": [3, 19, 26], "hold": 3, "detectorconfig": [3, 4, 6, 8, 26, 31], "compos": [3, 11, 13, 14], "self": [3, 9, 13, 14, 26, 31], "invert_transform": [3, 5, 6, 8, 9, 22], "return_iqr": [3, 9], "quartil": [3, 5, 6, 9], "bar": [3, 9, 12, 14, 28], "return_prev": [3, 9, 31], "stderr": [3, 6, 9, 14, 28, 29], "25th": [3, 9], "percentil": [3, 9, 11, 13], "75th": [3, 9], "detectorclass": 4, "post_rul": [4, 11, 26], "stage": 4, "boolean": 4, "enable_calibr": [4, 5, 6, 8, 9, 24], "enable_threshold": [4, 5, 6, 8, 9, 24], "enabl": [4, 5, 6, 8, 9], "recent": [4, 9, 24, 26, 28, 31], "get_anomaly_label": [4, 6, 23, 24, 25, 26], "though": [4, 19, 28, 30], "modifi": [4, 24], "extra": [4, 9], "lstmdetector": [4, 6], "Not": [4, 5, 6, 9, 12, 16, 17], "forecast_to_anom_scor": [4, 6], "get_figur": [4, 5, 6, 9], "plot_anomali": [4, 5, 6, 23, 24, 26, 31], "plot_anomaly_plotli": [4, 6], "plot_forecast": [4, 5, 6, 9, 21, 27, 28, 31], "plot_forecast_plotli": [4, 6, 9], "arimadetectorconfig": [4, 6], "arimadetector": [4, 6], "sarimadetectorconfig": [4, 6], "sarimadetector": [4, 6], "etsdetectorconfig": [4, 6], "etsdetector": [4, 6], "prophetdetectorconfig": [4, 6, 24], "prophetdetector": [4, 6, 24], "lstmdetectorconfig": [4, 6], "msesdetectorconfig": [4, 6], "msesdetector": [4, 6], "online_upd": [4, 6], "changekind": [4, 5], "auto": [4, 5, 6, 9, 21, 22, 24, 28], "bocpdconfig": [4, 5], "change_kind": [4, 5], "n_seen": [4, 5], "cp_prior": [4, 5], "min_likelihood": [4, 5], "max_scor": [4, 5, 6, 8, 9, 11, 24], "possibl": [4, 5, 6, 7, 8, 9, 10, 11, 13, 20], "uncalibr": [4, 5, 6, 8, 9, 11], "raw": [4, 6, 9, 11, 17, 24, 26], "nocalibrationdetectorconfig": [4, 5, 6], "never": [4, 29], "filter_scor": [4, 5, 6, 24, 26, 31], "plot_time_series_prev": [4, 5, 6, 9, 24, 28, 31], "fit": [4, 5, 6, 7, 9, 21], "might": [4, 7, 9], "onto": 4, "line": [4, 6, 21, 24, 26, 28, 31], "graph": [4, 6], "overlaid": [4, 6], "multipletimeseriesdetectormixin": 4, "element": [4, 9, 14, 16], "dynam": 4, "baselin": 4, "daili": [4, 6, 9, 17], "weekli": [4, 6, 9, 17, 24, 28, 30], "monthli": [4, 17], "trend": [4, 5, 6, 7, 9, 13, 16], "dynamicbaselineconfig": 4, "fixed_period": 4, "dynamicbaselin": 4, "datapoint": [4, 9, 13], "inclus": [4, 13, 14], "string": [4, 6, 9, 14, 19], "serv": 4, "scope": 4, "roll": [4, 10], "minut": [4, 11, 24], "bucket": 4, "dai": [4, 6, 9, 20, 23, 24, 25, 26, 29, 30], "determine_train_window": 4, "week": [4, 6, 9, 16, 24, 25, 28], "month": [4, 20], "exclus": 4, "within": [4, 11, 13, 19, 28], "has_fixed_period": 4, "get_relev": 4, "get_baselin": 4, "new_data": [4, 9], "get_baseline_figur": 4, "jitter_time_stamp": 4, "3": [4, 6, 7, 9, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "segment": 4, "manag": 4, "belong": [4, 14], "day_delta": 4, "00": [4, 14, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31], "hour_delta": 4, "01": [4, 5, 10, 13, 19, 20, 24, 25, 29, 30, 31], "min_delta": 4, "zero_delta": 4, "wind_delta": 4, "window_kei": 4, "weekday_kei": 4, "day_kei": 4, "segment_kei": 4, "30": [4, 13, 14, 20, 22, 23, 24, 26, 31], "max_dai": [4, 24], "4": [4, 6, 7, 9, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "memori": 4, "std": 4, "weekdai": 4, "id": [4, 12, 16], "slide": [4, 25, 29], "come": [4, 23], "divid": [4, 13, 16, 23, 24, 27], "against": [4, 10, 16], "match": [4, 9], "histori": [4, 5, 6, 9], "minimum": [4, 7, 9, 11, 12, 14], "classic": [4, 6, 9, 24, 25, 28, 29], "isol": [4, 24, 26], "forest": [4, 9, 24, 26], "isolationforestconfig": [4, 24], "max_n_sampl": [4, 24], "n_estim": [4, 9, 24], "isolationforest": [4, 19, 24, 25], "propos": 4, "liu": 4, "al": [4, 12, 14], "2008": 4, "aw": 4, "cut": 4, "jvmsingleton": 4, "gatewai": 4, "randomcutforestconfig": 4, "seed": [4, 9, 10, 24], "512": 4, "thread_pool_s": 4, "further": [4, 28], "pool": 4, "travers": 4, "submit": 4, "larger": 4, "throughput": 4, "stream": [4, 24], "sampler": 4, "java_param": 4, "refin": 4, "guha": 4, "2016": 4, "spectral": 4, "spectralresidualconfig": 4, "local_wind_sz": 4, "21": [4, 20, 22, 24, 25, 26, 30, 31], "q": [4, 6, 7, 9, 13, 21], "estimated_point": 4, "predicting_point": 4, "spectralresidu": 4, "previou": 4, "salienc": 4, "consid": [4, 5, 7, 11, 13, 14, 16, 24, 30], "local": [4, 9, 26, 31], "averag": [4, 6, 8, 9, 13, 14, 22, 28, 31], "pad": [4, 13, 22], "calcul": [4, 9, 13, 14], "gradient": [4, 9], "r": [4, 10, 14, 23, 28, 30, 31], "log": [4, 14, 21, 22], "mathscr": 4, "textbf": 4, "_": [4, 6, 9, 13, 14, 16, 17, 22], "s_m": 4, "convolut": 4, "fourier": [4, 6, 9], "overlin": 4, "reason": [4, 20], "done": [4, 8, 9, 14, 24, 28, 30], "later": [4, 16], "middl": 4, "rather": [4, 8, 11, 19, 20, 25], "ren": 4, "2019": [4, 16], "spectrum": 4, "invers": [4, 5, 6, 8, 9, 13, 18], "simpl": [4, 7, 11, 18], "static": [4, 14, 16, 24], "statthresholdconfig": [4, 26], "statthreshold": [4, 25, 26], "zmsconfig": 4, "n_lag": 4, "lag_infl": 4, "exponenti": [4, 6, 9, 13, 14, 28], "distant": 4, "chosen": 4, "math": 4, "below": [4, 20, 21, 24, 26, 28, 30, 31], "mathemat": 4, "role": 4, "inflat": [4, 6, 9, 14, 28], "distrust": 4, "toward": 4, "higher": [4, 5, 24], "less": [4, 11, 13], "begin": [4, 6, 9, 13, 14, 19, 23, 25, 26, 27, 28, 29, 31], "text": [4, 6, 9, 13, 14], "let": [4, 6, 9, 13, 14, 19, 20, 24, 26, 28, 30, 31], "space": [4, 5, 6, 7, 9, 13], "z_k": 4, "k": [4, 7, 9, 12, 13, 14, 21, 22, 24, 26, 28, 30, 31], "delta_k": 4, "p": [4, 6, 7, 9, 13, 14, 21, 23], "z_": [4, 13], "argmax": 4, "_k": 4, "design": 4, "spike": [4, 13, 16], "dip": [4, 13, 16], "sharp": 4, "up": [4, 6, 7, 9, 14, 16, 21, 29, 30], "down": 4, "captur": [4, 26], "magnitud": [4, 6, 9, 26], "direct": 4, "distinguish": [4, 19], "build": [4, 18], "normalci": 4, "grow": 4, "zeroth": 4, "order": [4, 6, 7, 9, 10, 12, 14, 20, 21, 28, 31], "just": [4, 6, 9, 12, 13, 14, 17, 19, 20, 26, 28, 31], "seen": [4, 5, 6, 9], "kth": 4, "similar": 4, "except": [4, 16, 20], "8": [4, 14, 16, 19, 20, 21, 22, 24, 26, 28, 30, 31], "16": [4, 5, 19, 20, 22, 24, 26, 28, 30, 31], "assign": [4, 9, 12, 13, 14], "lag_scal": 4, "adjust_z_scor": 4, "autoencoderconfig": 4, "hidden_s": 4, "layer_s": 4, "25": [4, 19, 20, 24, 26, 30], "10": [4, 6, 9, 11, 14, 16, 17, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31], "sequence_len": 4, "lr": [4, 9], "001": 4, "batch_siz": [4, 9, 10], "num_epoch": 4, "50": [4, 19, 20, 22, 24, 26, 28, 30], "latent": 4, "hidden": [4, 6, 9], "mlp": 4, "encod": 4, "decod": 4, "batch": [4, 9, 10, 14, 24], "epoch": [4, 9], "correl": 4, "joint": 4, "paper": 4, "pierr": 4, "baldi": 4, "architectur": 4, "2012": [4, 19, 30], "vaeconfig": 4, "encoder_hidden_s": 4, "decoder_hidden_s": 4, "latent_s": 4, "kld_weight": 4, "dropout_r": 4, "num_eval_sampl": 4, "1024": [4, 6, 9], "regular": [4, 14, 20, 24, 28], "kl": 4, "diverg": 4, "term": [4, 6, 9], "dropout": 4, "variat": 4, "reconstruct": 4, "diederik": 4, "kingma": 4, "bay": [4, 14], "2013": [4, 24, 26], "gaussian": 4, "mixtur": 4, "dagmmconfig": 4, "gmm_k": 4, "lambda_energi": 4, "lambda_cov_diag": 4, "005": 4, "256": [4, 9], "energi": [4, 17], "covari": 4, "diagon": 4, "entri": [4, 14, 26], "jointli": 4, "optim": [4, 7, 10, 14, 24], "simultan": 4, "fashion": 4, "bo": 4, "zong": 4, "qi": 4, "song": 4, "martin": 4, "renqiang": 4, "wei": 4, "cheng": 4, "cristian": 4, "lumezanu": 4, "daeki": 4, "cho": 4, "haifeng": 4, "chen": [4, 16], "2018": [4, 12, 14], "n_epoch": 4, "shuffl": [4, 10], "collect": [4, 16, 19, 20, 31], "lstmedconfig": 4, "20": [4, 19, 20, 22, 24, 26, 28, 31], "n_layer": 4, "lstmed": 4, "represent": [4, 14, 15, 16], "network": 4, "deeppointanomalydetectorconfig": 4, "deeppointanomalydetector": 4, "signal": 4, "taget": 4, "pair": [4, 11, 14, 16, 17], "few": [4, 18, 24], "itert": 4, "loss": [4, 6, 9, 13, 25], "regard": 4, "intuit": 4, "dnn": 4, "global": 4, "pattern": 4, "overfit": 4, "therefor": 4, "arpit": 4, "devansh": 4, "closer": 4, "look": [4, 11, 19, 28], "memor": 4, "icml": 4, "2017": [4, 6, 9], "rahaman": 4, "nasim": 4, "On": 4, "bia": [4, 13], "neural": [4, 6, 9], "onlin": [5, 6, 9, 14], "sort": [5, 14, 17, 19, 22, 30], "choos": [5, 7, 11, 20], "shift": [5, 13, 16], "linear": [5, 14], "1e": [5, 9], "forecasterconfig": [5, 6, 9, 31], "belief": 5, "probabl": [5, 13], "frequent": 5, "changepoint": 5, "delai": [5, 11], "lookback": 5, "discard": 5, "hypothes": 5, "complex": 5, "By": [5, 6, 8, 9, 13, 14, 20, 21, 24, 26], "proper": [5, 6, 8, 9, 13], "without": [5, 6, 8, 9, 16, 18, 26, 30, 31], "adam": 5, "mackai": 5, "2007": [5, 14], "observ": [5, 13, 14, 31], "too": [5, 7, 16, 28], "much": [5, 20], "forward": [5, 13], "freshli": 5, "piecewis": 5, "sinc": [5, 7, 9, 20, 24, 26, 28], "far": [5, 26], "increas": [5, 6, 9, 24], "decreas": 5, "particular": [5, 9, 12, 13, 19, 24, 28, 30], "likelihood": [5, 7], "return_exog": [5, 8, 9], "over": [5, 6, 7, 9, 14, 15, 16, 20, 24, 30], "plot_forecast_uncertainti": [5, 6, 9, 21, 27, 28], "variant": [6, 9, 14, 31], "overlai": 6, "applic": [6, 14], "past": [6, 9, 10, 28, 30], "autoregress": [6, 9, 10], "move": [6, 9, 13, 14, 22], "seasonal_ord": [6, 7, 9, 21], "exog_transform": [6, 8, 9, 30], "exog_aggregation_polici": [6, 8, 9, 30], "exog_missing_value_polici": [6, 8, 9, 30], "arimaconfig": [6, 9, 28], "d": [6, 7, 9, 10, 14, 21, 30], "integ": [6, 9, 12, 14, 20], "ma": [6, 7, 9, 21, 22], "polici": [6, 8, 9, 13, 14], "aggreg": [6, 8, 9, 12, 13, 14], "endogen": [6, 8, 9, 30], "imput": [6, 8, 9, 13, 14, 30], "miss": [6, 8, 9, 12, 13, 14, 20, 24, 28, 30], "24": [6, 9, 17, 20, 21, 22, 24, 25, 26, 29], "sarimaconfig": [6, 9], "cycl": [6, 9], "hour": [6, 9, 28], "hourli": [6, 7, 9, 15, 17, 21, 22, 27, 28, 29, 31], "damped_trend": [6, 7, 9], "seasonal_period": [6, 7, 9], "pred_interval_strategi": [6, 9], "exact": [6, 9, 14, 24, 28], "refit": [6, 9], "etsconfig": [6, 9], "flexibl": [6, 9], "trait": [6, 9], "mul": [6, 7, 9], "otext": [6, 9, 10], "fpp2": [6, 9, 10], "taxonomi": [6, 9], "html": [6, 9, 10, 17], "inform": [6, 7, 9, 13, 20, 30], "damp": [6, 7, 9], "strategi": [6, 7, 9], "slower": [6, 9, 18], "simpli": [6, 9, 14, 15, 24, 28], "smooth": [6, 9, 13, 28], "faster": [6, 9], "facebook": [6, 7, 9, 24, 28], "yearly_season": [6, 9, 22, 24, 28], "weekly_season": [6, 9, 24, 28], "daily_season": [6, 9, 24, 28], "seasonality_mod": [6, 9, 24, 28], "holidai": [6, 9, 24, 28, 30], "uncertainty_sampl": [6, 9, 24, 28], "prophetconfig": [6, 9, 22, 28, 30], "taylor": [6, 9], "letham": [6, 9], "yearli": [6, 9, 17, 22, 24, 28], "activ": [6, 9, 16], "year": [6, 9, 20], "deactiv": [6, 9], "pd": [6, 9, 14, 15, 16, 19, 20, 21, 22, 26, 31], "column": [6, 9, 12, 14, 15, 16, 17, 19, 20, 24, 26, 30, 31], "date": [6, 9, 19, 30], "lower_window": [6, 9], "upper_window": [6, 9], "prior_scal": [6, 9], "draw": [6, 9, 13, 21, 28], "net": [6, 9], "nhid": [6, 9], "model_strid": [6, 9], "lstmconfig": [6, 9], "stride": [6, 9, 13, 24], "subsampl": [6, 9], "multi": [6, 9, 28], "max_backstep": [6, 9, 28], "accel_weight": [6, 9, 28], "optimize_acc": [6, 9, 28], "eta": [6, 9, 28], "rho": [6, 9, 28], "phi": [6, 9, 28], "msesconfig": [6, 9, 28], "w": [6, 9, 13, 14, 30, 31], "b": [6, 9, 13, 14], "backstep": [6, 9], "l_": [6, 9], "h": [6, 9, 30], "p_": [6, 9], "v_": [6, 9, 13], "a_": [6, 9], "ema": [6, 9, 14], "_w": [6, 9, 14], "delta_": [6, 9], "p_b": [6, 9], "sigma": [6, 9, 14, 24, 26], "_b": [6, 9], "z_b": [6, 9], "rwse": [6, 9], "Then": [6, 9, 10, 13, 14, 15, 30], "th": [6, 7, 9, 12, 14, 30], "xhat": [6, 9], "delta_hat": [6, 9], "acceler": [6, 9], "veloc": [6, 9, 13], "correct": [6, 7, 9, 14], "control": [6, 9, 13, 30], "made": [6, 9, 16], "determin": [6, 7, 9, 10, 11, 13, 26], "what": [6, 9, 19, 31], "fraction": [6, 8, 9, 16, 17], "due": [6, 9, 13, 24, 26], "velciti": [6, 9], "rest": [6, 9], "complement": [6, 9], "velocity_error": [6, 9], "loss_error": [6, 9], "factor": [6, 9, 13], "expon": [6, 9], "accord": [6, 8, 9, 14, 24, 28], "softmax": [6, 9], "automlmixin": 7, "generate_theta": 7, "theta": [7, 9, 14], "iter": [7, 10, 14, 15, 16, 20], "candid": [7, 11], "consider": 7, "evaluate_theta": 7, "procedur": 7, "set_theta": 7, "behavior": [7, 14, 24, 28], "oftentim": 7, "informationcriterion": 7, "aic": 7, "akaik": 7, "criterion": 7, "mathrm": [7, 13, 14, 28, 31], "2k": 7, "ln": [7, 13], "bic": 7, "aicc": 7, "small": [7, 9], "paramt": 7, "icconfig": 7, "information_criterion": [7, 10], "mix": 7, "best": [7, 8, 11, 21, 28, 29], "icautomlforecast": 7, "get_ic": 7, "One": [7, 13, 14, 16], "tri": 7, "_train": [7, 26, 31], "periodicitystrategi": 7, "acf": 7, "highest": 7, "autocorrel": 7, "valid": [7, 8, 11, 15, 16, 19, 28], "extend": [7, 17], "seasonalitylay": [7, 9], "numpi": [7, 9, 10, 14, 21, 24, 26, 28, 31], "arrai": [7, 9, 10, 14], "seasonalityconfig": 7, "periodicity_strategi": 7, "pval": 7, "05": [7, 9, 10, 19, 20, 24, 26, 30, 31], "max_lag": 7, "decid": 7, "signific": 7, "multi_season": 7, "unless": [7, 13, 28], "idea": [7, 10], "find": [7, 11, 14, 16, 17], "seasonalit": 7, "gridsearch": 7, "param_valu": 7, "restrict": 7, "grid": [7, 14, 17], "skip": [7, 12, 13, 28], "inadmiss": 7, "impos": 7, "hyperparamt": 7, "autoetsconfig": 7, "auto_season": [7, 21], "auto_error": 7, "auto_trend": 7, "auto_damp": 7, "additive_onli": 7, "allow_multiplicative_trend": 7, "infinit": 7, "autoprophetconfig": 7, "exist": [7, 14], "autosarimaconfig": [7, 21], "auto_pqpq": [7, 21], "auto_d": [7, 21], "maxit": [7, 10, 21], "max_k": 7, "max_dur": 7, "3600": [7, 13, 14, 28], "approxim": [7, 18], "approx_it": [7, 21], "differenc": [7, 10, 26], "numer": [7, 15, 16, 17], "coupl": [7, 19], "avoid": [7, 13], "stepwis": 7, "long": [7, 16, 19, 21], "150": 7, "off": 7, "12": [7, 16, 19, 20, 22, 24, 26, 28, 29, 30, 31], "action": 7, "seach": 7, "stepwsi": 7, "predefin": [7, 21], "pqpq": 7, "ensembleconfig": 8, "rational": 8, "behind": [8, 30], "place": 8, "discuss": 8, "combinerbas": 8, "ensembletrainconfig": 8, "valid_frac": 8, "per_model_train_config": 8, "per": [8, 24, 29], "ensemblebas": 8, "did": [8, 16, 24], "models_us": 8, "train_valid_split": 8, "transformed_train_data": 8, "get_max_common_horizon": 8, "train_combin": 8, "all_model_out": 8, "save_only_used_model": 8, "_combine_univari": 8, "__call__": [8, 13], "_check_dim": 8, "requires_train": 8, "set_model_us": 8, "get_model_us": 8, "ndarrai": [8, 12, 14], "modelselector": [8, 28, 29], "rank": 8, "metricweightedmean": 8, "proport": 8, "combinerfactori": 8, "detectorensembleconfig": [8, 24], "per_model_threshold": 8, "detectorensembletrainconfig": 8, "per_model_post_rule_train_config": 8, "detectorensembl": [8, 24, 25], "forecasterensembleconfig": [8, 28], "verbos": [8, 28], "forecasterexogconfig": [8, 9], "forecasterensembl": [8, 28, 29], "resample_time_stamp": [8, 9], "forecasterclass": 9, "evenli": [9, 26, 31], "sure": [9, 19], "target_nam": 9, "supports_exog": 9, "transform_exog_data": 9, "batch_forecast": 9, "time_stamps_list": 9, "time_series_prev_list": 9, "forecast_stderr": 9, "forecast_lb": 9, "forecast_ub": 9, "interest": [9, 14], "datetimeindex": [9, 10, 14, 20], "exog_data_prev": 9, "arbitrari": [9, 21, 24, 28], "sklearn": 9, "regress": [9, 14], "sklearnforecasterconfig": 9, "maxlag": 9, "prediction_strid": 9, "sklearnforecast": 9, "unit": [9, 10, 13, 14, 16, 17, 19, 20, 22, 24, 25, 26, 30], "next": [9, 11, 14, 19, 23, 26, 27, 28, 31], "style": 9, "popular": [9, 24, 28, 30], "add_season": [9, 22], "max_scal": 9, "msestrainconfig": 9, "process_loss": 9, "tune_recency_weight": 9, "init_batch_sz": 9, "train_cad": 9, "init": 9, "cannot": 9, "veri": 9, "track": [9, 13, 24, 28], "encount": 9, "mechan": 9, "concept": [9, 14, 18, 20], "back": [9, 20, 28], "delta": [9, 13, 14], "timestep": 9, "velocity_hat": 9, "acceleration_hat": 9, "seper": 9, "xhat_b": 9, "dot": [9, 12, 21, 28], "lowest": [9, 28], "max_horizon": 9, "acquir": 9, "xhat_h": 9, "marginalize_xhat_h": 9, "deltastat": 9, "update_veloc": 9, "vel": 9, "update_acceler": 9, "acc": 9, "update_loss": 9, "constant": [9, 14, 21], "bigger": 9, "aggress": 9, "deltaestim": 9, "stat": [9, 14, 21, 27], "acc_max_scal": 9, "scale_loss": 9, "vel_err": 9, "pos_err": 9, "neg_err": 9, "loss_err": 9, "vector": [9, 13, 14, 20, 30], "vectorarconfig": 9, "vectorar": 9, "treeensembleforecasterconfig": 9, "random_st": 9, "max_depth": 9, "bag": 9, "depth": 9, "randomforestforecasterconfig": 9, "min_samples_split": 9, "randomforestforecast": 9, "leav": [9, 12, 16, 24], "meta": 9, "classifi": 9, "decis": 9, "extratreesforecasterconfig": 9, "extratreesforecast": 9, "lgbmforecasterconfig": 9, "learning_r": 9, "n_job": 9, "boost": 9, "num": 9, "devic": 9, "light": 9, "lgbm": 9, "fast": 9, "readthedoc": 9, "io": 9, "en": 9, "latest": 9, "lstmtrainconfig": 9, "128": 9, "seq_len": 9, "data_strid": 9, "valid_split": 9, "checkpoint_fil": 9, "checkpoint": 9, "pt": 9, "rollingwindowdataset": 10, "n_past": 10, "n_futur": 10, "ts_index": 10, "flatten": 10, "whole": [10, 24, 28], "emploi": 10, "past_np": 10, "past_tim": 10, "future_np": 10, "future_tim": 10, "impli": [10, 14], "keep": [10, 13, 14, 28], "slice": [10, 14, 20], "n_point": 10, "collate_batch": 10, "diff": [10, 22, 28], "suitabl": 10, "2d": [10, 14], "detect_maxiter_sarima_model": 10, "exog": [10, 30], "zero": [10, 11, 13, 14, 26, 30, 31], "seas_seasonalstationaritytest": 10, "strength": 10, "mstl": 10, "stl": 10, "deal": 10, "nsdiff": 10, "max_d": 10, "sea": 10, "maxim": [10, 25, 26], "kpss_stationaritytest": 10, "xx": 10, "alpha": [10, 13, 14], "kpss": 10, "null": 10, "hypothesi": 10, "stationari": [10, 14], "altern": [10, 19, 20, 26, 28], "least": [10, 13], "ndiff": 10, "reshap": 11, "sparsifi": [11, 24], "togeth": 11, "primarili": 11, "accept": [11, 16, 30], "state_dict": [11, 13, 14], "anomaly_scor": 11, "monoton": 11, "divers": [11, 17], "retrain_calibr": 11, "alreadi": [11, 13, 16, 26], "practic": 11, "better": [11, 14, 16, 27, 29, 30], "unsup_quantil": 11, "min_allowed_scor": 11, "80": [11, 19, 30], "90": [11, 19, 22, 30], "98": 11, "99": [11, 29, 30], "9": [11, 16, 19, 20, 21, 22, 24, 26, 28, 31], "quantil": 11, "lead": 11, "achiev": [11, 24, 28, 30], "min_alm_in_window": [11, 24], "alm_window_minut": [11, 24], "alm_suppress_minut": [11, 24, 26], "120": [11, 24], "fire": [11, 23, 24, 26], "alarm": [11, 23, 24, 26], "alarm_window_minut": 11, "suppress": [11, 26], "mark": 11, "hist_gap_thr": 11, "histogram": 11, "bin": 11, "insid": 11, "avg": 11, "expect": [12, 13, 14], "write": 12, "__ts_id": 12, "reli": 12, "ad": [12, 13, 16, 17, 18, 30], "file_format": 12, "csv": [12, 14, 16, 17, 19, 20, 23, 24, 26, 30], "time_col": [12, 14, 16, 17], "index_col": [12, 16, 17, 19, 30], "data_col": [12, 14, 16, 17, 19], "sparksess": 12, "downstream": 12, "df": [12, 14, 20], "agg_dict": 12, "sale": [12, 16, 17, 30], "sold": [12, 30], "matrix": [12, 14], "udf": 12, "sql": 12, "applyinpanda": 12, "target_col": 12, "predict_on_train": 12, "group": 12, "nan": [12, 14, 19, 20, 30], "doesn": [12, 13, 19, 28, 31], "_err": 12, "train_test_split": 12, "anom_scor": [12, 24, 26, 31], "hier_matrix": 12, "trace": [12, 14], "wickramasuriya": [12, 14], "orrespond": 12, "np": [12, 14, 21, 24, 26, 28, 31], "replac": [12, 14], "reconcil": [12, 14], "happen": [12, 13], "introduc": 13, "three": [13, 14, 16, 24, 28], "inial": 13, "serial": 13, "compat": [13, 14], "even": 13, "pseudo": 13, "recov": [13, 22], "addition": [13, 26, 28], "transformcl": 13, "possibli": 13, "inversion_st": 13, "perfect": 13, "warn": [13, 14, 20, 22], "intermedi": 13, "destroi": 13, "upon": 13, "retain_inversion_st": 13, "prevent": 13, "helper": 13, "accident": 13, "stale": 13, "alwai": [13, 15, 16], "noth": 13, "stateless": 13, "clip": 13, "lie": 13, "n_step": [13, 22], "fewer": 13, "ci": 13, "un": 13, "unnorm": 13, "y_0": 13, "x_0": [13, 14], "y_i": 13, "y_": 13, "x_i": [13, 14], "ldot": [13, 14, 30], "confid": [13, 21, 27], "l_i": 13, "s_i": 13, "u_i": 13, "u_o": 13, "condfid": 13, "x_lb": 13, "x_ub": 13, "y_lb": 13, "y_ub": 13, "decai": 13, "var": [13, 14], "lose": 13, "sign": 13, "normalize_bia": 13, "normalize_scal": [13, 26], "scalar": [13, 14], "learnabl": 13, "lmbda": 13, "offset": 13, "box": [13, 28], "cox": 13, "power": [13, 17], "stack": [13, 14], "adjac": [13, 14], "trainable_granular": [13, 28], "remove_non_overlap": [13, 14, 28], "tempor": 13, "gcd": [13, 14], "overlap": [13, 14], "span": [13, 14], "3660": [13, 14], "3540": [13, 14], "downsampl": [13, 14, 30], "upsampl": [13, 14], "treat": [13, 19, 24, 28], "emit": [13, 14, 20], "multivar_skip": [13, 24], "concret": [13, 20, 24, 28, 30], "t1": 13, "x1": [13, 14, 20], "t2": 13, "x2": [13, 20], "yield": [13, 14], "perfectli": 13, "divis": 13, "side": 13, "value_t": 13, "sequenti": 13, "compris": [13, 14, 20], "held": 13, "check_align": [13, 14], "tell": 13, "inject": [13, 14, 16], "synthet": [13, 14, 15, 16, 19], "anom_prob": 13, "natrual": 13, "boundari": 13, "stai": 13, "pos_prob": 13, "6": [13, 14, 16, 19, 20, 21, 22, 24, 26, 28, 30, 31], "persist_shock": 13, "tild": 13, "rwsd": 13, "sim": [13, 14], "unif": 13, "y_w": 13, "width": 13, "randomli": 13, "uniform": 13, "success": [13, 26], "sudden": 13, "disturb": 13, "persist": 13, "thu": 13, "emul": 13, "afterward": 13, "v_t": 13, "freq": [14, 16, 20], "stuff": 14, "unix": [14, 19, 20, 28], "j": 14, "concaten": [14, 31], "rtype": 14, "t_in_left": 14, "datetim": [14, 20, 31], "everyth": 14, "include_tf": 14, "exclud": [14, 26], "sai": 14, "four": 14, "unnam": [14, 20], "constructor": [14, 20], "zip": 14, "interoper": 14, "present": [14, 20], "xn": 14, "xk": 14, "t_i": 14, "x1_i": 14, "xn_i": 14, "val_vector": 14, "queri": 14, "time_series_1": 14, "time_series_2": 14, "mapper": 14, "len": [14, 15, 16, 19, 20, 21, 28, 31], "file_nam": 14, "check_tim": 14, "drop_nan": 14, "millisecond": [14, 20], "ts_list": 14, "alignment_polici": 14, "intersect": 14, "lambda": [14, 22], "fill": [14, 30], "closest": 14, "to_replac": 14, "truncat": [14, 28], "time_stamp_list": 14, "reindex": 14, "timestamp_unit": 14, "func": 14, "decor": 14, "docstr": 14, "err": [14, 30, 31], "sum_matrix": 14, "n_leav": 14, "strictli": [14, 22], "leaf": 14, "di": 14, "reflect": [14, 24, 28], "nois": 14, "built": 14, "mtrand": 14, "randomst": 14, "distort": 14, "1970": [14, 19, 31], "tdelta": 14, "dimension": [14, 25, 29, 30], "deflat": 14, "return_t": 14, "per_generator_nois": 14, "string_output": 14, "undergo": 14, "fundament": 14, "certain": [14, 28], "could": [14, 19, 30], "consecut": 14, "connect": 14, "abc": 14, "return_rv": 14, "return_upd": 14, "scipi": [14, 21, 27], "version": [14, 20], "bernoulli": 14, "x_1": 14, "x_n": 14, "mathbb": [14, 28, 30, 31], "inversegamma": 14, "wikipedia": 14, "murphi": 14, "mathcal": 14, "mu": 14, "mu_0": 14, "invgamma": 14, "n_0": 14, "student": 14, "sigma2": 14, "inversewishart": 14, "_d": 14, "invwishart": 14, "nu": 14, "ordinari": 14, "m_0": 14, "b_0": 14, "lambda_0": 14, "t_1": 14, "t_n": 14, "row": [14, 19, 20, 24, 26, 30, 31], "ones": 14, "denot": 14, "w_": 14, "ol": 14, "lambda_n": 14, "w_n": 14, "w_0": 14, "alpha_n": 14, "alpha_0": 14, "beta_n": 14, "beta_0": 14, "pi": 14, "det": 14, "gamma": 14, "naiv": 14, "mid": 14, "geisser": 14, "1965": 14, "otim": 14, "v_0": 14, "kroneck": 14, "nu_n": 14, "nu_0": 14, "v_n": 14, "tw_n": 14, "nd": 14, "gamma_d": 14, "emphasi": 14, "ex_valu": 14, "ex2_valu": 14, "ddof": 14, "moment": 14, "degre": 14, "freedom": 14, "rwv": 14, "2_t": 14, "manipul": 15, "instal": [15, 16, 17, 26, 31], "merlion": [15, 18, 21, 22, 25, 26, 29, 30, 31], "realawscloudwatch": [15, 16], "m4": [15, 17, 21, 22, 27, 28, 31], "anom_dataset": 15, "rootdir": [15, 16, 17, 19, 30], "path_to_nab": 15, "forecast_dataset": 15, "path_to_m4": 15, "outlin": 15, "basedataset": [15, 16, 17], "tsadbasedataset": [15, 16], "easiest": 15, "customdataset": [15, 16, 17, 19, 30], "customanomalydataset": [15, 16, 19], "review": [15, 16, 17, 26, 31], "get_dataset": [15, 16, 17], "max_lead_sec": [15, 16], "max_lag_sec": [15, 16], "metadata_col": [15, 16, 17], "check_ts_for_metadata": [15, 16, 17], "iopscompetit": [15, 16], "valid_subset": [15, 16, 17], "load_label": [15, 16], "download": [15, 16], "base_ts_subset": [15, 16], "anomaly_subset": [15, 16], "ucr": [15, 16], "smd": [15, 16], "url": [15, 16, 17], "smap": [15, 16], "msl": [15, 16, 25], "energypow": [15, 17], "seattletrail": [15, 17, 29], "solarpl": [15, 17], "__len__": [15, 16], "trainval": [15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "larg": [15, 16, 19, 25], "lazili": 15, "invok": [15, 24], "tsad": 16, "dataset_nam": [16, 17], "nab_realawscloudwatch": 16, "intend": 16, "signifi": 16, "someth": 16, "suit": 16, "purpos": [16, 18, 20, 25, 26, 29], "accur": [16, 17], "late": 16, "test_frac": [16, 17, 19, 30], "assume_no_anomali": [16, 19], "time_unit": [16, 17, 19], "throw": [16, 20], "fetch": [16, 17], "express": [16, 17, 19], "depart": [16, 17, 19], "dept": [16, 17, 19, 30], "col": [16, 17], "round": 16, "iop": 16, "competit": [16, 17], "ai": 16, "competition_detail": 16, "competition_id": 16, "29": [16, 19, 20, 31], "kpi": [16, 20], "gather": [16, 31], "tech": 16, "compani": 16, "alibaba": 16, "sogou": 16, "tencent": 16, "baidu": 16, "ebai": 16, "1min": 16, "prohibit": 16, "hard": 16, "analyz": 16, "35min": 16, "placehold": 16, "categor": 16, "domain": [16, 17], "artifici": 16, "artificialwithanomali": 16, "realadexchang": 16, "realknowncaus": [16, 23, 24, 26], "realtraff": 16, "realtweet": 16, "datafil": 16, "label_list": 16, "disallow": 16, "earlier": 16, "sythet": 16, "total": 16, "15": [16, 19, 20, 21, 24, 25, 26, 28, 31], "horizont": [16, 19], "upward_downward": [16, 19], "hexagon": 16, "ml": 16, "uc": 16, "riversid": 16, "archiv": 16, "hoang": 16, "anh": 16, "dau": 16, "eamonn": 16, "keogh": 16, "kaveh": 16, "kamgar": 16, "chin": 16, "chia": 16, "michael": 16, "yeh": 16, "yan": 16, "zhu": 16, "shaghayegh": 16, "gharghabi": 16, "chotirat": 16, "ann": 16, "ratanamahatana": 16, "yanp": 16, "bing": 16, "hu": 16, "nurjahan": 16, "begum": 16, "anthoni": 16, "bagnal": 16, "abdullah": 16, "mueen": 16, "gustavo": 16, "batista": 16, "classif": 16, "www": [16, 17], "edu": 16, "time_series_data_2018": 16, "server": 16, "machin": 16, "internet": 16, "publicli": 16, "28": [16, 19, 20, 24, 25, 30], "monitor": 16, "33": [16, 19, 30], "netmanaiop": 16, "omnianomali": 16, "servermachinedataset": 16, "dropbox": 16, "x53ph5cru62kv0f": 16, "tar": 16, "gz": 16, "dl": 16, "7": [16, 19, 20, 21, 22, 24, 26, 28, 29, 30, 31], "soil": 16, "moistur": 16, "passiv": 16, "satellit": 16, "mar": 16, "scienc": 16, "laboratori": 16, "rover": 16, "realworld": 16, "public": 16, "world": 16, "expert": 16, "nasa": 16, "khundman": 16, "telemanom": 16, "uv9ojw353qwzqht": 16, "realli": 17, "m4_hourli": 17, "identifi": 17, "busi": 17, "financi": 17, "econom": 17, "23": [17, 20, 24, 25, 31], "000": 17, "quarterli": 17, "48": [17, 19, 20, 21, 22, 28, 30], "359": 17, "227": 17, "414": [17, 21, 22, 27, 28, 31], "mcompetit": 17, "open": [17, 24, 28], "usag": 17, "kaggl": 17, "robikscub": 17, "consumpt": 17, "seattl": 17, "trail": 17, "pedestrian": 17, "bike": 17, "traffic": 17, "citi": 17, "burk": 17, "gilman": 17, "num_column": 17, "solar": 17, "plant": 17, "nrel": 17, "gov": 17, "405": [17, 20], "block": 18, "broader": 18, "takeawai": 18, "gentl": 18, "introduct": 18, "quantit": [18, 23, 27], "With": 18, "prepar": 18, "suggest": [18, 26, 31], "proof": 18, "notebook": [19, 20, 21, 24, 26, 28, 31], "explain": [19, 20, 24, 26, 28, 31], "glob": 19, "anom_dir": 19, "join": [19, 20, 24, 28, 30], "synthetic_anomali": 19, "print": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "horizontal_dip_anomali": 19, "horizontal_level_anomali": 19, "horizontal_shock_anomali": 19, "horizontal_spike_anomali": 19, "horizontal_trend_anomali": 19, "seasonal_dip_anomali": 19, "seasonal_level_anomali": 19, "seasonal_shock_anomali": 19, "seasonal_spike_anomali": 19, "seasonal_trend_anomali": 19, "upward_downward_dip_anomali": 19, "upward_downward_level_anomali": 19, "upward_downward_shock_anomali": 19, "upward_downward_spike_anomali": 19, "upward_downward_trend_anomali": 19, "ipython": 19, "displai": [19, 30], "read_csv": [19, 20], "928031": 19, "300": 19, "156620": 19, "390650": 19, "900": 19, "400804": 19, "1200": 19, "874490": 19, "9995": 19, "2998500": 19, "362724": 19, "9996": 19, "2998800": 19, "657373": 19, "9997": 19, "2999100": 19, "472341": 19, "9998": 19, "2999400": 19, "033154": 19, "9999": 19, "2999700": 19, "950466": 19, "10000": 19, "577883": 19, "059779": 19, "137609": 19, "743360": 19, "998400": 19, "388685": 19, "017828": 19, "196791": 19, "234555": 19, "111685": 19, "characterist": 19, "absent": 19, "75": [19, 22, 30], "There": [19, 24, 28], "18": [19, 20, 24, 25, 27, 30, 31], "Its": [19, 28], "02": [19, 20, 24, 25, 26, 29, 30, 31], "04": [19, 20, 24, 29, 31], "55": [19, 20, 22, 24, 25, 26, 30], "17": [19, 20, 22, 24, 26, 28, 31], "19": [19, 20, 22, 24, 25, 26, 29, 30, 31], "57": [19, 20, 25], "opportun": 19, "show": [19, 21, 22, 23, 24, 26, 27, 28, 30, 31], "retail": [19, 30], "corresond": 19, "walmart": [19, 30], "walmart_mini": [19, 30], "weekly_sal": [19, 30], "temperatur": [19, 30], "fuel_pric": [19, 30], "markdown1": [19, 30], "markdown2": [19, 30], "markdown3": [19, 30], "markdown4": [19, 30], "markdown5": [19, 30], "cpi": [19, 30], "unemploy": [19, 30], "isholidai": [19, 30], "2010": [19, 30], "24924": [19, 30], "42": [19, 24, 25, 30], "31": [19, 20, 24, 30, 31], "572": [19, 30], "211": [19, 30], "096358": [19, 30], "106": [19, 30], "46039": [19, 30], "49": [19, 20, 30], "38": [19, 30], "51": [19, 25, 28, 30], "548": [19, 30], "242170": [19, 30], "41595": [19, 30], "39": [19, 20, 22, 24, 28, 30], "93": [19, 30], "514": [19, 30], "289143": [19, 30], "26": [19, 20, 28, 30], "19403": [19, 30], "54": [19, 22, 30], "46": [19, 20, 22, 25, 30], "63": [19, 24, 30], "561": [19, 30], "319643": [19, 30], "03": [19, 20, 24, 28, 29, 30, 31], "21827": [19, 30], "625": [19, 30], "350143": [19, 30], "2855": 19, "09": [19, 20, 24, 25, 26, 28, 30, 31], "37104": 19, "67": [19, 30], "79": 19, "45": [19, 24, 26, 30], "666": [19, 30], "7106": 19, "91": 19, "65": [19, 30], "1549": 19, "3946": 19, "222": [19, 30], "616433": 19, "565": 19, "2856": 19, "36361": 19, "70": 19, "27": [19, 20, 24, 25, 30], "617": [19, 20, 30], "6037": 19, "76": [19, 30], "3027": 19, "37": [19, 25], "3853": 19, "40": [19, 24, 25, 26], "815930": 19, "170": 19, "2857": [19, 24], "35332": 19, "34": [19, 25], "97": [19, 30], "601": [19, 30], "2145": 19, "586": [19, 31], "83": [19, 22], "10421": 19, "223": [19, 30], "015426": 19, "2858": 19, "35721": 19, "68": [19, 30], "08": [19, 20, 24, 30, 31], "594": [19, 30], "4461": 19, "89": [19, 30], "14": [19, 20, 24, 26, 28, 30, 31], "1579": 19, "2642": 19, "059808": 19, "2859": 19, "34260": 19, "69": [19, 30], "506": [19, 30], "6152": 19, "59": [19, 20], "129": 19, "77": [19, 28], "272": 19, "2924": 19, "078337": 19, "2860": 19, "okai": 19, "now": [19, 24, 26, 28, 31], "69634": 19, "210": [19, 28], "752605": 19, "324": 19, "63393": 19, "897994": 19, "66589": 19, "945160": 19, "61875": 19, "975957": 19, "67041": 19, "47": [19, 20, 22, 30], "006754": 19, "57424": 19, "62955": 19, "63083": 19, "60502": 19, "63992": 19, "36": [19, 24, 29, 30], "143": [19, 28, 30], "plu": 19, "benchmark_anomali": 19, "py": [19, 20], "7d": [19, 24], "data_root": 19, "data_kwarg": 19, "benchmark_forecast": 19, "throughout": 20, "think": 20, "timestamp_milli": 20, "kpi_label": 20, "1583140320000": 20, "667": 20, "118": [20, 22], "1583140380000": 20, "611": 20, "751": 20, "1583140440000": 20, "599": [20, 28], "456": 20, "1583140500000": 20, "621": 20, "446": 20, "1583140560000": 20, "1418": 20, "234": 20, "86802": 20, "1588376760000": 20, "874": 20, "214": 20, "86803": 20, "1588376820000": 20, "937": 20, "929": 20, "86804": 20, "1588376880000": 20, "1031": 20, "279": 20, "86805": 20, "1588376940000": 20, "1099": 20, "698": 20, "86806": 20, "1588377000000": 20, "935": 20, "86807": 20, "time_idx_df": 20, "to_datetim": [20, 22], "set_index": 20, "2020": 20, "13": [20, 24, 26, 28, 29, 31], "kpi_equival": 20, "__name__": [20, 24, 25, 28, 29], "isinst": 20, "dtype": 20, "float64": 20, "lt": [20, 21, 22, 24, 25, 27, 28, 29, 31], "gt": 20, "breviti": 20, "1583140320": 20, "1583140380": 20, "1583140440": 20, "1583140500": 20, "1583140560": 20, "datetime64": 20, "univaraiatetimeseri": 20, "approach": 20, "robust": 20, "ordereddict": [20, 31], "time_series_list": 20, "time_series_dict": 20, "kpi_renam": 20, "recovered_time_idx_df": 20, "kpi1": 20, "kpi2": 20, "assert": 20, "illustr": [20, 24, 28], "not_align": 20, "value_1": 20, "value_k": 20, "thing": [20, 21, 24, 28], "isn": [20, 26, 28, 31], "runtimeerror": 20, "still": 20, "misalign": 20, "abhatnagar": [20, 23, 26], "desktop": [20, 23, 26], "merlion_publ": [20, 23, 26], "userwarn": 20, "_union_": 20, "customiz": 20, "highlight": 20, "regardless": 20, "1166": 20, "819": 20, "1345": 20, "504": 20, "1061": 20, "391": 20, "1260": 20, "1202": 20, "009": 20, "1154": 20, "397": 20, "56": 20, "1270": 20, "292": 20, "1160": 20, "761": 20, "58": 20, "1082": 20, "076": 20, "1167": 20, "297": 20, "38160": 20, "1583226720": 20, "07": [20, 26, 28, 31], "1132": 20, "564": 20, "1087": 20, "037": 20, "984": 20, "432": 20, "1085": 20, "008": 20, "1020": 20, "1440": 20, "32": [20, 22, 23, 25], "1296": 20, "091": 20, "1323": 20, "743": 20, "1203": 20, "672": 20, "1278": 20, "720": 20, "1217": 20, "877": 20, "85376": 20, "1381": 20, "110": 20, "1807": 20, "039": 20, "1833": 20, "385": 20, "1674": 20, "412": 20, "1683": 20, "194": 20, "1431": 20, "hyper": 21, "pyplot": [21, 22, 23, 24, 26, 27, 28, 31], "plt": [21, 22, 23, 24, 26, 27, 28, 31], "norm": [21, 22, 27], "basicconfig": 21, "info": [21, 22, 24, 28, 30], "test_data": [21, 22, 23, 24, 25, 26, 27, 28, 29, 31], "add_subplot": [21, 22, 24, 26, 28, 31], "111": [21, 22, 24, 26, 28, 31], "axvlin": [21, 22, 24, 26, 28, 31], "lw": [21, 24, 26, 28, 31], "799": 21, "18it": 21, "700": [21, 28, 31], "enough": 21, "config1": [21, 24, 28], "model1": [21, 24, 25, 28, 29], "train_pr": [21, 29], "train_err": 21, "forecast1": [21, 28], "stderr1": [21, 28], "smape1": [21, 28], "4f": [21, 23, 24, 25, 26, 27, 29], "4491": 21, "groud": 21, "auto_": 21, "config2": [21, 24, 28], "model2": [21, 24, 25, 26, 28, 29, 31], "forecast2": [21, 28], "stderr2": [21, 28], "smape2": [21, 28], "6991": 21, "config3": [21, 24, 28], "model3": [21, 24, 25, 28, 29], "enforce_stationar": 21, "enforce_invert": 21, "forecast3": [21, 28], "stderr3": [21, 28], "smape3": [21, 28], "5288": 21, "md": [22, 26, 30, 31], "739": [22, 31], "15it": 22, "def": [22, 26, 28, 31], "eval_model": 22, "apply_invers": 22, "og_train": 22, "yhat_train": 22, "yhat_test": 22, "2f": [22, 30], "legend": 22, "get_model": 22, "No": 22, "disabl": [22, 24, 28], "88": 22, "41": 22, "73": [22, 24], "powertransform": 22, "61": 22, "guarante": 22, "53": 22, "71": 22, "1f": 22, "test_label": [23, 24, 25, 26], "ec2_request_latency_system_failur": [23, 24, 26], "kept": [23, 24, 26], "machine_temperature_system_failur": [23, 24, 26], "test_pr": [23, 25, 27, 29], "took": 23, "correctli": 23, "mttd": [23, 24, 25], "6667": [23, 24, 25, 26], "guid": [24, 28], "through": [24, 28], "1234": 24, "dash": [24, 26, 31], "isenilov": 24, "dev": 24, "train_label": [24, 26], "hous": [24, 28], "syntax": [24, 28], "event": [24, 26], "ensemble_config": [24, 28], "train_scores_1": 24, "ntrain": [24, 28], "train_scores_2": 24, "post_rule_train_config_3": 24, "train_scores_3": 24, "ensemble_post_rule_train_config": 24, "train_scores_": 24, "2263": 24, "5000": [24, 26], "scores_1": 24, "scores_1_df": 24, "iloc": [24, 26], "labels_1": 24, "labels_1_df": 24, "locat": 24, "challeng": 24, "424103": 24, "418938": 24, "484891": 24, "500257": 24, "449213": 24, "2014": [24, 26], "419456": 24, "415807": 24, "406724": 24, "427094": 24, "428348": 24, "19279": 24, "251397": 24, "35": [24, 26], "681691": 24, "914430": 24, "260543": 24, "738462": 24, "06": [24, 26, 28, 31], "303482": 24, "233514": 24, "791805": 24, "535895": 24, "314500": 24, "850349": 24, "170855": 24, "537919": 24, "451974": 24, "550075": 24, "359105": 24, "175556": 24, "675433": 24, "005116": 24, "247573": 24, "701491": 24, "772563": 24, "810997": 24, "702972": 24, "781997": 24, "709952": 24, "698602": 24, "790835": 24, "748293": 24, "711750": 24, "800493": 24, "852493": 24, "748630": 24, "734366": 24, "750652": 24, "719052": 24, "853260": 24, "771522": 24, "825713": 24, "700873": 24, "scores_2": 24, "labels_2": 24, "scores_3": 24, "labels_3": 24, "scores_": 24, "labels_": 24, "fairli": [24, 28], "definit": 24, "1667": 24, "0000": [24, 26], "2500": 24, "3636": 24, "3750": 24, "5455": 24, "4000": 24, "abl": 24, "greatli": 24, "led": 24, "outcom": 24, "quit": [24, 31], "assist": [24, 28], "demonstr": [24, 26, 28, 30], "pprint": [24, 28], "makedir": [24, 28], "exist_ok": [24, 28], "isf": 24, "pp": [24, 28], "prettyprint": [24, 28], "model2_load": [24, 28], "model2_factory_load": [24, 28], "38992633996347176": 24, "4187750781361715": 24, "445336977389891": 24, "47974261897360404": 24, "5271631189090943": 24, "8301789920204418": 24, "032894437734716": 24, "2263155501877727": 24, "nest": [24, 28], "ve": [24, 26, 28, 31], "selector": [24, 28, 29], "selector_load": [24, 28], "selector_factory_load": [24, 28], "n_model": [24, 28], "0005687426322338457": 24, "8270481271598537": 24, "6872394706496963": 24, "371538318320157": 24, "9246837154735017": 24, "064135464545045": 24, "032821539569336": 24, "12827092909009": 24, "00034442266386701815": 24, "50672704564658": 24, "0444911207158671": 24, "5495525355806337": 24, "9643452887114796": 24, "831069032732285": 24, "66213806546457": 24, "scenario": [24, 28], "choic": [24, 28], "unchang": 24, "deploi": 24, "train_scor": [24, 25], "test_scor": 24, "604800": 24, "5783700": 24, "1501940": 24, "88it": 24, "1209600": 24, "421704": 24, "52it": 24, "1814400": 24, "293996": 24, "29it": [24, 28], "2419200": [24, 25], "241431": 24, "47it": 24, "52": 24, "3024000": 24, "185310": 24, "19it": [24, 27], "3628800": 24, "186082": 24, "04it": 24, "4233600": 24, "168778": 24, "34it": 24, "84": 24, "4838400": 24, "166406": 24, "09it": 24, "94": 24, "5443200": 24, "138865": 24, "20it": 24, "160502": 24, "25it": 24, "drift": 24, "cover": [25, 28, 29, 30], "_max": 25, "ensemble_": 25, "5998": 25, "6001": 25, "9659": 25, "8312": 25, "8935": 25, "9638": 25, "8192": 25, "8856": 25, "9620": 25, "8184": 25, "8844": 25, "1w": 25, "4w": 25, "4423680": 25, "101454": 25, "83it": 25, "34157": 25, "67it": 25, "9522": 25, "8027": 25, "8711": 25, "160149": 25, "84it": [25, 29], "9666": 25, "8321": 25, "8943": 25, "6002": 25, "83276": 25, "94it": 25, "6532": 25, "28002": 25, "66it": [25, 29], "9453": 25, "8209": 25, "8787": 25, "minim": [26, 31], "instruct": [26, 31], "contribut": [26, 31], "awai": 26, "_default_transform": [26, 31], "smaller": [26, 27], "_default_threshold": 26, "__init__": [26, 31], "clariti": 26, "superclass": 26, "super": [26, 31], "_default_post_rule_train_config": 26, "That": [26, 31], "assumpt": [26, 28, 31], "_get_anomaly_scor": 26, "ll": [26, 31], "065700": 26, "097140": 26, "908860": 26, "892315": 26, "703186": 26, "041999": 26, "494303": 26, "234568": 26, "160902": 26, "055357": 26, "3403": 26, "notic": 26, "out": 26, "lot": [26, 30], "anom_label": 26, "520900": 26, "065935": 26, "825172": 26, "846644": 26, "050966": 26, "152393": 26, "771146": 26, "102446": 26, "023830": 26, "870839": 26, "19280": 26, "024196": 26, "012073": 26, "468464": 26, "124039": 26, "491421": 26, "819248": 26, "823173": 26, "822201": 26, "677379": 26, "300280": 26, "721": 26, "qualit": [26, 31], "aggegatealarm": 26, "anom_labels2": 26, "770": 27, "test_err": 27, "band": 27, "ppf": 27, "025": 27, "975": 27, "1944": 27, "9331": 27, "852": 28, "stochast": 28, "lvert": [28, 31], "rvert": [28, 31], "selector_config": 28, "forecast_": 28, "stderr_": 28, "shown": 28, "sub_test_data": 28, "prefix": 28, "explicit": 28, "five": 28, "3f": [28, 31], "understand": 28, "why": [28, 30], "attain": 28, "795": 28, "913": 28, "377": 28, "smape_": 28, "metric_valu": 28, "537074367680436": 28, "691874724892063": 28, "72980301555831": 28, "create_evalu": 28, "scratch": 28, "6h": 28, "12h": 28, "14d": 28, "black": 28, "model1_evalu": 28, "model1_train_result": 28, "model1_test_result": 28, "169200": 28, "22208": 28, "87it": 28, "013": 28, "281": 28, "ensemble_evalu": 28, "ensemble_train_result": 28, "ensemble_test_result": 28, "43200": 28, "12999": 28, "69it": 28, "86400": 28, "12030": 28, "39it": 28, "129600": 28, "11949": 28, "85it": 28, "7586": 28, "00it": 28, "896": 28, "626": 28, "3rd": 29, "defaultforeacst": 29, "moreov": [29, 30], "pick": 29, "train_stderr": [29, 31], "31550400": 29, "328262": 29, "154110": 29, "26it": 29, "successfulli": 29, "5235": 29, "132": 29, "8147": 29, "2208": 29, "140": 29, "2771": 29, "31528800": 29, "255804": 29, "57it": 29, "0339": 29, "4165": 29, "121688": 29, "1032": 29, "112": 29, "2604": 29, "goal": 30, "x_k": 30, "know": 30, "outsid": 30, "consum": 30, "price": 30, "unemployemnt": 30, "knowledg": 30, "markdown": 30, "18947": 30, "81": 30, "3666": 30, "64": 30, "1417": 30, "96": 30, "4744": 30, "981658": 30, "908": 30, "21904": 30, "8077": 30, "3617": 30, "43": 30, "3626": 30, "181477": 30, "573": 30, "22764": 30, "62": 30, "2086": 30, "602": 30, "5926": 30, "381296": 30, "24185": 30, "950": 30, "2312": 30, "85": 30, "425723": 30, "27390": 30, "2585": 30, "1057": 30, "1305": 30, "444251": 30, "endog": 30, "account": 30, "impact": 30, "demand": 30, "problem": 30, "principl": 30, "ourselv": 30, "pred": [30, 31], "exog_model": 30, "exog_pr": 30, "exog_err": 30, "exog_smap": 30, "cmdstanpi": 30, "chain": 30, "scene": 30, "inspect": 30, "repeatrecentconfig": 31, "repeatrec": 31, "most_recent_valu": 31, "train_forecast": 31, "notion": 31, "_forecast": 31, "els": 31, "repeat": 31, "upcom": 31, "care": 31, "val": 31, "pend": 31, "prev_forecast": 31, "849": 31, "11it": 31, "h1": 31, "605": 31, "559": 31, "820": 31, "790": 31, "784": 31, "752": 31, "684": 31, "166": 31, "straightforward": 31, "stub": 31, "header": 31, "heavi": 31, "lift": 31, "repeatrecentdetectorconfig": 31, "_default_post_rul": 31, "roughli": 31, "repeatrecentdetector": 31, "212986": 31, "120839": 31, "000000": 31, "171719": 31, "305278": 31, "190799": 31, "038160": 31, "203519": 31, "082679": 31, "349798": 31, "413397": 31, "756835": 31, "966714": 31, "202032": 31, "291072": 31, "380111": 31, "341952": 31, "246552": 31, "163873": 31, "953994": 31, "686876": 31, "286198": 31, "178079": 31, "559676": 31, "928554": 31, "329232": 31, "348311": 31, "316512": 31, "081193": 31, "540597": 31, "426117": 31, "108119": 31, "311638": 31, "712316": 31, "214752": 31, "373751": 31, "399191": 31, "221112": 31, "049393": 31, "737755": 31, "381598": 31, "076320": 31, "489717": 31, "814075": 31, "979434": 31, "922194": 31, "782275": 31, "642356": 31, "457917": 31, "222599": 31, "158999": 31}, "objects": {"": [[1, 0, 0, "-", "merlion"], [15, 0, 0, "-", "ts_datasets"]], "merlion": [[2, 0, 0, "-", "evaluate"], [3, 0, 0, "-", "models"], [1, 0, 0, "-", "plot"], [11, 0, 0, "-", "post_process"], [12, 0, 0, "-", "spark"], [13, 0, 0, "-", "transform"], [14, 0, 0, "-", "utils"]], "merlion.evaluate": [[2, 0, 0, "-", "anomaly"], [2, 0, 0, "-", "base"], [2, 0, 0, "-", "forecast"]], "merlion.evaluate.anomaly": [[2, 1, 1, "", "ScoreType"], [2, 1, 1, "", "TSADEvaluator"], [2, 1, 1, "", "TSADEvaluatorConfig"], [2, 1, 1, "", "TSADMetric"], [2, 1, 1, "", "TSADScoreAccumulator"], [2, 5, 1, "", "accumulate_tsad_score"]], "merlion.evaluate.anomaly.ScoreType": [[2, 2, 1, "", "PointAdjusted"], [2, 2, 1, "", "Pointwise"], [2, 2, 1, "", "RevisedPointAdjusted"]], "merlion.evaluate.anomaly.TSADEvaluator": [[2, 2, 1, "", "config_class"], [2, 3, 1, "", "default_retrain_kwargs"], [2, 3, 1, "", "evaluate"], [2, 3, 1, "", "get_predict"], [2, 4, 1, "", "max_delay_sec"], [2, 4, 1, "", "max_early_sec"]], "merlion.evaluate.anomaly.TSADMetric": [[2, 2, 1, "", "F1"], [2, 2, 1, "", "F2"], [2, 2, 1, "", "F5"], [2, 2, 1, "", "MeanTimeToDetect"], [2, 2, 1, "", "NABScore"], [2, 2, 1, "", "NABScoreLowFN"], [2, 2, 1, "", "NABScoreLowFP"], [2, 2, 1, "", "PointAdjustedF1"], [2, 2, 1, "", "PointAdjustedPrecision"], [2, 2, 1, "", "PointAdjustedRecall"], [2, 2, 1, "", "PointwiseF1"], [2, 2, 1, "", "PointwisePrecision"], [2, 2, 1, "", "PointwiseRecall"], [2, 2, 1, "", "Precision"], [2, 2, 1, "", "Recall"]], "merlion.evaluate.anomaly.TSADScoreAccumulator": [[2, 3, 1, "", "f1"], [2, 3, 1, "", "f_beta"], [2, 3, 1, "", "mean_anomaly_duration"], [2, 3, 1, "", "mean_detected_anomaly_duration"], [2, 3, 1, "", "mean_time_to_detect"], [2, 3, 1, "", "nab_score"], [2, 3, 1, "", "precision"], [2, 3, 1, "", "recall"]], "merlion.evaluate.base": [[2, 1, 1, "", "EvaluatorBase"], [2, 1, 1, "", "EvaluatorConfig"]], "merlion.evaluate.base.EvaluatorBase": [[2, 4, 1, "", "cadence"], [2, 2, 1, "", "config_class"], [2, 3, 1, "", "default_retrain_kwargs"], [2, 3, 1, "", "default_train_kwargs"], [2, 3, 1, "", "evaluate"], [2, 3, 1, "", "get_predict"], [2, 4, 1, "", "horizon"], [2, 4, 1, "", "retrain_freq"], [2, 4, 1, "", "train_window"]], "merlion.evaluate.base.EvaluatorConfig": [[2, 4, 1, "", "cadence"], [2, 4, 1, "", "horizon"], [2, 3, 1, "", "to_dict"]], "merlion.evaluate.forecast": [[2, 1, 1, "", "ForecastEvaluator"], [2, 1, 1, "", "ForecastEvaluatorConfig"], [2, 1, 1, "", "ForecastMetric"], [2, 1, 1, "", "ForecastScoreAccumulator"], [2, 5, 1, "", "accumulate_forecast_score"]], "merlion.evaluate.forecast.ForecastEvaluator": [[2, 4, 1, "", "cadence"], [2, 2, 1, "", "config_class"], [2, 3, 1, "", "evaluate"], [2, 4, 1, "", "horizon"]], "merlion.evaluate.forecast.ForecastEvaluatorConfig": [[2, 4, 1, "", "cadence"], [2, 4, 1, "", "horizon"]], "merlion.evaluate.forecast.ForecastMetric": [[2, 2, 1, "", "MAE"], [2, 2, 1, "", "MARRE"], [2, 2, 1, "", "MASE"], [2, 2, 1, "", "MSIS"], [2, 2, 1, "", "RMSE"], [2, 2, 1, "", "RMSPE"], [2, 2, 1, "", "sMAPE"]], "merlion.evaluate.forecast.ForecastScoreAccumulator": [[2, 3, 1, "", "check_before_eval"], [2, 3, 1, "", "mae"], [2, 3, 1, "", "marre"], [2, 3, 1, "", "mase"], [2, 3, 1, "", "msis"], [2, 3, 1, "", "rmse"], [2, 3, 1, "", "rmspe"], [2, 3, 1, "", "smape"]], "merlion.models": [[4, 0, 0, "-", "anomaly"], [7, 0, 0, "-", "automl"], [3, 0, 0, "-", "base"], [3, 0, 0, "-", "defaults"], [8, 0, 0, "-", "ensemble"], [3, 0, 0, "-", "factory"], [9, 0, 0, "-", "forecast"], [3, 0, 0, "-", "layers"], [10, 0, 0, "-", "utils"]], "merlion.models.anomaly": [[4, 0, 0, "-", "autoencoder"], [4, 0, 0, "-", "base"], [5, 0, 0, "-", "change_point"], [4, 0, 0, "-", "dagmm"], [4, 0, 0, "-", "dbl"], [4, 0, 0, "-", "deep_point_anomaly_detector"], [6, 0, 0, "-", "forecast_based"], [4, 0, 0, "-", "isolation_forest"], [4, 0, 0, "-", "lstm_ed"], [4, 0, 0, "-", "random_cut_forest"], [4, 0, 0, "-", "spectral_residual"], [4, 0, 0, "-", "stat_threshold"], [4, 0, 0, "-", "vae"], [4, 0, 0, "-", "windstats"], [4, 0, 0, "-", "zms"]], "merlion.models.anomaly.autoencoder": [[4, 1, 1, "", "AutoEncoder"], [4, 1, 1, "", "AutoEncoderConfig"]], "merlion.models.anomaly.autoencoder.AutoEncoder": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.base": [[4, 1, 1, "", "DetectorBase"], [4, 1, 1, "", "DetectorConfig"], [4, 1, 1, "", "MultipleTimeseriesDetectorMixin"], [4, 1, 1, "", "NoCalibrationDetectorConfig"]], "merlion.models.anomaly.base.DetectorBase": [[4, 4, 1, "", "calibrator"], [4, 2, 1, "", "config_class"], [4, 3, 1, "", "get_anomaly_label"], [4, 3, 1, "", "get_anomaly_score"], [4, 3, 1, "", "get_figure"], [4, 3, 1, "", "plot_anomaly"], [4, 3, 1, "", "plot_anomaly_plotly"], [4, 4, 1, "", "post_rule"], [4, 4, 1, "", "threshold"], [4, 3, 1, "", "train"], [4, 3, 1, "", "train_post_process"]], "merlion.models.anomaly.base.DetectorConfig": [[4, 2, 1, "", "calibrator"], [4, 2, 1, "", "enable_calibrator"], [4, 2, 1, "", "enable_threshold"], [4, 3, 1, "", "from_dict"], [4, 4, 1, "", "post_rule"], [4, 2, 1, "", "threshold"]], "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin": [[4, 3, 1, "", "train_multiple"]], "merlion.models.anomaly.base.NoCalibrationDetectorConfig": [[4, 4, 1, "", "calibrator"], [4, 4, 1, "", "enable_calibrator"]], "merlion.models.anomaly.change_point": [[5, 0, 0, "-", "bocpd"]], "merlion.models.anomaly.change_point.bocpd": [[5, 1, 1, "", "BOCPD"], [5, 1, 1, "", "BOCPDConfig"], [5, 1, 1, "", "ChangeKind"]], "merlion.models.anomaly.change_point.bocpd.BOCPD": [[5, 4, 1, "", "change_kind"], [5, 2, 1, "", "config_class"], [5, 4, 1, "", "cp_prior"], [5, 3, 1, "", "get_anomaly_score"], [5, 3, 1, "", "get_figure"], [5, 4, 1, "", "lag"], [5, 4, 1, "", "last_train_time"], [5, 4, 1, "", "min_likelihood"], [5, 4, 1, "", "n_seen"], [5, 4, 1, "", "require_even_sampling"], [5, 4, 1, "", "require_univariate"], [5, 3, 1, "", "train_pre_process"], [5, 3, 1, "", "update"]], "merlion.models.anomaly.change_point.bocpd.BOCPDConfig": [[5, 4, 1, "", "change_kind"]], "merlion.models.anomaly.change_point.bocpd.ChangeKind": [[5, 2, 1, "", "Auto"], [5, 2, 1, "", "LevelShift"], [5, 2, 1, "", "TrendChange"]], "merlion.models.anomaly.dagmm": [[4, 1, 1, "", "DAGMM"], [4, 1, 1, "", "DAGMMConfig"]], "merlion.models.anomaly.dagmm.DAGMM": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"], [4, 3, 1, "", "train_multiple"]], "merlion.models.anomaly.dbl": [[4, 1, 1, "", "DynamicBaseline"], [4, 1, 1, "", "DynamicBaselineConfig"], [4, 1, 1, "", "Segment"], [4, 1, 1, "", "Segmenter"], [4, 1, 1, "", "Trend"]], "merlion.models.anomaly.dbl.DynamicBaseline": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "data"], [4, 4, 1, "", "fixed_period"], [4, 3, 1, "", "get_baseline"], [4, 3, 1, "", "get_baseline_figure"], [4, 3, 1, "", "get_relevant"], [4, 4, 1, "", "has_fixed_period"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"], [4, 4, 1, "", "train_window"], [4, 3, 1, "", "update"]], "merlion.models.anomaly.dbl.DynamicBaselineConfig": [[4, 3, 1, "", "determine_train_window"], [4, 4, 1, "", "fixed_period"], [4, 3, 1, "", "to_dict"], [4, 4, 1, "", "trends"]], "merlion.models.anomaly.dbl.Segment": [[4, 3, 1, "", "add"], [4, 3, 1, "", "drop"], [4, 3, 1, "", "score"]], "merlion.models.anomaly.dbl.Segmenter": [[4, 3, 1, "", "add"], [4, 2, 1, "", "day_delta"], [4, 3, 1, "", "day_key"], [4, 3, 1, "", "drop"], [4, 3, 1, "", "get_baseline"], [4, 2, 1, "", "hour_delta"], [4, 2, 1, "", "min_delta"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "score"], [4, 3, 1, "", "segment_key"], [4, 4, 1, "", "trend"], [4, 4, 1, "", "trends"], [4, 3, 1, "", "weekday_key"], [4, 4, 1, "", "wind_delta"], [4, 3, 1, "", "window_key"], [4, 2, 1, "", "zero_delta"]], "merlion.models.anomaly.dbl.Trend": [[4, 2, 1, "", "daily"], [4, 2, 1, "", "monthly"], [4, 2, 1, "", "weekly"]], "merlion.models.anomaly.deep_point_anomaly_detector": [[4, 1, 1, "", "DeepPointAnomalyDetector"], [4, 1, 1, "", "DeepPointAnomalyDetectorConfig"]], "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.forecast_based": [[6, 0, 0, "-", "arima"], [6, 0, 0, "-", "base"], [6, 0, 0, "-", "ets"], [6, 0, 0, "-", "lstm"], [6, 0, 0, "-", "mses"], [6, 0, 0, "-", "prophet"], [6, 0, 0, "-", "sarima"]], "merlion.models.anomaly.forecast_based.arima": [[6, 1, 1, "", "ArimaDetector"], [6, 1, 1, "", "ArimaDetectorConfig"]], "merlion.models.anomaly.forecast_based.arima.ArimaDetector": [[6, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.base": [[6, 1, 1, "", "ForecastingDetectorBase"]], "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase": [[6, 3, 1, "", "forecast_to_anom_score"], [6, 3, 1, "", "get_anomaly_label"], [6, 3, 1, "", "get_anomaly_score"], [6, 3, 1, "", "get_figure"], [6, 3, 1, "", "plot_anomaly"], [6, 3, 1, "", "plot_anomaly_plotly"], [6, 3, 1, "", "plot_forecast"], [6, 3, 1, "", "plot_forecast_plotly"], [6, 3, 1, "", "train"], [6, 3, 1, "", "train_post_process"]], "merlion.models.anomaly.forecast_based.ets": [[6, 1, 1, "", "ETSDetector"], [6, 1, 1, "", "ETSDetectorConfig"]], "merlion.models.anomaly.forecast_based.ets.ETSDetector": [[6, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.lstm": [[6, 1, 1, "", "LSTMDetector"], [6, 1, 1, "", "LSTMDetectorConfig"]], "merlion.models.anomaly.forecast_based.lstm.LSTMDetector": [[6, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.mses": [[6, 1, 1, "", "MSESDetector"], [6, 1, 1, "", "MSESDetectorConfig"]], "merlion.models.anomaly.forecast_based.mses.MSESDetector": [[6, 2, 1, "", "config_class"], [6, 3, 1, "", "get_anomaly_score"], [6, 4, 1, "", "online_updates"]], "merlion.models.anomaly.forecast_based.prophet": [[6, 1, 1, "", "ProphetDetector"], [6, 1, 1, "", "ProphetDetectorConfig"]], "merlion.models.anomaly.forecast_based.prophet.ProphetDetector": [[6, 2, 1, "", "config_class"]], "merlion.models.anomaly.forecast_based.sarima": [[6, 1, 1, "", "SarimaDetector"], [6, 1, 1, "", "SarimaDetectorConfig"]], "merlion.models.anomaly.forecast_based.sarima.SarimaDetector": [[6, 2, 1, "", "config_class"]], "merlion.models.anomaly.isolation_forest": [[4, 1, 1, "", "IsolationForest"], [4, 1, 1, "", "IsolationForestConfig"]], "merlion.models.anomaly.isolation_forest.IsolationForest": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.lstm_ed": [[4, 1, 1, "", "LSTMED"], [4, 1, 1, "", "LSTMEDConfig"]], "merlion.models.anomaly.lstm_ed.LSTMED": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.random_cut_forest": [[4, 1, 1, "", "JVMSingleton"], [4, 1, 1, "", "RandomCutForest"], [4, 1, 1, "", "RandomCutForestConfig"]], "merlion.models.anomaly.random_cut_forest.JVMSingleton": [[4, 3, 1, "", "gateway"]], "merlion.models.anomaly.random_cut_forest.RandomCutForest": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "online_updates"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig": [[4, 4, 1, "", "java_params"]], "merlion.models.anomaly.spectral_residual": [[4, 1, 1, "", "SpectralResidual"], [4, 1, 1, "", "SpectralResidualConfig"]], "merlion.models.anomaly.spectral_residual.SpectralResidual": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"], [4, 4, 1, "", "target_seq_index"]], "merlion.models.anomaly.stat_threshold": [[4, 1, 1, "", "StatThreshold"], [4, 1, 1, "", "StatThresholdConfig"]], "merlion.models.anomaly.stat_threshold.StatThreshold": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.vae": [[4, 1, 1, "", "VAE"], [4, 1, 1, "", "VAEConfig"]], "merlion.models.anomaly.vae.VAE": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.windstats": [[4, 1, 1, "", "WindStats"], [4, 1, 1, "", "WindStatsConfig"]], "merlion.models.anomaly.windstats.WindStats": [[4, 2, 1, "", "config_class"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"]], "merlion.models.anomaly.zms": [[4, 1, 1, "", "ZMS"], [4, 1, 1, "", "ZMSConfig"]], "merlion.models.anomaly.zms.ZMS": [[4, 4, 1, "", "adjust_z_scores"], [4, 2, 1, "", "config_class"], [4, 4, 1, "", "lag_inflation"], [4, 4, 1, "", "lag_scales"], [4, 4, 1, "", "n_lags"], [4, 4, 1, "", "require_even_sampling"], [4, 4, 1, "", "require_univariate"], [4, 3, 1, "", "train"]], "merlion.models.anomaly.zms.ZMSConfig": [[4, 4, 1, "", "full_transform"], [4, 4, 1, "", "n_lags"], [4, 3, 1, "", "to_dict"]], "merlion.models.automl": [[7, 0, 0, "-", "autoets"], [7, 0, 0, "-", "autoprophet"], [7, 0, 0, "-", "autosarima"], [7, 0, 0, "-", "base"], [7, 0, 0, "-", "search"], [7, 0, 0, "-", "seasonality"]], "merlion.models.automl.autoets": [[7, 1, 1, "", "AutoETS"], [7, 1, 1, "", "AutoETSConfig"]], "merlion.models.automl.autoets.AutoETS": [[7, 2, 1, "", "config_class"], [7, 3, 1, "", "generate_theta"], [7, 3, 1, "", "get_ic"], [7, 3, 1, "", "set_theta"]], "merlion.models.automl.autoprophet": [[7, 1, 1, "", "AutoProphet"], [7, 1, 1, "", "AutoProphetConfig"]], "merlion.models.automl.autoprophet.AutoProphet": [[7, 2, 1, "", "config_class"], [7, 3, 1, "", "generate_theta"], [7, 3, 1, "", "get_ic"], [7, 3, 1, "", "set_theta"]], "merlion.models.automl.autoprophet.AutoProphetConfig": [[7, 4, 1, "", "multi_seasonality"]], "merlion.models.automl.autosarima": [[7, 1, 1, "", "AutoSarima"], [7, 1, 1, "", "AutoSarimaConfig"]], "merlion.models.automl.autosarima.AutoSarima": [[7, 2, 1, "", "config_class"], [7, 3, 1, "", "evaluate_theta"], [7, 3, 1, "", "generate_theta"], [7, 3, 1, "", "set_theta"]], "merlion.models.automl.autosarima.AutoSarimaConfig": [[7, 4, 1, "", "order"], [7, 4, 1, "", "seasonal_order"]], "merlion.models.automl.base": [[7, 1, 1, "", "AutoMLMixIn"], [7, 1, 1, "", "ICAutoMLForecaster"], [7, 1, 1, "", "ICConfig"], [7, 1, 1, "", "InformationCriterion"]], "merlion.models.automl.base.AutoMLMixIn": [[7, 3, 1, "", "evaluate_theta"], [7, 3, 1, "", "generate_theta"], [7, 3, 1, "", "set_theta"]], "merlion.models.automl.base.ICAutoMLForecaster": [[7, 2, 1, "", "config_class"], [7, 3, 1, "", "evaluate_theta"], [7, 3, 1, "", "get_ic"], [7, 4, 1, "", "information_criterion"]], "merlion.models.automl.base.ICConfig": [[7, 4, 1, "", "information_criterion"]], "merlion.models.automl.base.InformationCriterion": [[7, 2, 1, "", "AIC"], [7, 2, 1, "", "AICc"], [7, 2, 1, "", "BIC"]], "merlion.models.automl.search": [[7, 1, 1, "", "GridSearch"]], "merlion.models.automl.seasonality": [[7, 1, 1, "", "PeriodicityStrategy"], [7, 1, 1, "", "SeasonalityConfig"], [7, 1, 1, "", "SeasonalityLayer"], [7, 1, 1, "", "SeasonalityModel"]], "merlion.models.automl.seasonality.PeriodicityStrategy": [[7, 2, 1, "", "ACF"], [7, 2, 1, "", "All"], [7, 2, 1, "", "Max"], [7, 2, 1, "", "Min"]], "merlion.models.automl.seasonality.SeasonalityConfig": [[7, 4, 1, "", "multi_seasonality"], [7, 4, 1, "", "periodicity_strategy"]], "merlion.models.automl.seasonality.SeasonalityLayer": [[7, 2, 1, "", "config_class"], [7, 3, 1, "", "evaluate_theta"], [7, 3, 1, "", "generate_theta"], [7, 4, 1, "", "max_lag"], [7, 4, 1, "", "multi_seasonality"], [7, 4, 1, "", "periodicity_strategy"], [7, 4, 1, "", "pval"], [7, 4, 1, "", "require_even_sampling"], [7, 4, 1, "", "require_univariate"], [7, 3, 1, "", "set_theta"]], "merlion.models.automl.seasonality.SeasonalityModel": [[7, 3, 1, "", "set_seasonality"]], "merlion.models.base": [[3, 1, 1, "", "Config"], [3, 1, 1, "", "ModelBase"], [3, 1, 1, "", "MultipleTimeseriesModelMixin"], [3, 1, 1, "", "NormalizingConfig"]], "merlion.models.base.Config": [[3, 2, 1, "", "dim"], [3, 2, 1, "", "filename"], [3, 3, 1, "", "from_dict"], [3, 3, 1, "", "get_unused_kwargs"], [3, 3, 1, "", "to_dict"], [3, 2, 1, "", "transform"]], "merlion.models.base.ModelBase": [[3, 4, 1, "", "auto_align"], [3, 4, 1, "", "base_model"], [3, 2, 1, "", "config_class"], [3, 4, 1, "", "dim"], [3, 2, 1, "", "filename"], [3, 3, 1, "", "from_bytes"], [3, 4, 1, "", "last_train_time"], [3, 3, 1, "", "load"], [3, 4, 1, "", "require_even_sampling"], [3, 4, 1, "", "require_univariate"], [3, 3, 1, "", "reset"], [3, 3, 1, "", "save"], [3, 4, 1, "", "timedelta"], [3, 3, 1, "", "to_bytes"], [3, 3, 1, "", "train"], [3, 2, 1, "", "train_data"], [3, 3, 1, "", "train_post_process"], [3, 3, 1, "", "train_pre_process"], [3, 4, 1, "", "transform"], [3, 3, 1, "", "transform_time_series"]], "merlion.models.base.MultipleTimeseriesModelMixin": [[3, 3, 1, "", "train_multiple"]], "merlion.models.base.NormalizingConfig": [[3, 4, 1, "", "full_transform"], [3, 4, 1, "", "transform"]], "merlion.models.defaults": [[3, 1, 1, "", "DefaultDetector"], [3, 1, 1, "", "DefaultDetectorConfig"], [3, 1, 1, "", "DefaultForecaster"], [3, 1, 1, "", "DefaultForecasterConfig"]], "merlion.models.defaults.DefaultDetector": [[3, 2, 1, "", "config_class"], [3, 4, 1, "", "granularity"], [3, 3, 1, "", "reset"], [3, 3, 1, "", "train"]], "merlion.models.defaults.DefaultForecaster": [[3, 2, 1, "", "config_class"], [3, 4, 1, "", "granularity"], [3, 3, 1, "", "reset"], [3, 3, 1, "", "train"]], "merlion.models.ensemble": [[8, 0, 0, "-", "anomaly"], [8, 0, 0, "-", "base"], [8, 0, 0, "-", "combine"], [8, 0, 0, "-", "forecast"]], "merlion.models.ensemble.anomaly": [[8, 1, 1, "", "DetectorEnsemble"], [8, 1, 1, "", "DetectorEnsembleConfig"], [8, 1, 1, "", "DetectorEnsembleTrainConfig"]], "merlion.models.ensemble.anomaly.DetectorEnsemble": [[8, 2, 1, "", "config_class"], [8, 4, 1, "", "per_model_threshold"], [8, 4, 1, "", "require_even_sampling"], [8, 4, 1, "", "require_univariate"]], "merlion.models.ensemble.anomaly.DetectorEnsembleConfig": [[8, 4, 1, "", "per_model_threshold"]], "merlion.models.ensemble.base": [[8, 1, 1, "", "EnsembleBase"], [8, 1, 1, "", "EnsembleConfig"], [8, 1, 1, "", "EnsembleTrainConfig"]], "merlion.models.ensemble.base.EnsembleBase": [[8, 4, 1, "", "combiner"], [8, 2, 1, "", "config_class"], [8, 3, 1, "", "get_max_common_horizon"], [8, 4, 1, "", "models"], [8, 4, 1, "", "models_used"], [8, 3, 1, "", "reset"], [8, 3, 1, "", "save"], [8, 3, 1, "", "to_bytes"], [8, 3, 1, "", "train_combiner"], [8, 3, 1, "", "train_valid_split"]], "merlion.models.ensemble.base.EnsembleConfig": [[8, 2, 1, "", "models"], [8, 3, 1, "", "to_dict"]], "merlion.models.ensemble.combine": [[8, 1, 1, "", "CombinerBase"], [8, 1, 1, "", "CombinerFactory"], [8, 1, 1, "", "Max"], [8, 1, 1, "", "Mean"], [8, 1, 1, "", "Median"], [8, 1, 1, "", "MetricWeightedMean"], [8, 1, 1, "", "ModelSelector"]], "merlion.models.ensemble.combine.CombinerBase": [[8, 3, 1, "", "__call__"], [8, 3, 1, "", "from_dict"], [8, 3, 1, "", "get_model_used"], [8, 4, 1, "", "models_used"], [8, 4, 1, "", "requires_training"], [8, 3, 1, "", "reset"], [8, 3, 1, "", "set_model_used"], [8, 3, 1, "", "to_dict"], [8, 3, 1, "", "train"]], "merlion.models.ensemble.combine.CombinerFactory": [[8, 3, 1, "", "create"]], "merlion.models.ensemble.combine.Mean": [[8, 4, 1, "", "weights"]], "merlion.models.ensemble.combine.MetricWeightedMean": [[8, 4, 1, "", "weights"]], "merlion.models.ensemble.combine.ModelSelector": [[8, 3, 1, "", "from_dict"], [8, 4, 1, "", "invert"], [8, 4, 1, "", "requires_training"], [8, 3, 1, "", "to_dict"], [8, 3, 1, "", "train"]], "merlion.models.ensemble.forecast": [[8, 1, 1, "", "ForecasterEnsemble"], [8, 1, 1, "", "ForecasterEnsembleConfig"]], "merlion.models.ensemble.forecast.ForecasterEnsemble": [[8, 2, 1, "", "config_class"], [8, 4, 1, "", "require_even_sampling"], [8, 3, 1, "", "resample_time_stamps"], [8, 3, 1, "", "train_combiner"], [8, 3, 1, "", "train_pre_process"]], "merlion.models.ensemble.forecast.ForecasterEnsembleConfig": [[8, 4, 1, "", "target_seq_index"]], "merlion.models.factory": [[3, 1, 1, "", "ModelFactory"], [3, 5, 1, "", "instantiate_or_copy_model"]], "merlion.models.factory.ModelFactory": [[3, 3, 1, "", "create"], [3, 3, 1, "", "get_model_class"], [3, 3, 1, "", "load"], [3, 3, 1, "", "load_bytes"]], "merlion.models.forecast": [[9, 0, 0, "-", "arima"], [9, 0, 0, "-", "base"], [9, 0, 0, "-", "ets"], [9, 0, 0, "-", "lstm"], [9, 0, 0, "-", "prophet"], [9, 0, 0, "-", "sarima"], [9, 0, 0, "-", "sklearn_base"], [9, 0, 0, "-", "smoother"], [9, 0, 0, "-", "trees"], [9, 0, 0, "-", "vector_ar"]], "merlion.models.forecast.arima": [[9, 1, 1, "", "Arima"], [9, 1, 1, "", "ArimaConfig"]], "merlion.models.forecast.arima.Arima": [[9, 2, 1, "", "config_class"]], "merlion.models.forecast.arima.ArimaConfig": [[9, 4, 1, "", "seasonal_order"]], "merlion.models.forecast.base": [[9, 1, 1, "", "ForecasterBase"], [9, 1, 1, "", "ForecasterConfig"], [9, 1, 1, "", "ForecasterExogBase"], [9, 1, 1, "", "ForecasterExogConfig"]], "merlion.models.forecast.base.ForecasterBase": [[9, 3, 1, "", "batch_forecast"], [9, 2, 1, "", "config_class"], [9, 3, 1, "", "forecast"], [9, 3, 1, "", "get_figure"], [9, 4, 1, "", "invert_transform"], [9, 4, 1, "", "max_forecast_steps"], [9, 3, 1, "", "plot_forecast"], [9, 3, 1, "", "plot_forecast_plotly"], [9, 4, 1, "", "require_univariate"], [9, 3, 1, "", "resample_time_stamps"], [9, 4, 1, "", "supports_exog"], [9, 2, 1, "", "target_name"], [9, 4, 1, "", "target_seq_index"], [9, 3, 1, "", "train"], [9, 3, 1, "", "train_post_process"], [9, 3, 1, "", "train_pre_process"], [9, 3, 1, "", "transform_exog_data"]], "merlion.models.forecast.base.ForecasterConfig": [[9, 2, 1, "", "invert_transform"], [9, 2, 1, "", "max_forecast_steps"], [9, 2, 1, "", "target_seq_index"]], "merlion.models.forecast.base.ForecasterExogBase": [[9, 4, 1, "", "exog_aggregation_policy"], [9, 4, 1, "", "exog_missing_value_policy"], [9, 4, 1, "", "exog_transform"], [9, 4, 1, "", "supports_exog"], [9, 3, 1, "", "transform_exog_data"]], "merlion.models.forecast.base.ForecasterExogConfig": [[9, 4, 1, "", "exog_aggregation_policy"], [9, 4, 1, "", "exog_missing_value_policy"], [9, 2, 1, "", "exog_transform"]], "merlion.models.forecast.ets": [[9, 1, 1, "", "ETS"], [9, 1, 1, "", "ETSConfig"]], "merlion.models.forecast.ets.ETS": [[9, 2, 1, "", "config_class"], [9, 4, 1, "", "damped_trend"], [9, 4, 1, "", "error"], [9, 4, 1, "", "require_even_sampling"], [9, 4, 1, "", "seasonal"], [9, 4, 1, "", "seasonal_periods"], [9, 3, 1, "", "set_seasonality"], [9, 4, 1, "", "trend"]], "merlion.models.forecast.lstm": [[9, 1, 1, "", "LSTM"], [9, 1, 1, "", "LSTMConfig"], [9, 1, 1, "", "LSTMTrainConfig"]], "merlion.models.forecast.lstm.LSTM": [[9, 2, 1, "", "config_class"], [9, 4, 1, "", "require_even_sampling"]], "merlion.models.forecast.prophet": [[9, 1, 1, "", "Prophet"], [9, 1, 1, "", "ProphetConfig"]], "merlion.models.forecast.prophet.Prophet": [[9, 4, 1, "", "add_seasonality"], [9, 2, 1, "", "config_class"], [9, 4, 1, "", "daily_seasonality"], [9, 4, 1, "", "holidays"], [9, 4, 1, "", "require_even_sampling"], [9, 3, 1, "", "resample_time_stamps"], [9, 4, 1, "", "seasonality_mode"], [9, 3, 1, "", "set_seasonality"], [9, 4, 1, "", "uncertainty_samples"], [9, 4, 1, "", "weekly_seasonality"], [9, 4, 1, "", "yearly_seasonality"]], "merlion.models.forecast.sarima": [[9, 1, 1, "", "Sarima"], [9, 1, 1, "", "SarimaConfig"]], "merlion.models.forecast.sarima.Sarima": [[9, 2, 1, "", "config_class"], [9, 4, 1, "", "order"], [9, 4, 1, "", "require_even_sampling"], [9, 4, 1, "", "seasonal_order"], [9, 3, 1, "", "set_seasonality"]], "merlion.models.forecast.sklearn_base": [[9, 1, 1, "", "SKLearnForecaster"], [9, 1, 1, "", "SKLearnForecasterConfig"]], "merlion.models.forecast.sklearn_base.SKLearnForecaster": [[9, 2, 1, "", "config_class"], [9, 4, 1, "", "maxlags"], [9, 2, 1, "", "model"], [9, 4, 1, "", "prediction_stride"], [9, 4, 1, "", "require_even_sampling"], [9, 4, 1, "", "require_univariate"]], "merlion.models.forecast.smoother": [[9, 1, 1, "", "DeltaEstimator"], [9, 1, 1, "", "DeltaStats"], [9, 1, 1, "", "MSES"], [9, 1, 1, "", "MSESConfig"], [9, 1, 1, "", "MSESTrainConfig"]], "merlion.models.forecast.smoother.DeltaEstimator": [[9, 4, 1, "", "acc_max_scale"], [9, 3, 1, "", "acceleration"], [9, 4, 1, "", "data"], [9, 3, 1, "", "delta_hat"], [9, 3, 1, "", "loss_err"], [9, 4, 1, "", "max_scale"], [9, 3, 1, "", "neg_err"], [9, 3, 1, "", "pos_err"], [9, 3, 1, "", "process_losses"], [9, 3, 1, "", "train"], [9, 3, 1, "", "vel_err"], [9, 3, 1, "", "velocity"], [9, 4, 1, "", "x"]], "merlion.models.forecast.smoother.DeltaStats": [[9, 4, 1, "", "lag"], [9, 3, 1, "", "tune"], [9, 3, 1, "", "update_acceleration"], [9, 3, 1, "", "update_loss"], [9, 3, 1, "", "update_velocity"]], "merlion.models.forecast.smoother.MSES": [[9, 4, 1, "", "backsteps"], [9, 2, 1, "", "config_class"], [9, 3, 1, "", "marginalize_xhat_h"], [9, 4, 1, "", "max_horizon"], [9, 4, 1, "", "require_even_sampling"], [9, 4, 1, "", "rho"], [9, 3, 1, "", "update"], [9, 3, 1, "", "xhat_h"]], "merlion.models.forecast.smoother.MSESConfig": [[9, 4, 1, "", "backsteps"], [9, 4, 1, "", "max_scale"]], "merlion.models.forecast.trees": [[9, 1, 1, "", "ExtraTreesForecaster"], [9, 1, 1, "", "ExtraTreesForecasterConfig"], [9, 1, 1, "", "LGBMForecaster"], [9, 1, 1, "", "LGBMForecasterConfig"], [9, 1, 1, "", "RandomForestForecaster"], [9, 1, 1, "", "RandomForestForecasterConfig"], [9, 1, 1, "", "TreeEnsembleForecasterConfig"]], "merlion.models.forecast.trees.ExtraTreesForecaster": [[9, 2, 1, "", "config_class"]], "merlion.models.forecast.trees.LGBMForecaster": [[9, 2, 1, "", "config_class"]], "merlion.models.forecast.trees.RandomForestForecaster": [[9, 2, 1, "", "config_class"]], "merlion.models.forecast.vector_ar": [[9, 1, 1, "", "VectorAR"], [9, 1, 1, "", "VectorARConfig"]], "merlion.models.forecast.vector_ar.VectorAR": [[9, 2, 1, "", "config_class"], [9, 4, 1, "", "maxlags"], [9, 4, 1, "", "require_even_sampling"]], "merlion.models.layers": [[3, 1, 1, "", "LayeredDetector"], [3, 1, 1, "", "LayeredForecaster"], [3, 1, 1, "", "LayeredForecastingDetector"], [3, 1, 1, "", "LayeredModel"], [3, 1, 1, "", "LayeredModelConfig"]], "merlion.models.layers.LayeredDetector": [[3, 3, 1, "", "get_anomaly_score"]], "merlion.models.layers.LayeredForecaster": [[3, 3, 1, "", "forecast"]], "merlion.models.layers.LayeredModel": [[3, 4, 1, "", "base_model"], [3, 2, 1, "", "config_class"], [3, 4, 1, "", "model"], [3, 4, 1, "", "require_even_sampling"], [3, 4, 1, "", "require_univariate"], [3, 3, 1, "", "reset"], [3, 4, 1, "", "train_data"], [3, 3, 1, "", "train_post_process"], [3, 3, 1, "", "train_pre_process"]], "merlion.models.layers.LayeredModelConfig": [[3, 4, 1, "", "base_model"], [3, 3, 1, "", "from_dict"], [3, 3, 1, "", "get_unused_kwargs"], [3, 3, 1, "", "to_dict"]], "merlion.models.utils": [[10, 0, 0, "-", "autosarima_utils"], [10, 0, 0, "-", "rolling_window_dataset"]], "merlion.models.utils.autosarima_utils": [[10, 5, 1, "", "KPSS_stationaritytest"], [10, 5, 1, "", "detect_maxiter_sarima_model"], [10, 5, 1, "", "diff"], [10, 5, 1, "", "ndiffs"], [10, 5, 1, "", "nsdiffs"], [10, 5, 1, "", "seas_seasonalstationaritytest"]], "merlion.models.utils.rolling_window_dataset": [[10, 1, 1, "", "RollingWindowDataset"]], "merlion.models.utils.rolling_window_dataset.RollingWindowDataset": [[10, 4, 1, "", "autoregressive"], [10, 3, 1, "", "collate_batch"], [10, 4, 1, "", "n_points"]], "merlion.plot": [[1, 1, 1, "", "Figure"], [1, 1, 1, "", "MTSFigure"], [1, 5, 1, "", "plot_anoms"], [1, 5, 1, "", "plot_anoms_plotly"]], "merlion.plot.Figure": [[1, 3, 1, "", "get_y"], [1, 3, 1, "", "get_yhat"], [1, 3, 1, "", "get_yhat_iqr"], [1, 3, 1, "", "plot"], [1, 3, 1, "", "plot_plotly"], [1, 4, 1, "", "t0"], [1, 4, 1, "", "t_split"], [1, 4, 1, "", "tf"]], "merlion.plot.MTSFigure": [[1, 3, 1, "", "get_y"], [1, 3, 1, "", "get_yhat"], [1, 3, 1, "", "get_yhat_iqr"], [1, 3, 1, "", "plot_plotly"], [1, 4, 1, "", "t0"], [1, 4, 1, "", "t_split"], [1, 4, 1, "", "tf"]], "merlion.post_process": [[11, 0, 0, "-", "base"], [11, 0, 0, "-", "calibrate"], [11, 0, 0, "-", "factory"], [11, 0, 0, "-", "sequence"], [11, 0, 0, "-", "threshold"]], "merlion.post_process.base": [[11, 1, 1, "", "PostRuleBase"]], "merlion.post_process.base.PostRuleBase": [[11, 3, 1, "", "from_dict"], [11, 3, 1, "", "to_dict"], [11, 3, 1, "", "train"]], "merlion.post_process.calibrate": [[11, 1, 1, "", "AnomScoreCalibrator"]], "merlion.post_process.calibrate.AnomScoreCalibrator": [[11, 4, 1, "", "anchors"], [11, 3, 1, "", "train"]], "merlion.post_process.factory": [[11, 1, 1, "", "PostRuleFactory"]], "merlion.post_process.factory.PostRuleFactory": [[11, 3, 1, "", "create"], [11, 3, 1, "", "get_post_rule_class"]], "merlion.post_process.sequence": [[11, 1, 1, "", "PostRuleSequence"]], "merlion.post_process.sequence.PostRuleSequence": [[11, 3, 1, "", "from_dict"], [11, 3, 1, "", "to_dict"], [11, 3, 1, "", "train"]], "merlion.post_process.threshold": [[11, 1, 1, "", "AdaptiveAggregateAlarms"], [11, 1, 1, "", "AdaptiveThreshold"], [11, 1, 1, "", "AggregateAlarms"], [11, 1, 1, "", "Threshold"], [11, 5, 1, "", "get_adaptive_thres"]], "merlion.post_process.threshold.AdaptiveAggregateAlarms": [[11, 4, 1, "", "bin_sz"], [11, 4, 1, "", "default_hist_gap_thres"], [11, 2, 1, "", "threshold_class"]], "merlion.post_process.threshold.AdaptiveThreshold": [[11, 3, 1, "", "train"]], "merlion.post_process.threshold.AggregateAlarms": [[11, 4, 1, "", "abs_score"], [11, 4, 1, "", "alm_threshold"], [11, 3, 1, "", "filter"], [11, 4, 1, "", "suppress_secs"], [11, 2, 1, "", "threshold_class"], [11, 3, 1, "", "to_simple_threshold"], [11, 3, 1, "", "train"], [11, 4, 1, "", "window_secs"]], "merlion.post_process.threshold.Threshold": [[11, 1, 1, "", "TSADMetric"], [11, 3, 1, "", "to_simple_threshold"], [11, 3, 1, "", "train"]], "merlion.post_process.threshold.Threshold.TSADMetric": [[11, 2, 1, "", "F1"], [11, 2, 1, "", "F2"], [11, 2, 1, "", "F5"], [11, 2, 1, "", "MeanTimeToDetect"], [11, 2, 1, "", "NABScore"], [11, 2, 1, "", "NABScoreLowFN"], [11, 2, 1, "", "NABScoreLowFP"], [11, 2, 1, "", "PointAdjustedF1"], [11, 2, 1, "", "PointAdjustedPrecision"], [11, 2, 1, "", "PointAdjustedRecall"], [11, 2, 1, "", "PointwiseF1"], [11, 2, 1, "", "PointwisePrecision"], [11, 2, 1, "", "PointwiseRecall"], [11, 2, 1, "", "Precision"], [11, 2, 1, "", "Recall"]], "merlion.spark": [[12, 0, 0, "-", "dataset"], [12, 0, 0, "-", "pandas_udf"]], "merlion.spark.dataset": [[12, 6, 1, "", "TSID_COL_NAME"], [12, 5, 1, "", "add_tsid_column"], [12, 5, 1, "", "create_hier_dataset"], [12, 5, 1, "", "read_dataset"], [12, 5, 1, "", "write_dataset"]], "merlion.spark.pandas_udf": [[12, 5, 1, "", "anomaly"], [12, 5, 1, "", "forecast"], [12, 5, 1, "", "reconciliation"]], "merlion.transform": [[13, 0, 0, "-", "anomalize"], [13, 0, 0, "-", "base"], [13, 0, 0, "-", "bound"], [13, 0, 0, "-", "factory"], [13, 0, 0, "-", "moving_average"], [13, 0, 0, "-", "normalize"], [13, 0, 0, "-", "resample"], [13, 0, 0, "-", "sequence"]], "merlion.transform.anomalize": [[13, 1, 1, "", "Anomalize"], [13, 1, 1, "", "LevelShift"], [13, 1, 1, "", "Shock"], [13, 1, 1, "", "TrendChange"]], "merlion.transform.anomalize.Anomalize": [[13, 4, 1, "", "is_trained"], [13, 4, 1, "", "natural_bounds"], [13, 3, 1, "", "random_is_anom"]], "merlion.transform.anomalize.Shock": [[13, 4, 1, "", "anom_width_range"], [13, 3, 1, "", "random_anom_width"], [13, 3, 1, "", "random_is_anom"], [13, 3, 1, "", "random_sd_units"], [13, 4, 1, "", "sd_range"], [13, 3, 1, "", "train"]], "merlion.transform.anomalize.TrendChange": [[13, 3, 1, "", "random_scale"], [13, 4, 1, "", "scale_range"], [13, 3, 1, "", "train"]], "merlion.transform.base": [[13, 1, 1, "", "Identity"], [13, 1, 1, "", "InvertibleTransformBase"], [13, 1, 1, "", "TransformBase"]], "merlion.transform.base.Identity": [[13, 4, 1, "", "identity_inversion"], [13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "train"]], "merlion.transform.base.InvertibleTransformBase": [[13, 3, 1, "", "_invert"], [13, 4, 1, "", "identity_inversion"], [13, 4, 1, "", "proper_inversion"]], "merlion.transform.base.TransformBase": [[13, 3, 1, "", "_invert"], [13, 3, 1, "", "from_dict"], [13, 4, 1, "", "identity_inversion"], [13, 3, 1, "", "invert"], [13, 4, 1, "", "proper_inversion"], [13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "to_dict"], [13, 3, 1, "", "train"]], "merlion.transform.bound": [[13, 1, 1, "", "LowerUpperClip"]], "merlion.transform.bound.LowerUpperClip": [[13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "train"]], "merlion.transform.factory": [[13, 1, 1, "", "TransformFactory"]], "merlion.transform.factory.TransformFactory": [[13, 3, 1, "", "create"], [13, 3, 1, "", "get_transform_class"]], "merlion.transform.moving_average": [[13, 1, 1, "", "DifferenceTransform"], [13, 1, 1, "", "ExponentialMovingAverage"], [13, 1, 1, "", "LagTransform"], [13, 1, 1, "", "MovingAverage"], [13, 1, 1, "", "MovingPercentile"]], "merlion.transform.moving_average.DifferenceTransform": [[13, 3, 1, "", "train"]], "merlion.transform.moving_average.ExponentialMovingAverage": [[13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "train"]], "merlion.transform.moving_average.LagTransform": [[13, 3, 1, "", "compute_lag"], [13, 3, 1, "", "train"]], "merlion.transform.moving_average.MovingAverage": [[13, 3, 1, "", "train"]], "merlion.transform.moving_average.MovingPercentile": [[13, 3, 1, "", "train"]], "merlion.transform.normalize": [[13, 1, 1, "", "AbsVal"], [13, 1, 1, "", "BoxCoxTransform"], [13, 1, 1, "", "MeanVarNormalize"], [13, 1, 1, "", "MinMaxNormalize"], [13, 1, 1, "", "Rescale"]], "merlion.transform.normalize.AbsVal": [[13, 4, 1, "", "identity_inversion"], [13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "train"]], "merlion.transform.normalize.BoxCoxTransform": [[13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "train"]], "merlion.transform.normalize.MeanVarNormalize": [[13, 3, 1, "", "train"]], "merlion.transform.normalize.MinMaxNormalize": [[13, 3, 1, "", "train"]], "merlion.transform.normalize.Rescale": [[13, 4, 1, "", "is_trained"], [13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "train"]], "merlion.transform.resample": [[13, 1, 1, "", "Shingle"], [13, 1, 1, "", "TemporalResample"]], "merlion.transform.resample.Shingle": [[13, 3, 1, "", "train"]], "merlion.transform.resample.TemporalResample": [[13, 4, 1, "", "aggregation_policy"], [13, 4, 1, "", "granularity"], [13, 4, 1, "", "missing_value_policy"], [13, 4, 1, "", "proper_inversion"], [13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "train"]], "merlion.transform.sequence": [[13, 1, 1, "", "TransformSequence"], [13, 1, 1, "", "TransformStack"]], "merlion.transform.sequence.TransformSequence": [[13, 3, 1, "", "append"], [13, 3, 1, "", "from_dict"], [13, 4, 1, "", "identity_inversion"], [13, 3, 1, "", "invert"], [13, 4, 1, "", "proper_inversion"], [13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "to_dict"], [13, 3, 1, "", "train"]], "merlion.transform.sequence.TransformStack": [[13, 3, 1, "", "invert"], [13, 4, 1, "", "proper_inversion"], [13, 4, 1, "", "requires_inversion_state"], [13, 3, 1, "", "train"]], "merlion.utils": [[14, 0, 0, "-", "conj_priors"], [14, 0, 0, "-", "data_io"], [14, 0, 0, "-", "hts"], [14, 0, 0, "-", "istat"], [14, 0, 0, "-", "resample"], [14, 0, 0, "-", "time_series"], [14, 0, 0, "-", "ts_generator"]], "merlion.utils.conj_priors": [[14, 1, 1, "", "BayesianLinReg"], [14, 1, 1, "", "BayesianMVLinReg"], [14, 1, 1, "", "BetaBernoulli"], [14, 1, 1, "", "ConjPrior"], [14, 1, 1, "", "MVNormInvWishart"], [14, 1, 1, "", "NormInvGamma"], [14, 1, 1, "", "ScalarConjPrior"]], "merlion.utils.conj_priors.BayesianLinReg": [[14, 3, 1, "", "forecast"], [14, 3, 1, "", "posterior"], [14, 3, 1, "", "posterior_explicit"], [14, 3, 1, "", "update"]], "merlion.utils.conj_priors.BayesianMVLinReg": [[14, 3, 1, "", "forecast"], [14, 3, 1, "", "posterior"], [14, 3, 1, "", "posterior_explicit"], [14, 3, 1, "", "process_time_series"], [14, 3, 1, "", "update"]], "merlion.utils.conj_priors.BetaBernoulli": [[14, 3, 1, "", "forecast"], [14, 3, 1, "", "posterior"], [14, 3, 1, "", "theta_posterior"], [14, 3, 1, "", "update"]], "merlion.utils.conj_priors.ConjPrior": [[14, 3, 1, "", "forecast"], [14, 3, 1, "", "from_dict"], [14, 3, 1, "", "get_time_series_values"], [14, 3, 1, "", "posterior"], [14, 3, 1, "", "process_time_series"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "update"]], "merlion.utils.conj_priors.MVNormInvWishart": [[14, 3, 1, "", "Sigma_posterior"], [14, 3, 1, "", "forecast"], [14, 3, 1, "", "mu_posterior"], [14, 3, 1, "", "posterior"], [14, 3, 1, "", "process_time_series"], [14, 3, 1, "", "update"]], "merlion.utils.conj_priors.NormInvGamma": [[14, 3, 1, "", "forecast"], [14, 3, 1, "", "mu_posterior"], [14, 3, 1, "", "posterior"], [14, 3, 1, "", "sigma2_posterior"], [14, 3, 1, "", "update"]], "merlion.utils.conj_priors.ScalarConjPrior": [[14, 3, 1, "", "get_time_series_values"], [14, 3, 1, "", "process_time_series"]], "merlion.utils.data_io": [[14, 5, 1, "", "csv_to_time_series"], [14, 5, 1, "", "data_io_decorator"], [14, 5, 1, "", "df_to_time_series"]], "merlion.utils.hts": [[14, 5, 1, "", "minT_reconciliation"]], "merlion.utils.istat": [[14, 1, 1, "", "ExponentialMovingAverage"], [14, 1, 1, "", "IStat"], [14, 1, 1, "", "Mean"], [14, 1, 1, "", "RecencyWeightedVariance"], [14, 1, 1, "", "Variance"]], "merlion.utils.istat.ExponentialMovingAverage": [[14, 3, 1, "", "drop"], [14, 4, 1, "", "recency_weight"], [14, 4, 1, "", "value"]], "merlion.utils.istat.IStat": [[14, 3, 1, "", "add"], [14, 3, 1, "", "add_batch"], [14, 3, 1, "", "drop"], [14, 3, 1, "", "drop_batch"], [14, 4, 1, "", "n"], [14, 4, 1, "", "value"]], "merlion.utils.istat.Mean": [[14, 3, 1, "", "add"], [14, 3, 1, "", "drop"], [14, 4, 1, "", "value"]], "merlion.utils.istat.RecencyWeightedVariance": [[14, 3, 1, "", "drop"], [14, 2, 1, "", "mean_class"], [14, 4, 1, "", "recency_weight"]], "merlion.utils.istat.Variance": [[14, 3, 1, "", "add"], [14, 4, 1, "", "corrected_value"], [14, 3, 1, "", "drop"], [14, 2, 1, "", "mean_class"], [14, 4, 1, "", "sd"], [14, 4, 1, "", "se"], [14, 4, 1, "", "true_value"], [14, 4, 1, "", "value"]], "merlion.utils.resample": [[14, 1, 1, "", "AggregationPolicy"], [14, 1, 1, "", "AlignPolicy"], [14, 1, 1, "", "MissingValuePolicy"], [14, 5, 1, "", "get_gcd_timedelta"], [14, 5, 1, "", "granularity_str_to_seconds"], [14, 5, 1, "", "infer_granularity"], [14, 5, 1, "", "reindex_df"], [14, 5, 1, "", "to_pd_datetime"], [14, 5, 1, "", "to_timestamp"]], "merlion.utils.resample.AggregationPolicy": [[14, 2, 1, "", "First"], [14, 2, 1, "", "Last"], [14, 2, 1, "", "Max"], [14, 2, 1, "", "Mean"], [14, 2, 1, "", "Median"], [14, 2, 1, "", "Min"], [14, 2, 1, "", "Sum"]], "merlion.utils.resample.AlignPolicy": [[14, 2, 1, "", "FixedGranularity"], [14, 2, 1, "", "FixedReference"], [14, 2, 1, "", "InnerJoin"], [14, 2, 1, "", "OuterJoin"]], "merlion.utils.resample.MissingValuePolicy": [[14, 2, 1, "", "BFill"], [14, 2, 1, "", "FFill"], [14, 2, 1, "", "Interpolate"], [14, 2, 1, "", "Nearest"], [14, 2, 1, "", "ZFill"]], "merlion.utils.time_series": [[14, 1, 1, "", "TimeSeries"], [14, 1, 1, "", "UnivariateTimeSeries"], [14, 5, 1, "", "assert_equal_timedeltas"]], "merlion.utils.time_series.TimeSeries": [[14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__iter__"], [14, 3, 1, "", "align"], [14, 3, 1, "", "bisect"], [14, 3, 1, "", "concat"], [14, 4, 1, "", "dim"], [14, 3, 1, "", "from_pd"], [14, 3, 1, "", "from_ts_list"], [14, 4, 1, "", "is_aligned"], [14, 3, 1, "", "is_empty"], [14, 3, 1, "", "items"], [14, 4, 1, "", "names"], [14, 4, 1, "", "np_time_stamps"], [14, 3, 1, "", "rename"], [14, 4, 1, "", "shape"], [14, 3, 1, "", "squeeze"], [14, 4, 1, "", "t0"], [14, 4, 1, "", "tf"], [14, 4, 1, "", "time_stamps"], [14, 3, 1, "", "to_csv"], [14, 3, 1, "", "to_pd"], [14, 3, 1, "", "window"]], "merlion.utils.time_series.UnivariateTimeSeries": [[14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__iter__"], [14, 3, 1, "", "bisect"], [14, 3, 1, "", "concat"], [14, 3, 1, "", "copy"], [14, 3, 1, "", "empty"], [14, 3, 1, "", "from_dict"], [14, 3, 1, "", "from_pd"], [14, 3, 1, "", "is_empty"], [14, 4, 1, "", "np_time_stamps"], [14, 4, 1, "", "np_values"], [14, 4, 1, "", "t0"], [14, 4, 1, "", "tf"], [14, 4, 1, "", "time_stamps"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "to_pd"], [14, 3, 1, "", "to_ts"], [14, 4, 1, "", "values"], [14, 3, 1, "", "window"]], "merlion.utils.ts_generator": [[14, 1, 1, "", "GeneratorComposer"], [14, 1, 1, "", "GeneratorConcatenator"], [14, 1, 1, "", "TimeSeriesGenerator"]], "merlion.utils.ts_generator.GeneratorComposer": [[14, 4, 1, "", "generators"]], "merlion.utils.ts_generator.GeneratorConcatenator": [[14, 4, 1, "", "generators"], [14, 3, 1, "", "y"]], "merlion.utils.ts_generator.TimeSeriesGenerator": [[14, 3, 1, "", "generate"], [14, 4, 1, "", "n"], [14, 4, 1, "", "step"], [14, 4, 1, "", "x0"], [14, 3, 1, "", "y"]], "ts_datasets": [[16, 0, 0, "-", "anomaly"], [15, 0, 0, "-", "base"], [17, 0, 0, "-", "forecast"]], "ts_datasets.anomaly": [[16, 1, 1, "", "CustomAnomalyDataset"], [16, 1, 1, "", "IOpsCompetition"], [16, 1, 1, "", "MSL"], [16, 1, 1, "", "NAB"], [16, 1, 1, "", "SMAP"], [16, 1, 1, "", "SMD"], [16, 1, 1, "", "Synthetic"], [16, 1, 1, "", "TSADBaseDataset"], [16, 1, 1, "", "UCR"], [16, 5, 1, "", "get_dataset"]], "ts_datasets.anomaly.CustomAnomalyDataset": [[16, 3, 1, "", "check_ts_for_metadata"], [16, 4, 1, "", "metadata_cols"]], "ts_datasets.anomaly.IOpsCompetition": [[16, 4, 1, "", "max_lag_sec"]], "ts_datasets.anomaly.MSL": [[16, 2, 1, "", "url"]], "ts_datasets.anomaly.NAB": [[16, 3, 1, "", "download"], [16, 3, 1, "", "load_labels"], [16, 4, 1, "", "max_lead_sec"], [16, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.SMAP": [[16, 2, 1, "", "url"]], "ts_datasets.anomaly.SMD": [[16, 2, 1, "", "filename"], [16, 2, 1, "", "url"], [16, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.Synthetic": [[16, 2, 1, "", "anomaly_subsets"], [16, 2, 1, "", "base_ts_subsets"], [16, 2, 1, "", "valid_subsets"]], "ts_datasets.anomaly.TSADBaseDataset": [[16, 3, 1, "", "describe"], [16, 4, 1, "", "max_lag_sec"], [16, 4, 1, "", "max_lead_sec"]], "ts_datasets.anomaly.UCR": [[16, 3, 1, "", "download"]], "ts_datasets.base": [[15, 1, 1, "", "BaseDataset"]], "ts_datasets.base.BaseDataset": [[15, 3, 1, "", "describe"], [15, 2, 1, "", "metadata"], [15, 2, 1, "", "time_series"]], "ts_datasets.forecast": [[17, 1, 1, "", "CustomDataset"], [17, 1, 1, "", "EnergyPower"], [17, 1, 1, "", "M4"], [17, 1, 1, "", "SeattleTrail"], [17, 1, 1, "", "SolarPlant"], [17, 5, 1, "", "get_dataset"]], "ts_datasets.forecast.CustomDataset": [[17, 3, 1, "", "check_ts_for_metadata"], [17, 4, 1, "", "metadata_cols"]], "ts_datasets.forecast.M4": [[17, 2, 1, "", "url"], [17, 2, 1, "", "valid_subsets"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"welcom": 0, "merlion": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 23, 24, 27, 28], "": [0, 20], "document": 0, "instal": 0, "get": 0, "start": 0, "content": 0, "indic": 0, "tabl": 0, "time": [1, 20, 25, 29], "seri": [1, 20, 25, 29], "intellig": 1, "subpackag": [1, 3, 4, 15], "submodul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "plot": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "evalu": [2, 24, 25, 26, 28, 29, 31], "packag": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17], "base": [2, 3, 4, 6, 7, 8, 9, 11, 13, 15, 31], "anomali": [2, 4, 5, 6, 8, 16, 18, 19, 23, 24, 25, 26, 31], "forecast": [2, 8, 9, 17, 18, 19, 21, 22, 27, 28, 29, 30, 31], "model": [3, 4, 5, 6, 7, 8, 9, 10, 21, 24, 25, 26, 28, 29, 31], "default": [3, 21], "factori": [3, 11, 13], "layer": 3, "dbl": 4, "windstat": 4, "isolation_forest": 4, "random_cut_forest": 4, "spectral_residu": 4, "stat_threshold": 4, "zm": 4, "autoencod": 4, "vae": 4, "dagmm": 4, "lstm_ed": 4, "deep_point_anomaly_detector": 4, "change_point": 5, "bocpd": 5, "forecast_bas": 6, "arima": [6, 9], "sarima": [6, 9], "et": [6, 9], "prophet": [6, 9], "lstm": [6, 9], "mse": 6, "automl": 7, "season": 7, "search": 7, "autoet": 7, "autoprophet": 7, "autosarima": [7, 21], "ensembl": 8, "combin": 8, "sklearn_bas": 9, "smoother": 9, "vector_ar": 9, "tree": 9, "util": [10, 14], "rolling_window_dataset": 10, "autosarima_util": 10, "post_process": 11, "sequenc": [11, 13], "calibr": 11, "threshold": 11, "spark": 12, "dataset": [12, 15, 19, 21], "pandas_udf": 12, "transform": [13, 22], "bound": 13, "moving_averag": 13, "normal": 13, "resampl": [13, 14], "anom": 13, "time_seri": 14, "data_io": 14, "ht": 14, "ts_gener": 14, "conj_prior": 14, "istat": 14, "ts_dataset": [15, 16, 17], "easi": 15, "data": [15, 20], "load": [15, 19, 24, 28], "tutori": [18, 21], "exampl": [18, 26, 31], "code": 18, "basic": [18, 20], "detect": [18, 19, 23, 25, 26], "advanc": 18, "featur": [18, 20], "custom": [19, 26], "gener": 19, "purpos": 19, "broader": 19, "takeawai": 19, "format": 20, "univariatetimeseri": 20, "The": 20, "build": 20, "block": 20, "timeseri": 20, "standard": 20, "class": [20, 26, 31], "index": 20, "align": 20, "A": [20, 23, 26, 27, 31], "few": 20, "us": [20, 24, 28], "prepar": 21, "train": [21, 24, 25, 28, 29], "full": 21, "approxim": 21, "suggest": 21, "without": 21, "slower": 21, "partial": 21, "proof": 22, "concept": 22, "invers": 22, "gentl": [23, 27], "introduct": [23, 27], "how": [24, 28], "detector": [24, 31], "initi": [24, 25, 28, 29], "infer": [24, 25, 28, 29], "quantit": [24, 25, 26, 28, 29, 31], "visual": [24, 26, 28, 31], "save": [24, 28], "simul": [24, 28], "live": [24, 28], "deploy": [24, 28], "multivari": [25, 29], "ad": [26, 31], "new": [26, 31], "config": [26, 31], "run": [26, 31], "simpl": [26, 31], "post": 26, "rule": 26, "With": 30, "exogen": 30, "regressor": 30, "defin": 31}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 3, "sphinx": 57}, "alltitles": {"Welcome to Merlion\u2019s documentation!": [[0, "welcome-to-merlion-s-documentation"]], "Installation": [[0, "installation"]], "Getting Started": [[0, "getting-started"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "merlion: Time Series Intelligence": [[1, "merlion-time-series-intelligence"]], "Subpackages": [[1, "subpackages"], [3, "subpackages"], [4, "subpackages"], [15, "subpackages"]], "Submodules": [[1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"]], "merlion.plot module": [[1, "module-merlion.plot"]], "merlion.evaluate package": [[2, "merlion-evaluate-package"]], "merlion.evaluate.base module": [[2, "module-merlion.evaluate.base"]], "merlion.evaluate.anomaly module": [[2, "module-merlion.evaluate.anomaly"]], "merlion.evaluate.forecast module": [[2, "module-merlion.evaluate.forecast"]], "merlion.models package": [[3, "merlion-models-package"]], "merlion.models.defaults module": [[3, "module-merlion.models.defaults"]], "merlion.models.factory module": [[3, "module-merlion.models.factory"]], "merlion.models.base module": [[3, "module-merlion.models.base"]], "merlion.models.layers module": [[3, "module-merlion.models.layers"]], "merlion.models.anomaly package": [[4, "module-merlion.models.anomaly"]], "merlion.models.anomaly.base module": [[4, "module-merlion.models.anomaly.base"]], "merlion.models.anomaly.dbl module": [[4, "module-merlion.models.anomaly.dbl"]], "merlion.models.anomaly.windstats module": [[4, "module-merlion.models.anomaly.windstats"]], "merlion.models.anomaly.isolation_forest module": [[4, "module-merlion.models.anomaly.isolation_forest"]], "merlion.models.anomaly.random_cut_forest module": [[4, "module-merlion.models.anomaly.random_cut_forest"]], "merlion.models.anomaly.spectral_residual module": [[4, "module-merlion.models.anomaly.spectral_residual"]], "merlion.models.anomaly.stat_threshold module": [[4, "module-merlion.models.anomaly.stat_threshold"]], "merlion.models.anomaly.zms module": [[4, "module-merlion.models.anomaly.zms"]], "merlion.models.anomaly.autoencoder module": [[4, "module-merlion.models.anomaly.autoencoder"]], "merlion.models.anomaly.vae module": [[4, "module-merlion.models.anomaly.vae"]], "merlion.models.anomaly.dagmm module": [[4, "module-merlion.models.anomaly.dagmm"]], "merlion.models.anomaly.lstm_ed module": [[4, "module-merlion.models.anomaly.lstm_ed"]], "merlion.models.anomaly.deep_point_anomaly_detector module": [[4, "module-merlion.models.anomaly.deep_point_anomaly_detector"]], "merlion.models.anomaly.change_point package": [[5, "module-merlion.models.anomaly.change_point"]], "merlion.models.anomaly.change_point.bocpd module": [[5, "module-merlion.models.anomaly.change_point.bocpd"]], "merlion.models.anomaly.forecast_based package": [[6, "module-merlion.models.anomaly.forecast_based"]], "merlion.models.anomaly.forecast_based.base module": [[6, "module-merlion.models.anomaly.forecast_based.base"]], "merlion.models.anomaly.forecast_based.arima module": [[6, "module-merlion.models.anomaly.forecast_based.arima"]], "merlion.models.anomaly.forecast_based.sarima module": [[6, "module-merlion.models.anomaly.forecast_based.sarima"]], "merlion.models.anomaly.forecast_based.ets module": [[6, "module-merlion.models.anomaly.forecast_based.ets"]], "merlion.models.anomaly.forecast_based.prophet module": [[6, "module-merlion.models.anomaly.forecast_based.prophet"]], "merlion.models.anomaly.forecast_based.lstm module": [[6, "module-merlion.models.anomaly.forecast_based.lstm"]], "merlion.models.anomaly.forecast_based.mses module": [[6, "module-merlion.models.anomaly.forecast_based.mses"]], "merlion.models.automl package": [[7, "module-merlion.models.automl"]], "merlion.models.automl.base module": [[7, "module-merlion.models.automl.base"]], "merlion.models.automl.seasonality module": [[7, "module-merlion.models.automl.seasonality"]], "merlion.models.automl.search module": [[7, "module-merlion.models.automl.search"]], "merlion.models.automl.autoets module": [[7, "module-merlion.models.automl.autoets"]], "merlion.models.automl.autoprophet module": [[7, "module-merlion.models.automl.autoprophet"]], "merlion.models.automl.autosarima module": [[7, "module-merlion.models.automl.autosarima"]], "merlion.models.ensemble package": [[8, "module-merlion.models.ensemble"]], "merlion.models.ensemble.base module": [[8, "module-merlion.models.ensemble.base"]], "merlion.models.ensemble.combine module": [[8, "module-merlion.models.ensemble.combine"]], "merlion.models.ensemble.anomaly module": [[8, "module-merlion.models.ensemble.anomaly"]], "merlion.models.ensemble.forecast module": [[8, "module-merlion.models.ensemble.forecast"]], "merlion.models.forecast package": [[9, "module-merlion.models.forecast"]], "merlion.models.forecast.base module": [[9, "module-merlion.models.forecast.base"]], "merlion.models.forecast.sklearn_base module": [[9, "module-merlion.models.forecast.sklearn_base"]], "merlion.models.forecast.arima module": [[9, "module-merlion.models.forecast.arima"]], "merlion.models.forecast.sarima module": [[9, "module-merlion.models.forecast.sarima"]], "merlion.models.forecast.ets module": [[9, "module-merlion.models.forecast.ets"]], "merlion.models.forecast.prophet module": [[9, "module-merlion.models.forecast.prophet"]], "merlion.models.forecast.smoother module": [[9, "module-merlion.models.forecast.smoother"]], "merlion.models.forecast.vector_ar module": [[9, "module-merlion.models.forecast.vector_ar"]], "merlion.models.forecast.trees module": [[9, "module-merlion.models.forecast.trees"]], "merlion.models.forecast.lstm module": [[9, "module-merlion.models.forecast.lstm"]], "merlion.models.utils package": [[10, "module-merlion.models.utils"]], "merlion.models.utils.rolling_window_dataset module": [[10, "module-merlion.models.utils.rolling_window_dataset"]], "merlion.models.utils.autosarima_utils module": [[10, "module-merlion.models.utils.autosarima_utils"]], "merlion.post_process package": [[11, "merlion-post-process-package"]], "merlion.post_process.base module": [[11, "module-merlion.post_process.base"]], "merlion.post_process.factory module": [[11, "module-merlion.post_process.factory"]], "merlion.post_process.sequence module": [[11, "module-merlion.post_process.sequence"]], "merlion.post_process.calibrate module": [[11, "module-merlion.post_process.calibrate"]], "merlion.post_process.threshold module": [[11, "module-merlion.post_process.threshold"]], "merlion.spark package": [[12, "merlion-spark-package"]], "merlion.spark.dataset module": [[12, "module-merlion.spark.dataset"]], "merlion.spark.pandas_udf module": [[12, "module-merlion.spark.pandas_udf"]], "merlion.transform package": [[13, "merlion-transform-package"]], "merlion.transform.base module": [[13, "module-merlion.transform.base"]], "merlion.transform.bound module": [[13, "module-merlion.transform.bound"]], "merlion.transform.factory module": [[13, "module-merlion.transform.factory"]], "merlion.transform.moving_average module": [[13, "module-merlion.transform.moving_average"]], "merlion.transform.normalize module": [[13, "module-merlion.transform.normalize"]], "merlion.transform.resample module": [[13, "module-merlion.transform.resample"]], "merlion.transform.sequence module": [[13, "module-merlion.transform.sequence"]], "merlion.transform.anomalize module": [[13, "module-merlion.transform.anomalize"]], "merlion.utils package": [[14, "merlion-utils-package"]], "merlion.utils.time_series module": [[14, "module-merlion.utils.time_series"]], "merlion.utils.resample module": [[14, "module-merlion.utils.resample"]], "merlion.utils.data_io module": [[14, "module-merlion.utils.data_io"]], "merlion.utils.hts module": [[14, "module-merlion.utils.hts"]], "merlion.utils.ts_generator module": [[14, "module-merlion.utils.ts_generator"]], "merlion.utils.conj_priors module": [[14, "module-merlion.utils.conj_priors"]], "merlion.utils.istat module": [[14, "module-merlion.utils.istat"]], "ts_datasets: Easy Data Loading": [[15, "ts-datasets-easy-data-loading"]], "datasets.base module": [[15, "module-ts_datasets.base"]], "ts_datasets.anomaly package": [[16, "module-ts_datasets.anomaly"]], "ts_datasets.forecast package": [[17, "module-ts_datasets.forecast"]], "Tutorials & Example Code": [[18, "tutorials-example-code"]], "Basics": [[18, "basics"]], "Anomaly Detection": [[18, "anomaly-detection"]], "Forecasting": [[18, "forecasting"]], "Advanced Features": [[18, "advanced-features"]], "Loading Custom Datasets": [[19, "Loading-Custom-Datasets"]], "Anomaly Detection Datasets": [[19, "Anomaly-Detection-Datasets"]], "General Purpose (Forecasting) Datasets": [[19, "General-Purpose-(Forecasting)-Datasets"]], "Broader Takeaways": [[19, "Broader-Takeaways"]], "Merlion\u2019s Data Format": [[20, "Merlion\u2019s-Data-Format"]], "UnivariateTimeSeries: The Basic Building Block": [[20, "UnivariateTimeSeries:-The-Basic-Building-Block"]], "TimeSeries: Merlion\u2019s Standard Data Class": [[20, "TimeSeries:-Merlion\u2019s-Standard-Data-Class"]], "Time Series Indexing & Alignment": [[20, "Time-Series-Indexing-&-Alignment"]], "TimeSeries: A Few Useful Features": [[20, "TimeSeries:-A-Few-Useful-Features"]], "Tutorial for AutoSARIMA Forecasting Model": [[21, "Tutorial-for-AutoSARIMA-Forecasting-Model"]], "Prepare dataset": [[21, "Prepare-dataset"]], "Train a full AutoSarima model with approximation (suggested, default)": [[21, "Train-a-full-AutoSarima-model-with-approximation-(suggested,-default)"]], "Train a full AutoSarima model without approximation (slower)": [[21, "Train-a-full-AutoSarima-model-without-approximation-(slower)"]], "Train a partial autosarima model": [[21, "Train-a-partial-autosarima-model"]], "Proof of Concept: Inverse Transforms for Forecasters": [[22, "Proof-of-Concept:-Inverse-Transforms-for-Forecasters"]], "A Gentle Introduction to Anomaly Detection in Merlion": [[23, "A-Gentle-Introduction-to-Anomaly-Detection-in-Merlion"]], "How to Use Anomaly Detectors in Merlion": [[24, "How-to-Use-Anomaly-Detectors-in-Merlion"]], "Model Initialization": [[24, "Model-Initialization"], [28, "Model-Initialization"]], "Model Training": [[24, "Model-Training"], [28, "Model-Training"]], "Model Inference": [[24, "Model-Inference"], [28, "Model-Inference"]], "Quantitative Evaluation": [[24, "Quantitative-Evaluation"], [26, "Quantitative-Evaluation"], [31, "Quantitative-Evaluation"]], "Model Visualization": [[24, "Model-Visualization"]], "Saving & Loading Models": [[24, "Saving-&-Loading-Models"], [28, "Saving-&-Loading-Models"]], "Simulating Live Model Deployment": [[24, "Simulating-Live-Model-Deployment"], [28, "Simulating-Live-Model-Deployment"]], "Multivariate Time Series Anomaly Detection": [[25, "Multivariate-Time-Series-Anomaly-Detection"]], "Model Initialization and Training": [[25, "Model-Initialization-and-Training"], [29, "Model-Initialization-and-Training"]], "Model Inference and Quantitative Evaluation": [[25, "Model-Inference-and-Quantitative-Evaluation"], [29, "Model-Inference-and-Quantitative-Evaluation"]], "Adding New Anomaly Detection Models": [[26, "Adding-New-Anomaly-Detection-Models"]], "Model Config Class": [[26, "Model-Config-Class"], [31, "Model-Config-Class"]], "Model Class": [[26, "Model-Class"], [31, "Model-Class"]], "Running the Model: A Simple Example": [[26, "Running-the-Model:-A-Simple-Example"], [31, "Running-the-Model:-A-Simple-Example"]], "Visualization": [[26, "Visualization"], [31, "Visualization"]], "Customizing the Post-Rule": [[26, "Customizing-the-Post-Rule"]], "A Gentle Introduction to Forecasting in Merlion": [[27, "A-Gentle-Introduction-to-Forecasting-in-Merlion"]], "How to Use Forecasters in Merlion": [[28, "How-to-Use-Forecasters-in-Merlion"]], "Model Visualization and Quantitative Evaluation": [[28, "Model-Visualization-and-Quantitative-Evaluation"]], "Multivariate Time Series Forecasting": [[29, "Multivariate-Time-Series-Forecasting"]], "Forecasting With Exogenous Regressors": [[30, "Forecasting-With-Exogenous-Regressors"]], "Adding a New Forecasting Model": [[31, "Adding-a-New-Forecasting-Model"]], "Defining a Forecaster-Based Anomaly Detector": [[31, "Defining-a-Forecaster-Based-Anomaly-Detector"]]}, "indexentries": {"figure (class in merlion.plot)": [[1, "merlion.plot.Figure"]], "mtsfigure (class in merlion.plot)": [[1, "merlion.plot.MTSFigure"]], "get_y() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.get_y"]], "get_y() (merlion.plot.mtsfigure method)": [[1, "merlion.plot.MTSFigure.get_y"]], "get_yhat() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.get_yhat"]], "get_yhat() (merlion.plot.mtsfigure method)": [[1, "merlion.plot.MTSFigure.get_yhat"]], "get_yhat_iqr() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.get_yhat_iqr"]], "get_yhat_iqr() (merlion.plot.mtsfigure method)": [[1, "merlion.plot.MTSFigure.get_yhat_iqr"]], "merlion": [[1, "module-merlion"]], "merlion.plot": [[1, "module-merlion.plot"]], "module": [[1, "module-merlion"], [1, "module-merlion.plot"], [2, "module-merlion.evaluate"], [2, "module-merlion.evaluate.anomaly"], [2, "module-merlion.evaluate.base"], [2, "module-merlion.evaluate.forecast"], [3, "module-merlion.models"], [3, "module-merlion.models.base"], [3, "module-merlion.models.defaults"], [3, "module-merlion.models.factory"], [3, "module-merlion.models.layers"], [4, "module-merlion.models.anomaly"], [4, "module-merlion.models.anomaly.autoencoder"], [4, "module-merlion.models.anomaly.base"], [4, "module-merlion.models.anomaly.dagmm"], [4, "module-merlion.models.anomaly.dbl"], [4, "module-merlion.models.anomaly.deep_point_anomaly_detector"], [4, "module-merlion.models.anomaly.isolation_forest"], [4, "module-merlion.models.anomaly.lstm_ed"], [4, "module-merlion.models.anomaly.random_cut_forest"], [4, "module-merlion.models.anomaly.spectral_residual"], [4, "module-merlion.models.anomaly.stat_threshold"], [4, "module-merlion.models.anomaly.vae"], [4, "module-merlion.models.anomaly.windstats"], [4, "module-merlion.models.anomaly.zms"], [5, "module-merlion.models.anomaly.change_point"], [5, "module-merlion.models.anomaly.change_point.bocpd"], [6, "module-merlion.models.anomaly.forecast_based"], [6, "module-merlion.models.anomaly.forecast_based.arima"], [6, "module-merlion.models.anomaly.forecast_based.base"], [6, "module-merlion.models.anomaly.forecast_based.ets"], [6, "module-merlion.models.anomaly.forecast_based.lstm"], [6, "module-merlion.models.anomaly.forecast_based.mses"], [6, "module-merlion.models.anomaly.forecast_based.prophet"], [6, "module-merlion.models.anomaly.forecast_based.sarima"], [7, "module-merlion.models.automl"], [7, "module-merlion.models.automl.autoets"], [7, "module-merlion.models.automl.autoprophet"], [7, "module-merlion.models.automl.autosarima"], [7, "module-merlion.models.automl.base"], [7, "module-merlion.models.automl.search"], [7, "module-merlion.models.automl.seasonality"], [8, "module-merlion.models.ensemble"], [8, "module-merlion.models.ensemble.anomaly"], [8, "module-merlion.models.ensemble.base"], [8, "module-merlion.models.ensemble.combine"], [8, "module-merlion.models.ensemble.forecast"], [9, "module-merlion.models.forecast"], [9, "module-merlion.models.forecast.arima"], [9, "module-merlion.models.forecast.base"], [9, "module-merlion.models.forecast.ets"], [9, "module-merlion.models.forecast.lstm"], [9, "module-merlion.models.forecast.prophet"], [9, "module-merlion.models.forecast.sarima"], [9, "module-merlion.models.forecast.sklearn_base"], [9, "module-merlion.models.forecast.smoother"], [9, "module-merlion.models.forecast.trees"], [9, "module-merlion.models.forecast.vector_ar"], [10, "module-merlion.models.utils"], [10, "module-merlion.models.utils.autosarima_utils"], [10, "module-merlion.models.utils.rolling_window_dataset"], [11, "module-merlion.post_process"], [11, "module-merlion.post_process.base"], [11, "module-merlion.post_process.calibrate"], [11, "module-merlion.post_process.factory"], [11, "module-merlion.post_process.sequence"], [11, "module-merlion.post_process.threshold"], [12, "module-merlion.spark"], [12, "module-merlion.spark.dataset"], [12, "module-merlion.spark.pandas_udf"], [13, "module-merlion.transform"], [13, "module-merlion.transform.anomalize"], [13, "module-merlion.transform.base"], [13, "module-merlion.transform.bound"], [13, "module-merlion.transform.factory"], [13, "module-merlion.transform.moving_average"], [13, "module-merlion.transform.normalize"], [13, "module-merlion.transform.resample"], [13, "module-merlion.transform.sequence"], [14, "module-merlion.utils"], [14, "module-merlion.utils.conj_priors"], [14, "module-merlion.utils.data_io"], [14, "module-merlion.utils.hts"], [14, "module-merlion.utils.istat"], [14, "module-merlion.utils.resample"], [14, "module-merlion.utils.time_series"], [14, "module-merlion.utils.ts_generator"], [15, "module-ts_datasets"], [15, "module-ts_datasets.base"], [16, "module-ts_datasets.anomaly"], [17, "module-ts_datasets.forecast"]], "plot() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.plot"]], "plot_anoms() (in module merlion.plot)": [[1, "merlion.plot.plot_anoms"]], "plot_anoms_plotly() (in module merlion.plot)": [[1, "merlion.plot.plot_anoms_plotly"]], "plot_plotly() (merlion.plot.figure method)": [[1, "merlion.plot.Figure.plot_plotly"]], "plot_plotly() (merlion.plot.mtsfigure method)": [[1, "merlion.plot.MTSFigure.plot_plotly"]], "t0 (merlion.plot.figure property)": [[1, "merlion.plot.Figure.t0"]], "t0 (merlion.plot.mtsfigure property)": [[1, "merlion.plot.MTSFigure.t0"]], "t_split (merlion.plot.figure property)": [[1, "merlion.plot.Figure.t_split"]], "t_split (merlion.plot.mtsfigure property)": [[1, "merlion.plot.MTSFigure.t_split"]], "tf (merlion.plot.figure property)": [[1, "merlion.plot.Figure.tf"]], "tf (merlion.plot.mtsfigure property)": [[1, "merlion.plot.MTSFigure.tf"]], "evaluatorbase (class in merlion.evaluate.base)": [[2, "merlion.evaluate.base.EvaluatorBase"]], "evaluatorconfig (class in merlion.evaluate.base)": [[2, "merlion.evaluate.base.EvaluatorConfig"]], "f1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.F1"]], "f2 (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.F2"]], "f5 (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.F5"]], "forecastevaluator (class in merlion.evaluate.forecast)": [[2, "merlion.evaluate.forecast.ForecastEvaluator"]], "forecastevaluatorconfig (class in merlion.evaluate.forecast)": [[2, "merlion.evaluate.forecast.ForecastEvaluatorConfig"]], "forecastmetric (class in merlion.evaluate.forecast)": [[2, "merlion.evaluate.forecast.ForecastMetric"]], "forecastscoreaccumulator (class in merlion.evaluate.forecast)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator"]], "mae (merlion.evaluate.forecast.forecastmetric attribute)": [[2, "merlion.evaluate.forecast.ForecastMetric.MAE"]], "marre (merlion.evaluate.forecast.forecastmetric attribute)": [[2, "merlion.evaluate.forecast.ForecastMetric.MARRE"]], "mase (merlion.evaluate.forecast.forecastmetric attribute)": [[2, "merlion.evaluate.forecast.ForecastMetric.MASE"]], "msis (merlion.evaluate.forecast.forecastmetric attribute)": [[2, "merlion.evaluate.forecast.ForecastMetric.MSIS"]], "meantimetodetect (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.MeanTimeToDetect"]], "nabscore (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.NABScore"]], "nabscorelowfn (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.NABScoreLowFN"]], "nabscorelowfp (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.NABScoreLowFP"]], "pointadjusted (merlion.evaluate.anomaly.scoretype attribute)": [[2, "merlion.evaluate.anomaly.ScoreType.PointAdjusted"]], "pointadjustedf1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedF1"]], "pointadjustedprecision (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedPrecision"]], "pointadjustedrecall (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.PointAdjustedRecall"]], "pointwise (merlion.evaluate.anomaly.scoretype attribute)": [[2, "merlion.evaluate.anomaly.ScoreType.Pointwise"]], "pointwisef1 (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.PointwiseF1"]], "pointwiseprecision (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.PointwisePrecision"]], "pointwiserecall (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.PointwiseRecall"]], "precision (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.Precision"]], "rmse (merlion.evaluate.forecast.forecastmetric attribute)": [[2, "merlion.evaluate.forecast.ForecastMetric.RMSE"]], "rmspe (merlion.evaluate.forecast.forecastmetric attribute)": [[2, "merlion.evaluate.forecast.ForecastMetric.RMSPE"]], "recall (merlion.evaluate.anomaly.tsadmetric attribute)": [[2, "merlion.evaluate.anomaly.TSADMetric.Recall"]], "revisedpointadjusted (merlion.evaluate.anomaly.scoretype attribute)": [[2, "merlion.evaluate.anomaly.ScoreType.RevisedPointAdjusted"]], "scoretype (class in merlion.evaluate.anomaly)": [[2, "merlion.evaluate.anomaly.ScoreType"]], "tsadevaluator (class in merlion.evaluate.anomaly)": [[2, "merlion.evaluate.anomaly.TSADEvaluator"]], "tsadevaluatorconfig (class in merlion.evaluate.anomaly)": [[2, "merlion.evaluate.anomaly.TSADEvaluatorConfig"]], "tsadmetric (class in merlion.evaluate.anomaly)": [[2, "merlion.evaluate.anomaly.TSADMetric"]], "tsadscoreaccumulator (class in merlion.evaluate.anomaly)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator"]], "accumulate_forecast_score() (in module merlion.evaluate.forecast)": [[2, "merlion.evaluate.forecast.accumulate_forecast_score"]], "accumulate_tsad_score() (in module merlion.evaluate.anomaly)": [[2, "merlion.evaluate.anomaly.accumulate_tsad_score"]], "cadence (merlion.evaluate.base.evaluatorbase property)": [[2, "merlion.evaluate.base.EvaluatorBase.cadence"]], "cadence (merlion.evaluate.base.evaluatorconfig property)": [[2, "merlion.evaluate.base.EvaluatorConfig.cadence"]], "cadence (merlion.evaluate.forecast.forecastevaluator property)": [[2, "merlion.evaluate.forecast.ForecastEvaluator.cadence"]], "cadence (merlion.evaluate.forecast.forecastevaluatorconfig property)": [[2, "merlion.evaluate.forecast.ForecastEvaluatorConfig.cadence"]], "check_before_eval() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator.check_before_eval"]], "config_class (merlion.evaluate.anomaly.tsadevaluator attribute)": [[2, "merlion.evaluate.anomaly.TSADEvaluator.config_class"]], "config_class (merlion.evaluate.base.evaluatorbase attribute)": [[2, "merlion.evaluate.base.EvaluatorBase.config_class"]], "config_class (merlion.evaluate.forecast.forecastevaluator attribute)": [[2, "merlion.evaluate.forecast.ForecastEvaluator.config_class"]], "default_retrain_kwargs() (merlion.evaluate.anomaly.tsadevaluator method)": [[2, "merlion.evaluate.anomaly.TSADEvaluator.default_retrain_kwargs"]], "default_retrain_kwargs() (merlion.evaluate.base.evaluatorbase method)": [[2, "merlion.evaluate.base.EvaluatorBase.default_retrain_kwargs"]], "default_train_kwargs() (merlion.evaluate.base.evaluatorbase method)": [[2, "merlion.evaluate.base.EvaluatorBase.default_train_kwargs"]], "evaluate() (merlion.evaluate.anomaly.tsadevaluator method)": [[2, "merlion.evaluate.anomaly.TSADEvaluator.evaluate"]], "evaluate() (merlion.evaluate.base.evaluatorbase method)": [[2, "merlion.evaluate.base.EvaluatorBase.evaluate"]], "evaluate() (merlion.evaluate.forecast.forecastevaluator method)": [[2, "merlion.evaluate.forecast.ForecastEvaluator.evaluate"]], "f1() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator.f1"]], "f_beta() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator.f_beta"]], "get_predict() (merlion.evaluate.anomaly.tsadevaluator method)": [[2, "merlion.evaluate.anomaly.TSADEvaluator.get_predict"]], "get_predict() (merlion.evaluate.base.evaluatorbase method)": [[2, "merlion.evaluate.base.EvaluatorBase.get_predict"]], "horizon (merlion.evaluate.base.evaluatorbase property)": [[2, "merlion.evaluate.base.EvaluatorBase.horizon"]], "horizon (merlion.evaluate.base.evaluatorconfig property)": [[2, "merlion.evaluate.base.EvaluatorConfig.horizon"]], "horizon (merlion.evaluate.forecast.forecastevaluator property)": [[2, "merlion.evaluate.forecast.ForecastEvaluator.horizon"]], "horizon (merlion.evaluate.forecast.forecastevaluatorconfig property)": [[2, "merlion.evaluate.forecast.ForecastEvaluatorConfig.horizon"]], "mae() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator.mae"]], "marre() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator.marre"]], "mase() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator.mase"]], "max_delay_sec (merlion.evaluate.anomaly.tsadevaluator property)": [[2, "merlion.evaluate.anomaly.TSADEvaluator.max_delay_sec"]], "max_early_sec (merlion.evaluate.anomaly.tsadevaluator property)": [[2, "merlion.evaluate.anomaly.TSADEvaluator.max_early_sec"]], "mean_anomaly_duration() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_anomaly_duration"]], "mean_detected_anomaly_duration() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_detected_anomaly_duration"]], "mean_time_to_detect() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator.mean_time_to_detect"]], "merlion.evaluate": [[2, "module-merlion.evaluate"]], "merlion.evaluate.anomaly": [[2, "module-merlion.evaluate.anomaly"]], "merlion.evaluate.base": [[2, "module-merlion.evaluate.base"]], "merlion.evaluate.forecast": [[2, "module-merlion.evaluate.forecast"]], "msis() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator.msis"]], "nab_score() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator.nab_score"]], "precision() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator.precision"]], "recall() (merlion.evaluate.anomaly.tsadscoreaccumulator method)": [[2, "merlion.evaluate.anomaly.TSADScoreAccumulator.recall"]], "retrain_freq (merlion.evaluate.base.evaluatorbase property)": [[2, "merlion.evaluate.base.EvaluatorBase.retrain_freq"]], "rmse() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator.rmse"]], "rmspe() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator.rmspe"]], "smape (merlion.evaluate.forecast.forecastmetric attribute)": [[2, "merlion.evaluate.forecast.ForecastMetric.sMAPE"]], "smape() (merlion.evaluate.forecast.forecastscoreaccumulator method)": [[2, "merlion.evaluate.forecast.ForecastScoreAccumulator.smape"]], "to_dict() (merlion.evaluate.base.evaluatorconfig method)": [[2, "merlion.evaluate.base.EvaluatorConfig.to_dict"]], "train_window (merlion.evaluate.base.evaluatorbase property)": [[2, "merlion.evaluate.base.EvaluatorBase.train_window"]], "config (class in merlion.models.base)": [[3, "merlion.models.base.Config"]], "defaultdetector (class in merlion.models.defaults)": [[3, "merlion.models.defaults.DefaultDetector"]], "defaultdetectorconfig (class in merlion.models.defaults)": [[3, "merlion.models.defaults.DefaultDetectorConfig"]], "defaultforecaster (class in merlion.models.defaults)": [[3, "merlion.models.defaults.DefaultForecaster"]], "defaultforecasterconfig (class in merlion.models.defaults)": [[3, "merlion.models.defaults.DefaultForecasterConfig"]], "layereddetector (class in merlion.models.layers)": [[3, "merlion.models.layers.LayeredDetector"]], "layeredforecaster (class in merlion.models.layers)": [[3, "merlion.models.layers.LayeredForecaster"]], "layeredforecastingdetector (class in merlion.models.layers)": [[3, "merlion.models.layers.LayeredForecastingDetector"]], "layeredmodel (class in merlion.models.layers)": [[3, "merlion.models.layers.LayeredModel"]], "layeredmodelconfig (class in merlion.models.layers)": [[3, "merlion.models.layers.LayeredModelConfig"]], "modelbase (class in merlion.models.base)": [[3, "merlion.models.base.ModelBase"]], "modelfactory (class in merlion.models.factory)": [[3, "merlion.models.factory.ModelFactory"]], "multipletimeseriesmodelmixin (class in merlion.models.base)": [[3, "merlion.models.base.MultipleTimeseriesModelMixin"]], "normalizingconfig (class in merlion.models.base)": [[3, "merlion.models.base.NormalizingConfig"]], "auto_align (merlion.models.base.modelbase property)": [[3, "merlion.models.base.ModelBase.auto_align"]], "base_model (merlion.models.base.modelbase property)": [[3, "merlion.models.base.ModelBase.base_model"]], "base_model (merlion.models.layers.layeredmodel property)": [[3, "merlion.models.layers.LayeredModel.base_model"]], "base_model (merlion.models.layers.layeredmodelconfig property)": [[3, "merlion.models.layers.LayeredModelConfig.base_model"]], "config_class (merlion.models.base.modelbase attribute)": [[3, "merlion.models.base.ModelBase.config_class"]], "config_class (merlion.models.defaults.defaultdetector attribute)": [[3, "merlion.models.defaults.DefaultDetector.config_class"]], "config_class (merlion.models.defaults.defaultforecaster attribute)": [[3, "merlion.models.defaults.DefaultForecaster.config_class"]], "config_class (merlion.models.layers.layeredmodel attribute)": [[3, "merlion.models.layers.LayeredModel.config_class"]], "create() (merlion.models.factory.modelfactory class method)": [[3, "merlion.models.factory.ModelFactory.create"]], "dim (merlion.models.base.config attribute)": [[3, "merlion.models.base.Config.dim"]], "dim (merlion.models.base.modelbase property)": [[3, "merlion.models.base.ModelBase.dim"]], "filename (merlion.models.base.config attribute)": [[3, "merlion.models.base.Config.filename"]], "filename (merlion.models.base.modelbase attribute)": [[3, "merlion.models.base.ModelBase.filename"]], "forecast() (merlion.models.layers.layeredforecaster method)": [[3, "merlion.models.layers.LayeredForecaster.forecast"]], "from_bytes() (merlion.models.base.modelbase class method)": [[3, "merlion.models.base.ModelBase.from_bytes"]], "from_dict() (merlion.models.base.config class method)": [[3, "merlion.models.base.Config.from_dict"]], "from_dict() (merlion.models.layers.layeredmodelconfig class method)": [[3, "merlion.models.layers.LayeredModelConfig.from_dict"]], "full_transform (merlion.models.base.normalizingconfig property)": [[3, "merlion.models.base.NormalizingConfig.full_transform"]], "get_anomaly_score() (merlion.models.layers.layereddetector method)": [[3, "merlion.models.layers.LayeredDetector.get_anomaly_score"]], "get_model_class() (merlion.models.factory.modelfactory class method)": [[3, "merlion.models.factory.ModelFactory.get_model_class"]], "get_unused_kwargs() (merlion.models.base.config method)": [[3, "merlion.models.base.Config.get_unused_kwargs"]], "get_unused_kwargs() (merlion.models.layers.layeredmodelconfig method)": [[3, "merlion.models.layers.LayeredModelConfig.get_unused_kwargs"]], "granularity (merlion.models.defaults.defaultdetector property)": [[3, "merlion.models.defaults.DefaultDetector.granularity"]], "granularity (merlion.models.defaults.defaultforecaster property)": [[3, "merlion.models.defaults.DefaultForecaster.granularity"]], "instantiate_or_copy_model() (in module merlion.models.factory)": [[3, "merlion.models.factory.instantiate_or_copy_model"]], "last_train_time (merlion.models.base.modelbase property)": [[3, "merlion.models.base.ModelBase.last_train_time"]], "load() (merlion.models.base.modelbase class method)": [[3, "merlion.models.base.ModelBase.load"]], "load() (merlion.models.factory.modelfactory class method)": [[3, "merlion.models.factory.ModelFactory.load"]], "load_bytes() (merlion.models.factory.modelfactory class method)": [[3, "merlion.models.factory.ModelFactory.load_bytes"]], "merlion.models": [[3, "module-merlion.models"]], "merlion.models.base": [[3, "module-merlion.models.base"]], "merlion.models.defaults": [[3, "module-merlion.models.defaults"]], "merlion.models.factory": [[3, "module-merlion.models.factory"]], "merlion.models.layers": [[3, "module-merlion.models.layers"]], "model (merlion.models.layers.layeredmodel property)": [[3, "merlion.models.layers.LayeredModel.model"]], "require_even_sampling (merlion.models.base.modelbase property)": [[3, "merlion.models.base.ModelBase.require_even_sampling"]], "require_even_sampling (merlion.models.layers.layeredmodel property)": [[3, "merlion.models.layers.LayeredModel.require_even_sampling"]], "require_univariate (merlion.models.base.modelbase property)": [[3, "merlion.models.base.ModelBase.require_univariate"]], "require_univariate (merlion.models.layers.layeredmodel property)": [[3, "merlion.models.layers.LayeredModel.require_univariate"]], "reset() (merlion.models.base.modelbase method)": [[3, "merlion.models.base.ModelBase.reset"]], "reset() (merlion.models.defaults.defaultdetector method)": [[3, "merlion.models.defaults.DefaultDetector.reset"]], "reset() (merlion.models.defaults.defaultforecaster method)": [[3, "merlion.models.defaults.DefaultForecaster.reset"]], "reset() (merlion.models.layers.layeredmodel method)": [[3, "merlion.models.layers.LayeredModel.reset"]], "save() (merlion.models.base.modelbase method)": [[3, "merlion.models.base.ModelBase.save"]], "timedelta (merlion.models.base.modelbase property)": [[3, "merlion.models.base.ModelBase.timedelta"]], "to_bytes() (merlion.models.base.modelbase method)": [[3, "merlion.models.base.ModelBase.to_bytes"]], "to_dict() (merlion.models.base.config method)": [[3, "merlion.models.base.Config.to_dict"]], "to_dict() (merlion.models.layers.layeredmodelconfig method)": [[3, "merlion.models.layers.LayeredModelConfig.to_dict"]], "train() (merlion.models.base.modelbase method)": [[3, "merlion.models.base.ModelBase.train"]], "train() (merlion.models.defaults.defaultdetector method)": [[3, "merlion.models.defaults.DefaultDetector.train"]], "train() (merlion.models.defaults.defaultforecaster method)": [[3, "merlion.models.defaults.DefaultForecaster.train"]], "train_data (merlion.models.base.modelbase attribute)": [[3, "merlion.models.base.ModelBase.train_data"]], "train_data (merlion.models.layers.layeredmodel property)": [[3, "merlion.models.layers.LayeredModel.train_data"]], "train_multiple() (merlion.models.base.multipletimeseriesmodelmixin method)": [[3, "merlion.models.base.MultipleTimeseriesModelMixin.train_multiple"]], "train_post_process() (merlion.models.base.modelbase method)": [[3, "merlion.models.base.ModelBase.train_post_process"]], "train_post_process() (merlion.models.layers.layeredmodel method)": [[3, "merlion.models.layers.LayeredModel.train_post_process"]], "train_pre_process() (merlion.models.base.modelbase method)": [[3, "merlion.models.base.ModelBase.train_pre_process"]], "train_pre_process() (merlion.models.layers.layeredmodel method)": [[3, "merlion.models.layers.LayeredModel.train_pre_process"]], "transform (merlion.models.base.config attribute)": [[3, "merlion.models.base.Config.transform"]], "transform (merlion.models.base.modelbase property)": [[3, "merlion.models.base.ModelBase.transform"]], "transform (merlion.models.base.normalizingconfig property)": [[3, "merlion.models.base.NormalizingConfig.transform"]], "transform_time_series() (merlion.models.base.modelbase method)": [[3, "merlion.models.base.ModelBase.transform_time_series"]], "autoencoder (class in merlion.models.anomaly.autoencoder)": [[4, "merlion.models.anomaly.autoencoder.AutoEncoder"]], "autoencoderconfig (class in merlion.models.anomaly.autoencoder)": [[4, "merlion.models.anomaly.autoencoder.AutoEncoderConfig"]], "dagmm (class in merlion.models.anomaly.dagmm)": [[4, "merlion.models.anomaly.dagmm.DAGMM"]], "dagmmconfig (class in merlion.models.anomaly.dagmm)": [[4, "merlion.models.anomaly.dagmm.DAGMMConfig"]], "deeppointanomalydetector (class in merlion.models.anomaly.deep_point_anomaly_detector)": [[4, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector"]], "deeppointanomalydetectorconfig (class in merlion.models.anomaly.deep_point_anomaly_detector)": [[4, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetectorConfig"]], "detectorbase (class in merlion.models.anomaly.base)": [[4, "merlion.models.anomaly.base.DetectorBase"]], "detectorconfig (class in merlion.models.anomaly.base)": [[4, "merlion.models.anomaly.base.DetectorConfig"]], "dynamicbaseline (class in merlion.models.anomaly.dbl)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline"]], "dynamicbaselineconfig (class in merlion.models.anomaly.dbl)": [[4, "merlion.models.anomaly.dbl.DynamicBaselineConfig"]], "isolationforest (class in merlion.models.anomaly.isolation_forest)": [[4, "merlion.models.anomaly.isolation_forest.IsolationForest"]], "isolationforestconfig (class in merlion.models.anomaly.isolation_forest)": [[4, "merlion.models.anomaly.isolation_forest.IsolationForestConfig"]], "jvmsingleton (class in merlion.models.anomaly.random_cut_forest)": [[4, "merlion.models.anomaly.random_cut_forest.JVMSingleton"]], "lstmed (class in merlion.models.anomaly.lstm_ed)": [[4, "merlion.models.anomaly.lstm_ed.LSTMED"]], "lstmedconfig (class in merlion.models.anomaly.lstm_ed)": [[4, "merlion.models.anomaly.lstm_ed.LSTMEDConfig"]], "multipletimeseriesdetectormixin (class in merlion.models.anomaly.base)": [[4, "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin"]], "nocalibrationdetectorconfig (class in merlion.models.anomaly.base)": [[4, "merlion.models.anomaly.base.NoCalibrationDetectorConfig"]], "randomcutforest (class in merlion.models.anomaly.random_cut_forest)": [[4, "merlion.models.anomaly.random_cut_forest.RandomCutForest"]], "randomcutforestconfig (class in merlion.models.anomaly.random_cut_forest)": [[4, "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig"]], "segment (class in merlion.models.anomaly.dbl)": [[4, "merlion.models.anomaly.dbl.Segment"]], "segmenter (class in merlion.models.anomaly.dbl)": [[4, "merlion.models.anomaly.dbl.Segmenter"]], "spectralresidual (class in merlion.models.anomaly.spectral_residual)": [[4, "merlion.models.anomaly.spectral_residual.SpectralResidual"]], "spectralresidualconfig (class in merlion.models.anomaly.spectral_residual)": [[4, "merlion.models.anomaly.spectral_residual.SpectralResidualConfig"]], "statthreshold (class in merlion.models.anomaly.stat_threshold)": [[4, "merlion.models.anomaly.stat_threshold.StatThreshold"]], "statthresholdconfig (class in merlion.models.anomaly.stat_threshold)": [[4, "merlion.models.anomaly.stat_threshold.StatThresholdConfig"]], "trend (class in merlion.models.anomaly.dbl)": [[4, "merlion.models.anomaly.dbl.Trend"]], "vae (class in merlion.models.anomaly.vae)": [[4, "merlion.models.anomaly.vae.VAE"]], "vaeconfig (class in merlion.models.anomaly.vae)": [[4, "merlion.models.anomaly.vae.VAEConfig"]], "windstats (class in merlion.models.anomaly.windstats)": [[4, "merlion.models.anomaly.windstats.WindStats"]], "windstatsconfig (class in merlion.models.anomaly.windstats)": [[4, "merlion.models.anomaly.windstats.WindStatsConfig"]], "zms (class in merlion.models.anomaly.zms)": [[4, "merlion.models.anomaly.zms.ZMS"]], "zmsconfig (class in merlion.models.anomaly.zms)": [[4, "merlion.models.anomaly.zms.ZMSConfig"]], "add() (merlion.models.anomaly.dbl.segment method)": [[4, "merlion.models.anomaly.dbl.Segment.add"]], "add() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.add"]], "adjust_z_scores (merlion.models.anomaly.zms.zms property)": [[4, "merlion.models.anomaly.zms.ZMS.adjust_z_scores"]], "calibrator (merlion.models.anomaly.base.detectorbase property)": [[4, "merlion.models.anomaly.base.DetectorBase.calibrator"]], "calibrator (merlion.models.anomaly.base.detectorconfig attribute)": [[4, "merlion.models.anomaly.base.DetectorConfig.calibrator"]], "calibrator (merlion.models.anomaly.base.nocalibrationdetectorconfig property)": [[4, "merlion.models.anomaly.base.NoCalibrationDetectorConfig.calibrator"]], "config_class (merlion.models.anomaly.autoencoder.autoencoder attribute)": [[4, "merlion.models.anomaly.autoencoder.AutoEncoder.config_class"]], "config_class (merlion.models.anomaly.base.detectorbase attribute)": [[4, "merlion.models.anomaly.base.DetectorBase.config_class"]], "config_class (merlion.models.anomaly.dagmm.dagmm attribute)": [[4, "merlion.models.anomaly.dagmm.DAGMM.config_class"]], "config_class (merlion.models.anomaly.dbl.dynamicbaseline attribute)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.config_class"]], "config_class (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector attribute)": [[4, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.config_class"]], "config_class (merlion.models.anomaly.isolation_forest.isolationforest attribute)": [[4, "merlion.models.anomaly.isolation_forest.IsolationForest.config_class"]], "config_class (merlion.models.anomaly.lstm_ed.lstmed attribute)": [[4, "merlion.models.anomaly.lstm_ed.LSTMED.config_class"]], "config_class (merlion.models.anomaly.random_cut_forest.randomcutforest attribute)": [[4, "merlion.models.anomaly.random_cut_forest.RandomCutForest.config_class"]], "config_class (merlion.models.anomaly.spectral_residual.spectralresidual attribute)": [[4, "merlion.models.anomaly.spectral_residual.SpectralResidual.config_class"]], "config_class (merlion.models.anomaly.stat_threshold.statthreshold attribute)": [[4, "merlion.models.anomaly.stat_threshold.StatThreshold.config_class"]], "config_class (merlion.models.anomaly.vae.vae attribute)": [[4, "merlion.models.anomaly.vae.VAE.config_class"]], "config_class (merlion.models.anomaly.windstats.windstats attribute)": [[4, "merlion.models.anomaly.windstats.WindStats.config_class"]], "config_class (merlion.models.anomaly.zms.zms attribute)": [[4, "merlion.models.anomaly.zms.ZMS.config_class"]], "daily (merlion.models.anomaly.dbl.trend attribute)": [[4, "merlion.models.anomaly.dbl.Trend.daily"]], "data (merlion.models.anomaly.dbl.dynamicbaseline property)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.data"]], "day_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[4, "merlion.models.anomaly.dbl.Segmenter.day_delta"]], "day_key() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.day_key"]], "determine_train_window() (merlion.models.anomaly.dbl.dynamicbaselineconfig method)": [[4, "merlion.models.anomaly.dbl.DynamicBaselineConfig.determine_train_window"]], "drop() (merlion.models.anomaly.dbl.segment method)": [[4, "merlion.models.anomaly.dbl.Segment.drop"]], "drop() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.drop"]], "enable_calibrator (merlion.models.anomaly.base.detectorconfig attribute)": [[4, "merlion.models.anomaly.base.DetectorConfig.enable_calibrator"]], "enable_calibrator (merlion.models.anomaly.base.nocalibrationdetectorconfig property)": [[4, "merlion.models.anomaly.base.NoCalibrationDetectorConfig.enable_calibrator"]], "enable_threshold (merlion.models.anomaly.base.detectorconfig attribute)": [[4, "merlion.models.anomaly.base.DetectorConfig.enable_threshold"]], "fixed_period (merlion.models.anomaly.dbl.dynamicbaseline property)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.fixed_period"]], "fixed_period (merlion.models.anomaly.dbl.dynamicbaselineconfig property)": [[4, "merlion.models.anomaly.dbl.DynamicBaselineConfig.fixed_period"]], "from_dict() (merlion.models.anomaly.base.detectorconfig class method)": [[4, "merlion.models.anomaly.base.DetectorConfig.from_dict"]], "full_transform (merlion.models.anomaly.zms.zmsconfig property)": [[4, "merlion.models.anomaly.zms.ZMSConfig.full_transform"]], "gateway() (merlion.models.anomaly.random_cut_forest.jvmsingleton class method)": [[4, "merlion.models.anomaly.random_cut_forest.JVMSingleton.gateway"]], "get_anomaly_label() (merlion.models.anomaly.base.detectorbase method)": [[4, "merlion.models.anomaly.base.DetectorBase.get_anomaly_label"]], "get_anomaly_score() (merlion.models.anomaly.base.detectorbase method)": [[4, "merlion.models.anomaly.base.DetectorBase.get_anomaly_score"]], "get_baseline() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.get_baseline"]], "get_baseline() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.get_baseline"]], "get_baseline_figure() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.get_baseline_figure"]], "get_figure() (merlion.models.anomaly.base.detectorbase method)": [[4, "merlion.models.anomaly.base.DetectorBase.get_figure"]], "get_relevant() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.get_relevant"]], "has_fixed_period (merlion.models.anomaly.dbl.dynamicbaseline property)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.has_fixed_period"]], "hour_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[4, "merlion.models.anomaly.dbl.Segmenter.hour_delta"]], "java_params (merlion.models.anomaly.random_cut_forest.randomcutforestconfig property)": [[4, "merlion.models.anomaly.random_cut_forest.RandomCutForestConfig.java_params"]], "lag_inflation (merlion.models.anomaly.zms.zms property)": [[4, "merlion.models.anomaly.zms.ZMS.lag_inflation"]], "lag_scales (merlion.models.anomaly.zms.zms property)": [[4, "merlion.models.anomaly.zms.ZMS.lag_scales"]], "merlion.models.anomaly": [[4, "module-merlion.models.anomaly"]], "merlion.models.anomaly.autoencoder": [[4, "module-merlion.models.anomaly.autoencoder"]], "merlion.models.anomaly.base": [[4, "module-merlion.models.anomaly.base"]], "merlion.models.anomaly.dagmm": [[4, "module-merlion.models.anomaly.dagmm"]], "merlion.models.anomaly.dbl": [[4, "module-merlion.models.anomaly.dbl"]], "merlion.models.anomaly.deep_point_anomaly_detector": [[4, "module-merlion.models.anomaly.deep_point_anomaly_detector"]], "merlion.models.anomaly.isolation_forest": [[4, "module-merlion.models.anomaly.isolation_forest"]], "merlion.models.anomaly.lstm_ed": [[4, "module-merlion.models.anomaly.lstm_ed"]], "merlion.models.anomaly.random_cut_forest": [[4, "module-merlion.models.anomaly.random_cut_forest"]], "merlion.models.anomaly.spectral_residual": [[4, "module-merlion.models.anomaly.spectral_residual"]], "merlion.models.anomaly.stat_threshold": [[4, "module-merlion.models.anomaly.stat_threshold"]], "merlion.models.anomaly.vae": [[4, "module-merlion.models.anomaly.vae"]], "merlion.models.anomaly.windstats": [[4, "module-merlion.models.anomaly.windstats"]], "merlion.models.anomaly.zms": [[4, "module-merlion.models.anomaly.zms"]], "min_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[4, "merlion.models.anomaly.dbl.Segmenter.min_delta"]], "monthly (merlion.models.anomaly.dbl.trend attribute)": [[4, "merlion.models.anomaly.dbl.Trend.monthly"]], "n_lags (merlion.models.anomaly.zms.zms property)": [[4, "merlion.models.anomaly.zms.ZMS.n_lags"]], "n_lags (merlion.models.anomaly.zms.zmsconfig property)": [[4, "merlion.models.anomaly.zms.ZMSConfig.n_lags"]], "online_updates (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[4, "merlion.models.anomaly.random_cut_forest.RandomCutForest.online_updates"]], "plot_anomaly() (merlion.models.anomaly.base.detectorbase method)": [[4, "merlion.models.anomaly.base.DetectorBase.plot_anomaly"]], "plot_anomaly_plotly() (merlion.models.anomaly.base.detectorbase method)": [[4, "merlion.models.anomaly.base.DetectorBase.plot_anomaly_plotly"]], "post_rule (merlion.models.anomaly.base.detectorbase property)": [[4, "merlion.models.anomaly.base.DetectorBase.post_rule"]], "post_rule (merlion.models.anomaly.base.detectorconfig property)": [[4, "merlion.models.anomaly.base.DetectorConfig.post_rule"]], "require_even_sampling (merlion.models.anomaly.autoencoder.autoencoder property)": [[4, "merlion.models.anomaly.autoencoder.AutoEncoder.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.dagmm.dagmm property)": [[4, "merlion.models.anomaly.dagmm.DAGMM.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.dbl.dynamicbaseline property)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector property)": [[4, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.isolation_forest.isolationforest property)": [[4, "merlion.models.anomaly.isolation_forest.IsolationForest.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.lstm_ed.lstmed property)": [[4, "merlion.models.anomaly.lstm_ed.LSTMED.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[4, "merlion.models.anomaly.random_cut_forest.RandomCutForest.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[4, "merlion.models.anomaly.spectral_residual.SpectralResidual.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.stat_threshold.statthreshold property)": [[4, "merlion.models.anomaly.stat_threshold.StatThreshold.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.vae.vae property)": [[4, "merlion.models.anomaly.vae.VAE.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.windstats.windstats property)": [[4, "merlion.models.anomaly.windstats.WindStats.require_even_sampling"]], "require_even_sampling (merlion.models.anomaly.zms.zms property)": [[4, "merlion.models.anomaly.zms.ZMS.require_even_sampling"]], "require_univariate (merlion.models.anomaly.autoencoder.autoencoder property)": [[4, "merlion.models.anomaly.autoencoder.AutoEncoder.require_univariate"]], "require_univariate (merlion.models.anomaly.dagmm.dagmm property)": [[4, "merlion.models.anomaly.dagmm.DAGMM.require_univariate"]], "require_univariate (merlion.models.anomaly.dbl.dynamicbaseline property)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.require_univariate"]], "require_univariate (merlion.models.anomaly.deep_point_anomaly_detector.deeppointanomalydetector property)": [[4, "merlion.models.anomaly.deep_point_anomaly_detector.DeepPointAnomalyDetector.require_univariate"]], "require_univariate (merlion.models.anomaly.isolation_forest.isolationforest property)": [[4, "merlion.models.anomaly.isolation_forest.IsolationForest.require_univariate"]], "require_univariate (merlion.models.anomaly.lstm_ed.lstmed property)": [[4, "merlion.models.anomaly.lstm_ed.LSTMED.require_univariate"]], "require_univariate (merlion.models.anomaly.random_cut_forest.randomcutforest property)": [[4, "merlion.models.anomaly.random_cut_forest.RandomCutForest.require_univariate"]], "require_univariate (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[4, "merlion.models.anomaly.spectral_residual.SpectralResidual.require_univariate"]], "require_univariate (merlion.models.anomaly.stat_threshold.statthreshold property)": [[4, "merlion.models.anomaly.stat_threshold.StatThreshold.require_univariate"]], "require_univariate (merlion.models.anomaly.vae.vae property)": [[4, "merlion.models.anomaly.vae.VAE.require_univariate"]], "require_univariate (merlion.models.anomaly.windstats.windstats property)": [[4, "merlion.models.anomaly.windstats.WindStats.require_univariate"]], "require_univariate (merlion.models.anomaly.zms.zms property)": [[4, "merlion.models.anomaly.zms.ZMS.require_univariate"]], "reset() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.reset"]], "score() (merlion.models.anomaly.dbl.segment method)": [[4, "merlion.models.anomaly.dbl.Segment.score"]], "score() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.score"]], "segment_key() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.segment_key"]], "target_seq_index (merlion.models.anomaly.spectral_residual.spectralresidual property)": [[4, "merlion.models.anomaly.spectral_residual.SpectralResidual.target_seq_index"]], "threshold (merlion.models.anomaly.base.detectorbase property)": [[4, "merlion.models.anomaly.base.DetectorBase.threshold"]], "threshold (merlion.models.anomaly.base.detectorconfig attribute)": [[4, "merlion.models.anomaly.base.DetectorConfig.threshold"]], "to_dict() (merlion.models.anomaly.dbl.dynamicbaselineconfig method)": [[4, "merlion.models.anomaly.dbl.DynamicBaselineConfig.to_dict"]], "to_dict() (merlion.models.anomaly.zms.zmsconfig method)": [[4, "merlion.models.anomaly.zms.ZMSConfig.to_dict"]], "train() (merlion.models.anomaly.base.detectorbase method)": [[4, "merlion.models.anomaly.base.DetectorBase.train"]], "train() (merlion.models.anomaly.zms.zms method)": [[4, "merlion.models.anomaly.zms.ZMS.train"]], "train_multiple() (merlion.models.anomaly.base.multipletimeseriesdetectormixin method)": [[4, "merlion.models.anomaly.base.MultipleTimeseriesDetectorMixin.train_multiple"]], "train_multiple() (merlion.models.anomaly.dagmm.dagmm method)": [[4, "merlion.models.anomaly.dagmm.DAGMM.train_multiple"]], "train_post_process() (merlion.models.anomaly.base.detectorbase method)": [[4, "merlion.models.anomaly.base.DetectorBase.train_post_process"]], "train_window (merlion.models.anomaly.dbl.dynamicbaseline property)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.train_window"]], "trend (merlion.models.anomaly.dbl.segmenter property)": [[4, "merlion.models.anomaly.dbl.Segmenter.trend"]], "trends (merlion.models.anomaly.dbl.dynamicbaselineconfig property)": [[4, "merlion.models.anomaly.dbl.DynamicBaselineConfig.trends"]], "trends (merlion.models.anomaly.dbl.segmenter property)": [[4, "merlion.models.anomaly.dbl.Segmenter.trends"]], "update() (merlion.models.anomaly.dbl.dynamicbaseline method)": [[4, "merlion.models.anomaly.dbl.DynamicBaseline.update"]], "weekday_key() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.weekday_key"]], "weekly (merlion.models.anomaly.dbl.trend attribute)": [[4, "merlion.models.anomaly.dbl.Trend.weekly"]], "wind_delta (merlion.models.anomaly.dbl.segmenter property)": [[4, "merlion.models.anomaly.dbl.Segmenter.wind_delta"]], "window_key() (merlion.models.anomaly.dbl.segmenter method)": [[4, "merlion.models.anomaly.dbl.Segmenter.window_key"]], "zero_delta (merlion.models.anomaly.dbl.segmenter attribute)": [[4, "merlion.models.anomaly.dbl.Segmenter.zero_delta"]], "auto (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[5, "merlion.models.anomaly.change_point.bocpd.ChangeKind.Auto"]], "bocpd (class in merlion.models.anomaly.change_point.bocpd)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD"]], "bocpdconfig (class in merlion.models.anomaly.change_point.bocpd)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPDConfig"]], "changekind (class in merlion.models.anomaly.change_point.bocpd)": [[5, "merlion.models.anomaly.change_point.bocpd.ChangeKind"]], "levelshift (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[5, "merlion.models.anomaly.change_point.bocpd.ChangeKind.LevelShift"]], "trendchange (merlion.models.anomaly.change_point.bocpd.changekind attribute)": [[5, "merlion.models.anomaly.change_point.bocpd.ChangeKind.TrendChange"]], "change_kind (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.change_kind"]], "change_kind (merlion.models.anomaly.change_point.bocpd.bocpdconfig property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPDConfig.change_kind"]], "config_class (merlion.models.anomaly.change_point.bocpd.bocpd attribute)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.config_class"]], "cp_prior (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.cp_prior"]], "get_anomaly_score() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.get_anomaly_score"]], "get_figure() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.get_figure"]], "lag (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.lag"]], "last_train_time (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.last_train_time"]], "merlion.models.anomaly.change_point": [[5, "module-merlion.models.anomaly.change_point"]], "merlion.models.anomaly.change_point.bocpd": [[5, "module-merlion.models.anomaly.change_point.bocpd"]], "min_likelihood (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.min_likelihood"]], "n_seen (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.n_seen"]], "require_even_sampling (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.require_even_sampling"]], "require_univariate (merlion.models.anomaly.change_point.bocpd.bocpd property)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.require_univariate"]], "train_pre_process() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.train_pre_process"]], "update() (merlion.models.anomaly.change_point.bocpd.bocpd method)": [[5, "merlion.models.anomaly.change_point.bocpd.BOCPD.update"]], "arimadetector (class in merlion.models.anomaly.forecast_based.arima)": [[6, "merlion.models.anomaly.forecast_based.arima.ArimaDetector"]], "arimadetectorconfig (class in merlion.models.anomaly.forecast_based.arima)": [[6, "merlion.models.anomaly.forecast_based.arima.ArimaDetectorConfig"]], "etsdetector (class in merlion.models.anomaly.forecast_based.ets)": [[6, "merlion.models.anomaly.forecast_based.ets.ETSDetector"]], "etsdetectorconfig (class in merlion.models.anomaly.forecast_based.ets)": [[6, "merlion.models.anomaly.forecast_based.ets.ETSDetectorConfig"]], "forecastingdetectorbase (class in merlion.models.anomaly.forecast_based.base)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase"]], "lstmdetector (class in merlion.models.anomaly.forecast_based.lstm)": [[6, "merlion.models.anomaly.forecast_based.lstm.LSTMDetector"]], "lstmdetectorconfig (class in merlion.models.anomaly.forecast_based.lstm)": [[6, "merlion.models.anomaly.forecast_based.lstm.LSTMDetectorConfig"]], "msesdetector (class in merlion.models.anomaly.forecast_based.mses)": [[6, "merlion.models.anomaly.forecast_based.mses.MSESDetector"]], "msesdetectorconfig (class in merlion.models.anomaly.forecast_based.mses)": [[6, "merlion.models.anomaly.forecast_based.mses.MSESDetectorConfig"]], "prophetdetector (class in merlion.models.anomaly.forecast_based.prophet)": [[6, "merlion.models.anomaly.forecast_based.prophet.ProphetDetector"]], "prophetdetectorconfig (class in merlion.models.anomaly.forecast_based.prophet)": [[6, "merlion.models.anomaly.forecast_based.prophet.ProphetDetectorConfig"]], "sarimadetector (class in merlion.models.anomaly.forecast_based.sarima)": [[6, "merlion.models.anomaly.forecast_based.sarima.SarimaDetector"]], "sarimadetectorconfig (class in merlion.models.anomaly.forecast_based.sarima)": [[6, "merlion.models.anomaly.forecast_based.sarima.SarimaDetectorConfig"]], "config_class (merlion.models.anomaly.forecast_based.arima.arimadetector attribute)": [[6, "merlion.models.anomaly.forecast_based.arima.ArimaDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.ets.etsdetector attribute)": [[6, "merlion.models.anomaly.forecast_based.ets.ETSDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.lstm.lstmdetector attribute)": [[6, "merlion.models.anomaly.forecast_based.lstm.LSTMDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.mses.msesdetector attribute)": [[6, "merlion.models.anomaly.forecast_based.mses.MSESDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.prophet.prophetdetector attribute)": [[6, "merlion.models.anomaly.forecast_based.prophet.ProphetDetector.config_class"]], "config_class (merlion.models.anomaly.forecast_based.sarima.sarimadetector attribute)": [[6, "merlion.models.anomaly.forecast_based.sarima.SarimaDetector.config_class"]], "forecast_to_anom_score() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.forecast_to_anom_score"]], "get_anomaly_label() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_anomaly_label"]], "get_anomaly_score() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_anomaly_score"]], "get_anomaly_score() (merlion.models.anomaly.forecast_based.mses.msesdetector method)": [[6, "merlion.models.anomaly.forecast_based.mses.MSESDetector.get_anomaly_score"]], "get_figure() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.get_figure"]], "merlion.models.anomaly.forecast_based": [[6, "module-merlion.models.anomaly.forecast_based"]], "merlion.models.anomaly.forecast_based.arima": [[6, "module-merlion.models.anomaly.forecast_based.arima"]], "merlion.models.anomaly.forecast_based.base": [[6, "module-merlion.models.anomaly.forecast_based.base"]], "merlion.models.anomaly.forecast_based.ets": [[6, "module-merlion.models.anomaly.forecast_based.ets"]], "merlion.models.anomaly.forecast_based.lstm": [[6, "module-merlion.models.anomaly.forecast_based.lstm"]], "merlion.models.anomaly.forecast_based.mses": [[6, "module-merlion.models.anomaly.forecast_based.mses"]], "merlion.models.anomaly.forecast_based.prophet": [[6, "module-merlion.models.anomaly.forecast_based.prophet"]], "merlion.models.anomaly.forecast_based.sarima": [[6, "module-merlion.models.anomaly.forecast_based.sarima"]], "online_updates (merlion.models.anomaly.forecast_based.mses.msesdetector property)": [[6, "merlion.models.anomaly.forecast_based.mses.MSESDetector.online_updates"]], "plot_anomaly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_anomaly"]], "plot_anomaly_plotly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_anomaly_plotly"]], "plot_forecast() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_forecast"]], "plot_forecast_plotly() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.plot_forecast_plotly"]], "train() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.train"]], "train_post_process() (merlion.models.anomaly.forecast_based.base.forecastingdetectorbase method)": [[6, "merlion.models.anomaly.forecast_based.base.ForecastingDetectorBase.train_post_process"]], "acf (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[7, "merlion.models.automl.seasonality.PeriodicityStrategy.ACF"]], "aic (merlion.models.automl.base.informationcriterion attribute)": [[7, "merlion.models.automl.base.InformationCriterion.AIC"]], "aicc (merlion.models.automl.base.informationcriterion attribute)": [[7, "merlion.models.automl.base.InformationCriterion.AICc"]], "all (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[7, "merlion.models.automl.seasonality.PeriodicityStrategy.All"]], "autoets (class in merlion.models.automl.autoets)": [[7, "merlion.models.automl.autoets.AutoETS"]], "autoetsconfig (class in merlion.models.automl.autoets)": [[7, "merlion.models.automl.autoets.AutoETSConfig"]], "automlmixin (class in merlion.models.automl.base)": [[7, "merlion.models.automl.base.AutoMLMixIn"]], "autoprophet (class in merlion.models.automl.autoprophet)": [[7, "merlion.models.automl.autoprophet.AutoProphet"]], "autoprophetconfig (class in merlion.models.automl.autoprophet)": [[7, "merlion.models.automl.autoprophet.AutoProphetConfig"]], "autosarima (class in merlion.models.automl.autosarima)": [[7, "merlion.models.automl.autosarima.AutoSarima"]], "autosarimaconfig (class in merlion.models.automl.autosarima)": [[7, "merlion.models.automl.autosarima.AutoSarimaConfig"]], "bic (merlion.models.automl.base.informationcriterion attribute)": [[7, "merlion.models.automl.base.InformationCriterion.BIC"]], "gridsearch (class in merlion.models.automl.search)": [[7, "merlion.models.automl.search.GridSearch"]], "icautomlforecaster (class in merlion.models.automl.base)": [[7, "merlion.models.automl.base.ICAutoMLForecaster"]], "icconfig (class in merlion.models.automl.base)": [[7, "merlion.models.automl.base.ICConfig"]], "informationcriterion (class in merlion.models.automl.base)": [[7, "merlion.models.automl.base.InformationCriterion"]], "max (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[7, "merlion.models.automl.seasonality.PeriodicityStrategy.Max"]], "min (merlion.models.automl.seasonality.periodicitystrategy attribute)": [[7, "merlion.models.automl.seasonality.PeriodicityStrategy.Min"]], "periodicitystrategy (class in merlion.models.automl.seasonality)": [[7, "merlion.models.automl.seasonality.PeriodicityStrategy"]], "seasonalityconfig (class in merlion.models.automl.seasonality)": [[7, "merlion.models.automl.seasonality.SeasonalityConfig"]], "seasonalitylayer (class in merlion.models.automl.seasonality)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer"]], "seasonalitymodel (class in merlion.models.automl.seasonality)": [[7, "merlion.models.automl.seasonality.SeasonalityModel"]], "config_class (merlion.models.automl.autoets.autoets attribute)": [[7, "merlion.models.automl.autoets.AutoETS.config_class"]], "config_class (merlion.models.automl.autoprophet.autoprophet attribute)": [[7, "merlion.models.automl.autoprophet.AutoProphet.config_class"]], "config_class (merlion.models.automl.autosarima.autosarima attribute)": [[7, "merlion.models.automl.autosarima.AutoSarima.config_class"]], "config_class (merlion.models.automl.base.icautomlforecaster attribute)": [[7, "merlion.models.automl.base.ICAutoMLForecaster.config_class"]], "config_class (merlion.models.automl.seasonality.seasonalitylayer attribute)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.config_class"]], "evaluate_theta() (merlion.models.automl.autosarima.autosarima method)": [[7, "merlion.models.automl.autosarima.AutoSarima.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.base.automlmixin method)": [[7, "merlion.models.automl.base.AutoMLMixIn.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.base.icautomlforecaster method)": [[7, "merlion.models.automl.base.ICAutoMLForecaster.evaluate_theta"]], "evaluate_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.evaluate_theta"]], "generate_theta() (merlion.models.automl.autoets.autoets method)": [[7, "merlion.models.automl.autoets.AutoETS.generate_theta"]], "generate_theta() (merlion.models.automl.autoprophet.autoprophet method)": [[7, "merlion.models.automl.autoprophet.AutoProphet.generate_theta"]], "generate_theta() (merlion.models.automl.autosarima.autosarima method)": [[7, "merlion.models.automl.autosarima.AutoSarima.generate_theta"]], "generate_theta() (merlion.models.automl.base.automlmixin method)": [[7, "merlion.models.automl.base.AutoMLMixIn.generate_theta"]], "generate_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.generate_theta"]], "get_ic() (merlion.models.automl.autoets.autoets method)": [[7, "merlion.models.automl.autoets.AutoETS.get_ic"]], "get_ic() (merlion.models.automl.autoprophet.autoprophet method)": [[7, "merlion.models.automl.autoprophet.AutoProphet.get_ic"]], "get_ic() (merlion.models.automl.base.icautomlforecaster method)": [[7, "merlion.models.automl.base.ICAutoMLForecaster.get_ic"]], "information_criterion (merlion.models.automl.base.icautomlforecaster property)": [[7, "merlion.models.automl.base.ICAutoMLForecaster.information_criterion"]], "information_criterion (merlion.models.automl.base.icconfig property)": [[7, "merlion.models.automl.base.ICConfig.information_criterion"]], "max_lag (merlion.models.automl.seasonality.seasonalitylayer property)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.max_lag"]], "merlion.models.automl": [[7, "module-merlion.models.automl"]], "merlion.models.automl.autoets": [[7, "module-merlion.models.automl.autoets"]], "merlion.models.automl.autoprophet": [[7, "module-merlion.models.automl.autoprophet"]], "merlion.models.automl.autosarima": [[7, "module-merlion.models.automl.autosarima"]], "merlion.models.automl.base": [[7, "module-merlion.models.automl.base"]], "merlion.models.automl.search": [[7, "module-merlion.models.automl.search"]], "merlion.models.automl.seasonality": [[7, "module-merlion.models.automl.seasonality"]], "multi_seasonality (merlion.models.automl.autoprophet.autoprophetconfig property)": [[7, "merlion.models.automl.autoprophet.AutoProphetConfig.multi_seasonality"]], "multi_seasonality (merlion.models.automl.seasonality.seasonalityconfig property)": [[7, "merlion.models.automl.seasonality.SeasonalityConfig.multi_seasonality"]], "multi_seasonality (merlion.models.automl.seasonality.seasonalitylayer property)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.multi_seasonality"]], "order (merlion.models.automl.autosarima.autosarimaconfig property)": [[7, "merlion.models.automl.autosarima.AutoSarimaConfig.order"]], "periodicity_strategy (merlion.models.automl.seasonality.seasonalityconfig property)": [[7, "merlion.models.automl.seasonality.SeasonalityConfig.periodicity_strategy"]], "periodicity_strategy (merlion.models.automl.seasonality.seasonalitylayer property)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.periodicity_strategy"]], "pval (merlion.models.automl.seasonality.seasonalitylayer property)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.pval"]], "require_even_sampling (merlion.models.automl.seasonality.seasonalitylayer property)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.require_even_sampling"]], "require_univariate (merlion.models.automl.seasonality.seasonalitylayer property)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.require_univariate"]], "seasonal_order (merlion.models.automl.autosarima.autosarimaconfig property)": [[7, "merlion.models.automl.autosarima.AutoSarimaConfig.seasonal_order"]], "set_seasonality() (merlion.models.automl.seasonality.seasonalitymodel method)": [[7, "merlion.models.automl.seasonality.SeasonalityModel.set_seasonality"]], "set_theta() (merlion.models.automl.autoets.autoets method)": [[7, "merlion.models.automl.autoets.AutoETS.set_theta"]], "set_theta() (merlion.models.automl.autoprophet.autoprophet method)": [[7, "merlion.models.automl.autoprophet.AutoProphet.set_theta"]], "set_theta() (merlion.models.automl.autosarima.autosarima method)": [[7, "merlion.models.automl.autosarima.AutoSarima.set_theta"]], "set_theta() (merlion.models.automl.base.automlmixin method)": [[7, "merlion.models.automl.base.AutoMLMixIn.set_theta"]], "set_theta() (merlion.models.automl.seasonality.seasonalitylayer method)": [[7, "merlion.models.automl.seasonality.SeasonalityLayer.set_theta"]], "combinerbase (class in merlion.models.ensemble.combine)": [[8, "merlion.models.ensemble.combine.CombinerBase"]], "combinerfactory (class in merlion.models.ensemble.combine)": [[8, "merlion.models.ensemble.combine.CombinerFactory"]], "detectorensemble (class in merlion.models.ensemble.anomaly)": [[8, "merlion.models.ensemble.anomaly.DetectorEnsemble"]], "detectorensembleconfig (class in merlion.models.ensemble.anomaly)": [[8, "merlion.models.ensemble.anomaly.DetectorEnsembleConfig"]], "detectorensembletrainconfig (class in merlion.models.ensemble.anomaly)": [[8, "merlion.models.ensemble.anomaly.DetectorEnsembleTrainConfig"]], "ensemblebase (class in merlion.models.ensemble.base)": [[8, "merlion.models.ensemble.base.EnsembleBase"]], "ensembleconfig (class in merlion.models.ensemble.base)": [[8, "merlion.models.ensemble.base.EnsembleConfig"]], "ensembletrainconfig (class in merlion.models.ensemble.base)": [[8, "merlion.models.ensemble.base.EnsembleTrainConfig"]], "forecasterensemble (class in merlion.models.ensemble.forecast)": [[8, "merlion.models.ensemble.forecast.ForecasterEnsemble"]], "forecasterensembleconfig (class in merlion.models.ensemble.forecast)": [[8, "merlion.models.ensemble.forecast.ForecasterEnsembleConfig"]], "max (class in merlion.models.ensemble.combine)": [[8, "merlion.models.ensemble.combine.Max"]], "mean (class in merlion.models.ensemble.combine)": [[8, "merlion.models.ensemble.combine.Mean"]], "median (class in merlion.models.ensemble.combine)": [[8, "merlion.models.ensemble.combine.Median"]], "metricweightedmean (class in merlion.models.ensemble.combine)": [[8, "merlion.models.ensemble.combine.MetricWeightedMean"]], "modelselector (class in merlion.models.ensemble.combine)": [[8, "merlion.models.ensemble.combine.ModelSelector"]], "__call__() (merlion.models.ensemble.combine.combinerbase method)": [[8, "merlion.models.ensemble.combine.CombinerBase.__call__"]], "combiner (merlion.models.ensemble.base.ensemblebase property)": [[8, "merlion.models.ensemble.base.EnsembleBase.combiner"]], "config_class (merlion.models.ensemble.anomaly.detectorensemble attribute)": [[8, "merlion.models.ensemble.anomaly.DetectorEnsemble.config_class"]], "config_class (merlion.models.ensemble.base.ensemblebase attribute)": [[8, "merlion.models.ensemble.base.EnsembleBase.config_class"]], "config_class (merlion.models.ensemble.forecast.forecasterensemble attribute)": [[8, "merlion.models.ensemble.forecast.ForecasterEnsemble.config_class"]], "create() (merlion.models.ensemble.combine.combinerfactory class method)": [[8, "merlion.models.ensemble.combine.CombinerFactory.create"]], "from_dict() (merlion.models.ensemble.combine.combinerbase class method)": [[8, "merlion.models.ensemble.combine.CombinerBase.from_dict"]], "from_dict() (merlion.models.ensemble.combine.modelselector class method)": [[8, "merlion.models.ensemble.combine.ModelSelector.from_dict"]], "get_max_common_horizon() (merlion.models.ensemble.base.ensemblebase method)": [[8, "merlion.models.ensemble.base.EnsembleBase.get_max_common_horizon"]], "get_model_used() (merlion.models.ensemble.combine.combinerbase method)": [[8, "merlion.models.ensemble.combine.CombinerBase.get_model_used"]], "invert (merlion.models.ensemble.combine.modelselector property)": [[8, "merlion.models.ensemble.combine.ModelSelector.invert"]], "merlion.models.ensemble": [[8, "module-merlion.models.ensemble"]], "merlion.models.ensemble.anomaly": [[8, "module-merlion.models.ensemble.anomaly"]], "merlion.models.ensemble.base": [[8, "module-merlion.models.ensemble.base"]], "merlion.models.ensemble.combine": [[8, "module-merlion.models.ensemble.combine"]], "merlion.models.ensemble.forecast": [[8, "module-merlion.models.ensemble.forecast"]], "models (merlion.models.ensemble.base.ensemblebase property)": [[8, "merlion.models.ensemble.base.EnsembleBase.models"]], "models (merlion.models.ensemble.base.ensembleconfig attribute)": [[8, "merlion.models.ensemble.base.EnsembleConfig.models"]], "models_used (merlion.models.ensemble.base.ensemblebase property)": [[8, "merlion.models.ensemble.base.EnsembleBase.models_used"]], "models_used (merlion.models.ensemble.combine.combinerbase property)": [[8, "merlion.models.ensemble.combine.CombinerBase.models_used"]], "per_model_threshold (merlion.models.ensemble.anomaly.detectorensemble property)": [[8, "merlion.models.ensemble.anomaly.DetectorEnsemble.per_model_threshold"]], "per_model_threshold (merlion.models.ensemble.anomaly.detectorensembleconfig property)": [[8, "merlion.models.ensemble.anomaly.DetectorEnsembleConfig.per_model_threshold"]], "require_even_sampling (merlion.models.ensemble.anomaly.detectorensemble property)": [[8, "merlion.models.ensemble.anomaly.DetectorEnsemble.require_even_sampling"]], "require_even_sampling (merlion.models.ensemble.forecast.forecasterensemble property)": [[8, "merlion.models.ensemble.forecast.ForecasterEnsemble.require_even_sampling"]], "require_univariate (merlion.models.ensemble.anomaly.detectorensemble property)": [[8, "merlion.models.ensemble.anomaly.DetectorEnsemble.require_univariate"]], "requires_training (merlion.models.ensemble.combine.combinerbase property)": [[8, "merlion.models.ensemble.combine.CombinerBase.requires_training"]], "requires_training (merlion.models.ensemble.combine.modelselector property)": [[8, "merlion.models.ensemble.combine.ModelSelector.requires_training"]], "resample_time_stamps() (merlion.models.ensemble.forecast.forecasterensemble method)": [[8, "merlion.models.ensemble.forecast.ForecasterEnsemble.resample_time_stamps"]], "reset() (merlion.models.ensemble.base.ensemblebase method)": [[8, "merlion.models.ensemble.base.EnsembleBase.reset"]], "reset() (merlion.models.ensemble.combine.combinerbase method)": [[8, "merlion.models.ensemble.combine.CombinerBase.reset"]], "save() (merlion.models.ensemble.base.ensemblebase method)": [[8, "merlion.models.ensemble.base.EnsembleBase.save"]], "set_model_used() (merlion.models.ensemble.combine.combinerbase method)": [[8, "merlion.models.ensemble.combine.CombinerBase.set_model_used"]], "target_seq_index (merlion.models.ensemble.forecast.forecasterensembleconfig property)": [[8, "merlion.models.ensemble.forecast.ForecasterEnsembleConfig.target_seq_index"]], "to_bytes() (merlion.models.ensemble.base.ensemblebase method)": [[8, "merlion.models.ensemble.base.EnsembleBase.to_bytes"]], "to_dict() (merlion.models.ensemble.base.ensembleconfig method)": [[8, "merlion.models.ensemble.base.EnsembleConfig.to_dict"]], "to_dict() (merlion.models.ensemble.combine.combinerbase method)": [[8, "merlion.models.ensemble.combine.CombinerBase.to_dict"]], "to_dict() (merlion.models.ensemble.combine.modelselector method)": [[8, "merlion.models.ensemble.combine.ModelSelector.to_dict"]], "train() (merlion.models.ensemble.combine.combinerbase method)": [[8, "merlion.models.ensemble.combine.CombinerBase.train"]], "train() (merlion.models.ensemble.combine.modelselector method)": [[8, "merlion.models.ensemble.combine.ModelSelector.train"]], "train_combiner() (merlion.models.ensemble.base.ensemblebase method)": [[8, "merlion.models.ensemble.base.EnsembleBase.train_combiner"]], "train_combiner() (merlion.models.ensemble.forecast.forecasterensemble method)": [[8, "merlion.models.ensemble.forecast.ForecasterEnsemble.train_combiner"]], "train_pre_process() (merlion.models.ensemble.forecast.forecasterensemble method)": [[8, "merlion.models.ensemble.forecast.ForecasterEnsemble.train_pre_process"]], "train_valid_split() (merlion.models.ensemble.base.ensemblebase method)": [[8, "merlion.models.ensemble.base.EnsembleBase.train_valid_split"]], "weights (merlion.models.ensemble.combine.mean property)": [[8, "merlion.models.ensemble.combine.Mean.weights"]], "weights (merlion.models.ensemble.combine.metricweightedmean property)": [[8, "merlion.models.ensemble.combine.MetricWeightedMean.weights"]], "arima (class in merlion.models.forecast.arima)": [[9, "merlion.models.forecast.arima.Arima"]], "arimaconfig (class in merlion.models.forecast.arima)": [[9, "merlion.models.forecast.arima.ArimaConfig"]], "deltaestimator (class in merlion.models.forecast.smoother)": [[9, "merlion.models.forecast.smoother.DeltaEstimator"]], "deltastats (class in merlion.models.forecast.smoother)": [[9, "merlion.models.forecast.smoother.DeltaStats"]], "ets (class in merlion.models.forecast.ets)": [[9, "merlion.models.forecast.ets.ETS"]], "etsconfig (class in merlion.models.forecast.ets)": [[9, "merlion.models.forecast.ets.ETSConfig"]], "extratreesforecaster (class in merlion.models.forecast.trees)": [[9, "merlion.models.forecast.trees.ExtraTreesForecaster"]], "extratreesforecasterconfig (class in merlion.models.forecast.trees)": [[9, "merlion.models.forecast.trees.ExtraTreesForecasterConfig"]], "forecasterbase (class in merlion.models.forecast.base)": [[9, "merlion.models.forecast.base.ForecasterBase"]], "forecasterconfig (class in merlion.models.forecast.base)": [[9, "merlion.models.forecast.base.ForecasterConfig"]], "forecasterexogbase (class in merlion.models.forecast.base)": [[9, "merlion.models.forecast.base.ForecasterExogBase"]], "forecasterexogconfig (class in merlion.models.forecast.base)": [[9, "merlion.models.forecast.base.ForecasterExogConfig"]], "lgbmforecaster (class in merlion.models.forecast.trees)": [[9, "merlion.models.forecast.trees.LGBMForecaster"]], "lgbmforecasterconfig (class in merlion.models.forecast.trees)": [[9, "merlion.models.forecast.trees.LGBMForecasterConfig"]], "lstm (class in merlion.models.forecast.lstm)": [[9, "merlion.models.forecast.lstm.LSTM"]], "lstmconfig (class in merlion.models.forecast.lstm)": [[9, "merlion.models.forecast.lstm.LSTMConfig"]], "lstmtrainconfig (class in merlion.models.forecast.lstm)": [[9, "merlion.models.forecast.lstm.LSTMTrainConfig"]], "mses (class in merlion.models.forecast.smoother)": [[9, "merlion.models.forecast.smoother.MSES"]], "msesconfig (class in merlion.models.forecast.smoother)": [[9, "merlion.models.forecast.smoother.MSESConfig"]], "msestrainconfig (class in merlion.models.forecast.smoother)": [[9, "merlion.models.forecast.smoother.MSESTrainConfig"]], "prophet (class in merlion.models.forecast.prophet)": [[9, "merlion.models.forecast.prophet.Prophet"]], "prophetconfig (class in merlion.models.forecast.prophet)": [[9, "merlion.models.forecast.prophet.ProphetConfig"]], "randomforestforecaster (class in merlion.models.forecast.trees)": [[9, "merlion.models.forecast.trees.RandomForestForecaster"]], "randomforestforecasterconfig (class in merlion.models.forecast.trees)": [[9, "merlion.models.forecast.trees.RandomForestForecasterConfig"]], "sklearnforecaster (class in merlion.models.forecast.sklearn_base)": [[9, "merlion.models.forecast.sklearn_base.SKLearnForecaster"]], "sklearnforecasterconfig (class in merlion.models.forecast.sklearn_base)": [[9, "merlion.models.forecast.sklearn_base.SKLearnForecasterConfig"]], "sarima (class in merlion.models.forecast.sarima)": [[9, "merlion.models.forecast.sarima.Sarima"]], "sarimaconfig (class in merlion.models.forecast.sarima)": [[9, "merlion.models.forecast.sarima.SarimaConfig"]], "treeensembleforecasterconfig (class in merlion.models.forecast.trees)": [[9, "merlion.models.forecast.trees.TreeEnsembleForecasterConfig"]], "vectorar (class in merlion.models.forecast.vector_ar)": [[9, "merlion.models.forecast.vector_ar.VectorAR"]], "vectorarconfig (class in merlion.models.forecast.vector_ar)": [[9, "merlion.models.forecast.vector_ar.VectorARConfig"]], "acc_max_scale (merlion.models.forecast.smoother.deltaestimator property)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.acc_max_scale"]], "acceleration() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.acceleration"]], "add_seasonality (merlion.models.forecast.prophet.prophet property)": [[9, "merlion.models.forecast.prophet.Prophet.add_seasonality"]], "backsteps (merlion.models.forecast.smoother.mses property)": [[9, "merlion.models.forecast.smoother.MSES.backsteps"]], "backsteps (merlion.models.forecast.smoother.msesconfig property)": [[9, "merlion.models.forecast.smoother.MSESConfig.backsteps"]], "batch_forecast() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.batch_forecast"]], "config_class (merlion.models.forecast.arima.arima attribute)": [[9, "merlion.models.forecast.arima.Arima.config_class"]], "config_class (merlion.models.forecast.base.forecasterbase attribute)": [[9, "merlion.models.forecast.base.ForecasterBase.config_class"]], "config_class (merlion.models.forecast.ets.ets attribute)": [[9, "merlion.models.forecast.ets.ETS.config_class"]], "config_class (merlion.models.forecast.lstm.lstm attribute)": [[9, "merlion.models.forecast.lstm.LSTM.config_class"]], "config_class (merlion.models.forecast.prophet.prophet attribute)": [[9, "merlion.models.forecast.prophet.Prophet.config_class"]], "config_class (merlion.models.forecast.sarima.sarima attribute)": [[9, "merlion.models.forecast.sarima.Sarima.config_class"]], "config_class (merlion.models.forecast.sklearn_base.sklearnforecaster attribute)": [[9, "merlion.models.forecast.sklearn_base.SKLearnForecaster.config_class"]], "config_class (merlion.models.forecast.smoother.mses attribute)": [[9, "merlion.models.forecast.smoother.MSES.config_class"]], "config_class (merlion.models.forecast.trees.extratreesforecaster attribute)": [[9, "merlion.models.forecast.trees.ExtraTreesForecaster.config_class"]], "config_class (merlion.models.forecast.trees.lgbmforecaster attribute)": [[9, "merlion.models.forecast.trees.LGBMForecaster.config_class"]], "config_class (merlion.models.forecast.trees.randomforestforecaster attribute)": [[9, "merlion.models.forecast.trees.RandomForestForecaster.config_class"]], "config_class (merlion.models.forecast.vector_ar.vectorar attribute)": [[9, "merlion.models.forecast.vector_ar.VectorAR.config_class"]], "daily_seasonality (merlion.models.forecast.prophet.prophet property)": [[9, "merlion.models.forecast.prophet.Prophet.daily_seasonality"]], "damped_trend (merlion.models.forecast.ets.ets property)": [[9, "merlion.models.forecast.ets.ETS.damped_trend"]], "data (merlion.models.forecast.smoother.deltaestimator property)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.data"]], "delta_hat() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.delta_hat"]], "error (merlion.models.forecast.ets.ets property)": [[9, "merlion.models.forecast.ets.ETS.error"]], "exog_aggregation_policy (merlion.models.forecast.base.forecasterexogbase property)": [[9, "merlion.models.forecast.base.ForecasterExogBase.exog_aggregation_policy"]], "exog_aggregation_policy (merlion.models.forecast.base.forecasterexogconfig property)": [[9, "merlion.models.forecast.base.ForecasterExogConfig.exog_aggregation_policy"]], "exog_missing_value_policy (merlion.models.forecast.base.forecasterexogbase property)": [[9, "merlion.models.forecast.base.ForecasterExogBase.exog_missing_value_policy"]], "exog_missing_value_policy (merlion.models.forecast.base.forecasterexogconfig property)": [[9, "merlion.models.forecast.base.ForecasterExogConfig.exog_missing_value_policy"]], "exog_transform (merlion.models.forecast.base.forecasterexogbase property)": [[9, "merlion.models.forecast.base.ForecasterExogBase.exog_transform"]], "exog_transform (merlion.models.forecast.base.forecasterexogconfig attribute)": [[9, "merlion.models.forecast.base.ForecasterExogConfig.exog_transform"]], "forecast() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.forecast"]], "get_figure() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.get_figure"]], "holidays (merlion.models.forecast.prophet.prophet property)": [[9, "merlion.models.forecast.prophet.Prophet.holidays"]], "invert_transform (merlion.models.forecast.base.forecasterbase property)": [[9, "merlion.models.forecast.base.ForecasterBase.invert_transform"]], "invert_transform (merlion.models.forecast.base.forecasterconfig attribute)": [[9, "merlion.models.forecast.base.ForecasterConfig.invert_transform"]], "lag (merlion.models.forecast.smoother.deltastats property)": [[9, "merlion.models.forecast.smoother.DeltaStats.lag"]], "loss_err() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.loss_err"]], "marginalize_xhat_h() (merlion.models.forecast.smoother.mses method)": [[9, "merlion.models.forecast.smoother.MSES.marginalize_xhat_h"]], "max_forecast_steps (merlion.models.forecast.base.forecasterbase property)": [[9, "merlion.models.forecast.base.ForecasterBase.max_forecast_steps"]], "max_forecast_steps (merlion.models.forecast.base.forecasterconfig attribute)": [[9, "merlion.models.forecast.base.ForecasterConfig.max_forecast_steps"]], "max_horizon (merlion.models.forecast.smoother.mses property)": [[9, "merlion.models.forecast.smoother.MSES.max_horizon"]], "max_scale (merlion.models.forecast.smoother.deltaestimator property)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.max_scale"]], "max_scale (merlion.models.forecast.smoother.msesconfig property)": [[9, "merlion.models.forecast.smoother.MSESConfig.max_scale"]], "maxlags (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[9, "merlion.models.forecast.sklearn_base.SKLearnForecaster.maxlags"]], "maxlags (merlion.models.forecast.vector_ar.vectorar property)": [[9, "merlion.models.forecast.vector_ar.VectorAR.maxlags"]], "merlion.models.forecast": [[9, "module-merlion.models.forecast"]], "merlion.models.forecast.arima": [[9, "module-merlion.models.forecast.arima"]], "merlion.models.forecast.base": [[9, "module-merlion.models.forecast.base"]], "merlion.models.forecast.ets": [[9, "module-merlion.models.forecast.ets"]], "merlion.models.forecast.lstm": [[9, "module-merlion.models.forecast.lstm"]], "merlion.models.forecast.prophet": [[9, "module-merlion.models.forecast.prophet"]], "merlion.models.forecast.sarima": [[9, "module-merlion.models.forecast.sarima"]], "merlion.models.forecast.sklearn_base": [[9, "module-merlion.models.forecast.sklearn_base"]], "merlion.models.forecast.smoother": [[9, "module-merlion.models.forecast.smoother"]], "merlion.models.forecast.trees": [[9, "module-merlion.models.forecast.trees"]], "merlion.models.forecast.vector_ar": [[9, "module-merlion.models.forecast.vector_ar"]], "model (merlion.models.forecast.sklearn_base.sklearnforecaster attribute)": [[9, "merlion.models.forecast.sklearn_base.SKLearnForecaster.model"]], "neg_err() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.neg_err"]], "order (merlion.models.forecast.sarima.sarima property)": [[9, "merlion.models.forecast.sarima.Sarima.order"]], "plot_forecast() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.plot_forecast"]], "plot_forecast_plotly() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.plot_forecast_plotly"]], "pos_err() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.pos_err"]], "prediction_stride (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[9, "merlion.models.forecast.sklearn_base.SKLearnForecaster.prediction_stride"]], "process_losses() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.process_losses"]], "require_even_sampling (merlion.models.forecast.ets.ets property)": [[9, "merlion.models.forecast.ets.ETS.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.lstm.lstm property)": [[9, "merlion.models.forecast.lstm.LSTM.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.prophet.prophet property)": [[9, "merlion.models.forecast.prophet.Prophet.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.sarima.sarima property)": [[9, "merlion.models.forecast.sarima.Sarima.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[9, "merlion.models.forecast.sklearn_base.SKLearnForecaster.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.smoother.mses property)": [[9, "merlion.models.forecast.smoother.MSES.require_even_sampling"]], "require_even_sampling (merlion.models.forecast.vector_ar.vectorar property)": [[9, "merlion.models.forecast.vector_ar.VectorAR.require_even_sampling"]], "require_univariate (merlion.models.forecast.base.forecasterbase property)": [[9, "merlion.models.forecast.base.ForecasterBase.require_univariate"]], "require_univariate (merlion.models.forecast.sklearn_base.sklearnforecaster property)": [[9, "merlion.models.forecast.sklearn_base.SKLearnForecaster.require_univariate"]], "resample_time_stamps() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.resample_time_stamps"]], "resample_time_stamps() (merlion.models.forecast.prophet.prophet method)": [[9, "merlion.models.forecast.prophet.Prophet.resample_time_stamps"]], "rho (merlion.models.forecast.smoother.mses property)": [[9, "merlion.models.forecast.smoother.MSES.rho"]], "seasonal (merlion.models.forecast.ets.ets property)": [[9, "merlion.models.forecast.ets.ETS.seasonal"]], "seasonal_order (merlion.models.forecast.arima.arimaconfig property)": [[9, "merlion.models.forecast.arima.ArimaConfig.seasonal_order"]], "seasonal_order (merlion.models.forecast.sarima.sarima property)": [[9, "merlion.models.forecast.sarima.Sarima.seasonal_order"]], "seasonal_periods (merlion.models.forecast.ets.ets property)": [[9, "merlion.models.forecast.ets.ETS.seasonal_periods"]], "seasonality_mode (merlion.models.forecast.prophet.prophet property)": [[9, "merlion.models.forecast.prophet.Prophet.seasonality_mode"]], "set_seasonality() (merlion.models.forecast.ets.ets method)": [[9, "merlion.models.forecast.ets.ETS.set_seasonality"]], "set_seasonality() (merlion.models.forecast.prophet.prophet method)": [[9, "merlion.models.forecast.prophet.Prophet.set_seasonality"]], "set_seasonality() (merlion.models.forecast.sarima.sarima method)": [[9, "merlion.models.forecast.sarima.Sarima.set_seasonality"]], "supports_exog (merlion.models.forecast.base.forecasterbase property)": [[9, "merlion.models.forecast.base.ForecasterBase.supports_exog"]], "supports_exog (merlion.models.forecast.base.forecasterexogbase property)": [[9, "merlion.models.forecast.base.ForecasterExogBase.supports_exog"]], "target_name (merlion.models.forecast.base.forecasterbase attribute)": [[9, "merlion.models.forecast.base.ForecasterBase.target_name"]], "target_seq_index (merlion.models.forecast.base.forecasterbase property)": [[9, "merlion.models.forecast.base.ForecasterBase.target_seq_index"]], "target_seq_index (merlion.models.forecast.base.forecasterconfig attribute)": [[9, "merlion.models.forecast.base.ForecasterConfig.target_seq_index"]], "train() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.train"]], "train() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.train"]], "train_post_process() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.train_post_process"]], "train_pre_process() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.train_pre_process"]], "transform_exog_data() (merlion.models.forecast.base.forecasterbase method)": [[9, "merlion.models.forecast.base.ForecasterBase.transform_exog_data"]], "transform_exog_data() (merlion.models.forecast.base.forecasterexogbase method)": [[9, "merlion.models.forecast.base.ForecasterExogBase.transform_exog_data"]], "trend (merlion.models.forecast.ets.ets property)": [[9, "merlion.models.forecast.ets.ETS.trend"]], "tune() (merlion.models.forecast.smoother.deltastats method)": [[9, "merlion.models.forecast.smoother.DeltaStats.tune"]], "uncertainty_samples (merlion.models.forecast.prophet.prophet property)": [[9, "merlion.models.forecast.prophet.Prophet.uncertainty_samples"]], "update() (merlion.models.forecast.smoother.mses method)": [[9, "merlion.models.forecast.smoother.MSES.update"]], "update_acceleration() (merlion.models.forecast.smoother.deltastats method)": [[9, "merlion.models.forecast.smoother.DeltaStats.update_acceleration"]], "update_loss() (merlion.models.forecast.smoother.deltastats method)": [[9, "merlion.models.forecast.smoother.DeltaStats.update_loss"]], "update_velocity() (merlion.models.forecast.smoother.deltastats method)": [[9, "merlion.models.forecast.smoother.DeltaStats.update_velocity"]], "vel_err() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.vel_err"]], "velocity() (merlion.models.forecast.smoother.deltaestimator method)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.velocity"]], "weekly_seasonality (merlion.models.forecast.prophet.prophet property)": [[9, "merlion.models.forecast.prophet.Prophet.weekly_seasonality"]], "x (merlion.models.forecast.smoother.deltaestimator property)": [[9, "merlion.models.forecast.smoother.DeltaEstimator.x"]], "xhat_h() (merlion.models.forecast.smoother.mses method)": [[9, "merlion.models.forecast.smoother.MSES.xhat_h"]], "yearly_seasonality (merlion.models.forecast.prophet.prophet property)": [[9, "merlion.models.forecast.prophet.Prophet.yearly_seasonality"]], "kpss_stationaritytest() (in module merlion.models.utils.autosarima_utils)": [[10, "merlion.models.utils.autosarima_utils.KPSS_stationaritytest"]], "rollingwindowdataset (class in merlion.models.utils.rolling_window_dataset)": [[10, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset"]], "autoregressive (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[10, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.autoregressive"]], "collate_batch() (merlion.models.utils.rolling_window_dataset.rollingwindowdataset method)": [[10, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.collate_batch"]], "detect_maxiter_sarima_model() (in module merlion.models.utils.autosarima_utils)": [[10, "merlion.models.utils.autosarima_utils.detect_maxiter_sarima_model"]], "diff() (in module merlion.models.utils.autosarima_utils)": [[10, "merlion.models.utils.autosarima_utils.diff"]], "merlion.models.utils": [[10, "module-merlion.models.utils"]], "merlion.models.utils.autosarima_utils": [[10, "module-merlion.models.utils.autosarima_utils"]], "merlion.models.utils.rolling_window_dataset": [[10, "module-merlion.models.utils.rolling_window_dataset"]], "n_points (merlion.models.utils.rolling_window_dataset.rollingwindowdataset property)": [[10, "merlion.models.utils.rolling_window_dataset.RollingWindowDataset.n_points"]], "ndiffs() (in module merlion.models.utils.autosarima_utils)": [[10, "merlion.models.utils.autosarima_utils.ndiffs"]], "nsdiffs() (in module merlion.models.utils.autosarima_utils)": [[10, "merlion.models.utils.autosarima_utils.nsdiffs"]], "seas_seasonalstationaritytest() (in module merlion.models.utils.autosarima_utils)": [[10, "merlion.models.utils.autosarima_utils.seas_seasonalstationaritytest"]], "adaptiveaggregatealarms (class in merlion.post_process.threshold)": [[11, "merlion.post_process.threshold.AdaptiveAggregateAlarms"]], "adaptivethreshold (class in merlion.post_process.threshold)": [[11, "merlion.post_process.threshold.AdaptiveThreshold"]], "aggregatealarms (class in merlion.post_process.threshold)": [[11, "merlion.post_process.threshold.AggregateAlarms"]], "anomscorecalibrator (class in merlion.post_process.calibrate)": [[11, "merlion.post_process.calibrate.AnomScoreCalibrator"]], "f1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.F1"]], "f2 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.F2"]], "f5 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.F5"]], "meantimetodetect (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.MeanTimeToDetect"]], "nabscore (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.NABScore"]], "nabscorelowfn (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.NABScoreLowFN"]], "nabscorelowfp (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.NABScoreLowFP"]], "pointadjustedf1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedF1"]], "pointadjustedprecision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedPrecision"]], "pointadjustedrecall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.PointAdjustedRecall"]], "pointwisef1 (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.PointwiseF1"]], "pointwiseprecision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.PointwisePrecision"]], "pointwiserecall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.PointwiseRecall"]], "postrulebase (class in merlion.post_process.base)": [[11, "merlion.post_process.base.PostRuleBase"]], "postrulefactory (class in merlion.post_process.factory)": [[11, "merlion.post_process.factory.PostRuleFactory"]], "postrulesequence (class in merlion.post_process.sequence)": [[11, "merlion.post_process.sequence.PostRuleSequence"]], "precision (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.Precision"]], "recall (merlion.post_process.threshold.threshold.tsadmetric attribute)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric.Recall"]], "threshold (class in merlion.post_process.threshold)": [[11, "merlion.post_process.threshold.Threshold"]], "threshold.tsadmetric (class in merlion.post_process.threshold)": [[11, "merlion.post_process.threshold.Threshold.TSADMetric"]], "abs_score (merlion.post_process.threshold.aggregatealarms property)": [[11, "merlion.post_process.threshold.AggregateAlarms.abs_score"]], "alm_threshold (merlion.post_process.threshold.aggregatealarms property)": [[11, "merlion.post_process.threshold.AggregateAlarms.alm_threshold"]], "anchors (merlion.post_process.calibrate.anomscorecalibrator property)": [[11, "merlion.post_process.calibrate.AnomScoreCalibrator.anchors"]], "bin_sz (merlion.post_process.threshold.adaptiveaggregatealarms property)": [[11, "merlion.post_process.threshold.AdaptiveAggregateAlarms.bin_sz"]], "create() (merlion.post_process.factory.postrulefactory class method)": [[11, "merlion.post_process.factory.PostRuleFactory.create"]], "default_hist_gap_thres (merlion.post_process.threshold.adaptiveaggregatealarms property)": [[11, "merlion.post_process.threshold.AdaptiveAggregateAlarms.default_hist_gap_thres"]], "filter() (merlion.post_process.threshold.aggregatealarms method)": [[11, "merlion.post_process.threshold.AggregateAlarms.filter"]], "from_dict() (merlion.post_process.base.postrulebase class method)": [[11, "merlion.post_process.base.PostRuleBase.from_dict"]], "from_dict() (merlion.post_process.sequence.postrulesequence class method)": [[11, "merlion.post_process.sequence.PostRuleSequence.from_dict"]], "get_adaptive_thres() (in module merlion.post_process.threshold)": [[11, "merlion.post_process.threshold.get_adaptive_thres"]], "get_post_rule_class() (merlion.post_process.factory.postrulefactory class method)": [[11, "merlion.post_process.factory.PostRuleFactory.get_post_rule_class"]], "merlion.post_process": [[11, "module-merlion.post_process"]], "merlion.post_process.base": [[11, "module-merlion.post_process.base"]], "merlion.post_process.calibrate": [[11, "module-merlion.post_process.calibrate"]], "merlion.post_process.factory": [[11, "module-merlion.post_process.factory"]], "merlion.post_process.sequence": [[11, "module-merlion.post_process.sequence"]], "merlion.post_process.threshold": [[11, "module-merlion.post_process.threshold"]], "suppress_secs (merlion.post_process.threshold.aggregatealarms property)": [[11, "merlion.post_process.threshold.AggregateAlarms.suppress_secs"]], "threshold_class (merlion.post_process.threshold.adaptiveaggregatealarms attribute)": [[11, "merlion.post_process.threshold.AdaptiveAggregateAlarms.threshold_class"]], "threshold_class (merlion.post_process.threshold.aggregatealarms attribute)": [[11, "merlion.post_process.threshold.AggregateAlarms.threshold_class"]], "to_dict() (merlion.post_process.base.postrulebase method)": [[11, "merlion.post_process.base.PostRuleBase.to_dict"]], "to_dict() (merlion.post_process.sequence.postrulesequence method)": [[11, "merlion.post_process.sequence.PostRuleSequence.to_dict"]], "to_simple_threshold() (merlion.post_process.threshold.aggregatealarms method)": [[11, "merlion.post_process.threshold.AggregateAlarms.to_simple_threshold"]], "to_simple_threshold() (merlion.post_process.threshold.threshold method)": [[11, "merlion.post_process.threshold.Threshold.to_simple_threshold"]], "train() (merlion.post_process.base.postrulebase method)": [[11, "merlion.post_process.base.PostRuleBase.train"]], "train() (merlion.post_process.calibrate.anomscorecalibrator method)": [[11, "merlion.post_process.calibrate.AnomScoreCalibrator.train"]], "train() (merlion.post_process.sequence.postrulesequence method)": [[11, "merlion.post_process.sequence.PostRuleSequence.train"]], "train() (merlion.post_process.threshold.adaptivethreshold method)": [[11, "merlion.post_process.threshold.AdaptiveThreshold.train"]], "train() (merlion.post_process.threshold.aggregatealarms method)": [[11, "merlion.post_process.threshold.AggregateAlarms.train"]], "train() (merlion.post_process.threshold.threshold method)": [[11, "merlion.post_process.threshold.Threshold.train"]], "window_secs (merlion.post_process.threshold.aggregatealarms property)": [[11, "merlion.post_process.threshold.AggregateAlarms.window_secs"]], "tsid_col_name (in module merlion.spark.dataset)": [[12, "merlion.spark.dataset.TSID_COL_NAME"]], "add_tsid_column() (in module merlion.spark.dataset)": [[12, "merlion.spark.dataset.add_tsid_column"]], "anomaly() (in module merlion.spark.pandas_udf)": [[12, "merlion.spark.pandas_udf.anomaly"]], "create_hier_dataset() (in module merlion.spark.dataset)": [[12, "merlion.spark.dataset.create_hier_dataset"]], "forecast() (in module merlion.spark.pandas_udf)": [[12, "merlion.spark.pandas_udf.forecast"]], "merlion.spark": [[12, "module-merlion.spark"]], "merlion.spark.dataset": [[12, "module-merlion.spark.dataset"]], "merlion.spark.pandas_udf": [[12, "module-merlion.spark.pandas_udf"]], "read_dataset() (in module merlion.spark.dataset)": [[12, "merlion.spark.dataset.read_dataset"]], "reconciliation() (in module merlion.spark.pandas_udf)": [[12, "merlion.spark.pandas_udf.reconciliation"]], "write_dataset() (in module merlion.spark.dataset)": [[12, "merlion.spark.dataset.write_dataset"]], "absval (class in merlion.transform.normalize)": [[13, "merlion.transform.normalize.AbsVal"]], "anomalize (class in merlion.transform.anomalize)": [[13, "merlion.transform.anomalize.Anomalize"]], "boxcoxtransform (class in merlion.transform.normalize)": [[13, "merlion.transform.normalize.BoxCoxTransform"]], "differencetransform (class in merlion.transform.moving_average)": [[13, "merlion.transform.moving_average.DifferenceTransform"]], "exponentialmovingaverage (class in merlion.transform.moving_average)": [[13, "merlion.transform.moving_average.ExponentialMovingAverage"]], "identity (class in merlion.transform.base)": [[13, "merlion.transform.base.Identity"]], "invertibletransformbase (class in merlion.transform.base)": [[13, "merlion.transform.base.InvertibleTransformBase"]], "lagtransform (class in merlion.transform.moving_average)": [[13, "merlion.transform.moving_average.LagTransform"]], "levelshift (class in merlion.transform.anomalize)": [[13, "merlion.transform.anomalize.LevelShift"]], "lowerupperclip (class in merlion.transform.bound)": [[13, "merlion.transform.bound.LowerUpperClip"]], "meanvarnormalize (class in merlion.transform.normalize)": [[13, "merlion.transform.normalize.MeanVarNormalize"]], "minmaxnormalize (class in merlion.transform.normalize)": [[13, "merlion.transform.normalize.MinMaxNormalize"]], "movingaverage (class in merlion.transform.moving_average)": [[13, "merlion.transform.moving_average.MovingAverage"]], "movingpercentile (class in merlion.transform.moving_average)": [[13, "merlion.transform.moving_average.MovingPercentile"]], "rescale (class in merlion.transform.normalize)": [[13, "merlion.transform.normalize.Rescale"]], "shingle (class in merlion.transform.resample)": [[13, "merlion.transform.resample.Shingle"]], "shock (class in merlion.transform.anomalize)": [[13, "merlion.transform.anomalize.Shock"]], "temporalresample (class in merlion.transform.resample)": [[13, "merlion.transform.resample.TemporalResample"]], "transformbase (class in merlion.transform.base)": [[13, "merlion.transform.base.TransformBase"]], "transformfactory (class in merlion.transform.factory)": [[13, "merlion.transform.factory.TransformFactory"]], "transformsequence (class in merlion.transform.sequence)": [[13, "merlion.transform.sequence.TransformSequence"]], "transformstack (class in merlion.transform.sequence)": [[13, "merlion.transform.sequence.TransformStack"]], "trendchange (class in merlion.transform.anomalize)": [[13, "merlion.transform.anomalize.TrendChange"]], "_invert() (merlion.transform.base.invertibletransformbase method)": [[13, "merlion.transform.base.InvertibleTransformBase._invert"]], "_invert() (merlion.transform.base.transformbase method)": [[13, "merlion.transform.base.TransformBase._invert"]], "aggregation_policy (merlion.transform.resample.temporalresample property)": [[13, "merlion.transform.resample.TemporalResample.aggregation_policy"]], "anom_width_range (merlion.transform.anomalize.shock property)": [[13, "merlion.transform.anomalize.Shock.anom_width_range"]], "append() (merlion.transform.sequence.transformsequence method)": [[13, "merlion.transform.sequence.TransformSequence.append"]], "compute_lag() (merlion.transform.moving_average.lagtransform method)": [[13, "merlion.transform.moving_average.LagTransform.compute_lag"]], "create() (merlion.transform.factory.transformfactory class method)": [[13, "merlion.transform.factory.TransformFactory.create"]], "from_dict() (merlion.transform.base.transformbase class method)": [[13, "merlion.transform.base.TransformBase.from_dict"]], "from_dict() (merlion.transform.sequence.transformsequence class method)": [[13, "merlion.transform.sequence.TransformSequence.from_dict"]], "get_transform_class() (merlion.transform.factory.transformfactory class method)": [[13, "merlion.transform.factory.TransformFactory.get_transform_class"]], "granularity (merlion.transform.resample.temporalresample property)": [[13, "merlion.transform.resample.TemporalResample.granularity"]], "identity_inversion (merlion.transform.base.identity property)": [[13, "merlion.transform.base.Identity.identity_inversion"]], "identity_inversion (merlion.transform.base.invertibletransformbase property)": [[13, "merlion.transform.base.InvertibleTransformBase.identity_inversion"]], "identity_inversion (merlion.transform.base.transformbase property)": [[13, "merlion.transform.base.TransformBase.identity_inversion"]], "identity_inversion (merlion.transform.normalize.absval property)": [[13, "merlion.transform.normalize.AbsVal.identity_inversion"]], "identity_inversion (merlion.transform.sequence.transformsequence property)": [[13, "merlion.transform.sequence.TransformSequence.identity_inversion"]], "invert() (merlion.transform.base.transformbase method)": [[13, "merlion.transform.base.TransformBase.invert"]], "invert() (merlion.transform.sequence.transformsequence method)": [[13, "merlion.transform.sequence.TransformSequence.invert"]], "invert() (merlion.transform.sequence.transformstack method)": [[13, "merlion.transform.sequence.TransformStack.invert"]], "is_trained (merlion.transform.anomalize.anomalize property)": [[13, "merlion.transform.anomalize.Anomalize.is_trained"]], "is_trained (merlion.transform.normalize.rescale property)": [[13, "merlion.transform.normalize.Rescale.is_trained"]], "merlion.transform": [[13, "module-merlion.transform"]], "merlion.transform.anomalize": [[13, "module-merlion.transform.anomalize"]], "merlion.transform.base": [[13, "module-merlion.transform.base"]], "merlion.transform.bound": [[13, "module-merlion.transform.bound"]], "merlion.transform.factory": [[13, "module-merlion.transform.factory"]], "merlion.transform.moving_average": [[13, "module-merlion.transform.moving_average"]], "merlion.transform.normalize": [[13, "module-merlion.transform.normalize"]], "merlion.transform.resample": [[13, "module-merlion.transform.resample"]], "merlion.transform.sequence": [[13, "module-merlion.transform.sequence"]], "missing_value_policy (merlion.transform.resample.temporalresample property)": [[13, "merlion.transform.resample.TemporalResample.missing_value_policy"]], "natural_bounds (merlion.transform.anomalize.anomalize property)": [[13, "merlion.transform.anomalize.Anomalize.natural_bounds"]], "proper_inversion (merlion.transform.base.invertibletransformbase property)": [[13, "merlion.transform.base.InvertibleTransformBase.proper_inversion"]], "proper_inversion (merlion.transform.base.transformbase property)": [[13, "merlion.transform.base.TransformBase.proper_inversion"]], "proper_inversion (merlion.transform.resample.temporalresample property)": [[13, "merlion.transform.resample.TemporalResample.proper_inversion"]], "proper_inversion (merlion.transform.sequence.transformsequence property)": [[13, "merlion.transform.sequence.TransformSequence.proper_inversion"]], "proper_inversion (merlion.transform.sequence.transformstack property)": [[13, "merlion.transform.sequence.TransformStack.proper_inversion"]], "random_anom_width() (merlion.transform.anomalize.shock method)": [[13, "merlion.transform.anomalize.Shock.random_anom_width"]], "random_is_anom() (merlion.transform.anomalize.anomalize method)": [[13, "merlion.transform.anomalize.Anomalize.random_is_anom"]], "random_is_anom() (merlion.transform.anomalize.shock method)": [[13, "merlion.transform.anomalize.Shock.random_is_anom"]], "random_scale() (merlion.transform.anomalize.trendchange method)": [[13, "merlion.transform.anomalize.TrendChange.random_scale"]], "random_sd_units() (merlion.transform.anomalize.shock method)": [[13, "merlion.transform.anomalize.Shock.random_sd_units"]], "requires_inversion_state (merlion.transform.base.identity property)": [[13, "merlion.transform.base.Identity.requires_inversion_state"]], "requires_inversion_state (merlion.transform.base.transformbase property)": [[13, "merlion.transform.base.TransformBase.requires_inversion_state"]], "requires_inversion_state (merlion.transform.bound.lowerupperclip property)": [[13, "merlion.transform.bound.LowerUpperClip.requires_inversion_state"]], "requires_inversion_state (merlion.transform.moving_average.exponentialmovingaverage property)": [[13, "merlion.transform.moving_average.ExponentialMovingAverage.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.absval property)": [[13, "merlion.transform.normalize.AbsVal.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.boxcoxtransform property)": [[13, "merlion.transform.normalize.BoxCoxTransform.requires_inversion_state"]], "requires_inversion_state (merlion.transform.normalize.rescale property)": [[13, "merlion.transform.normalize.Rescale.requires_inversion_state"]], "requires_inversion_state (merlion.transform.resample.temporalresample property)": [[13, "merlion.transform.resample.TemporalResample.requires_inversion_state"]], "requires_inversion_state (merlion.transform.sequence.transformsequence property)": [[13, "merlion.transform.sequence.TransformSequence.requires_inversion_state"]], "requires_inversion_state (merlion.transform.sequence.transformstack property)": [[13, "merlion.transform.sequence.TransformStack.requires_inversion_state"]], "scale_range (merlion.transform.anomalize.trendchange property)": [[13, "merlion.transform.anomalize.TrendChange.scale_range"]], "sd_range (merlion.transform.anomalize.shock property)": [[13, "merlion.transform.anomalize.Shock.sd_range"]], "to_dict() (merlion.transform.base.transformbase method)": [[13, "merlion.transform.base.TransformBase.to_dict"]], "to_dict() (merlion.transform.sequence.transformsequence method)": [[13, "merlion.transform.sequence.TransformSequence.to_dict"]], "train() (merlion.transform.anomalize.shock method)": [[13, "merlion.transform.anomalize.Shock.train"]], "train() (merlion.transform.anomalize.trendchange method)": [[13, "merlion.transform.anomalize.TrendChange.train"]], "train() (merlion.transform.base.identity method)": [[13, "merlion.transform.base.Identity.train"]], "train() (merlion.transform.base.transformbase method)": [[13, "merlion.transform.base.TransformBase.train"]], "train() (merlion.transform.bound.lowerupperclip method)": [[13, "merlion.transform.bound.LowerUpperClip.train"]], "train() (merlion.transform.moving_average.differencetransform method)": [[13, "merlion.transform.moving_average.DifferenceTransform.train"]], "train() (merlion.transform.moving_average.exponentialmovingaverage method)": [[13, "merlion.transform.moving_average.ExponentialMovingAverage.train"]], "train() (merlion.transform.moving_average.lagtransform method)": [[13, "merlion.transform.moving_average.LagTransform.train"]], "train() (merlion.transform.moving_average.movingaverage method)": [[13, "merlion.transform.moving_average.MovingAverage.train"]], "train() (merlion.transform.moving_average.movingpercentile method)": [[13, "merlion.transform.moving_average.MovingPercentile.train"]], "train() (merlion.transform.normalize.absval method)": [[13, "merlion.transform.normalize.AbsVal.train"]], "train() (merlion.transform.normalize.boxcoxtransform method)": [[13, "merlion.transform.normalize.BoxCoxTransform.train"]], "train() (merlion.transform.normalize.meanvarnormalize method)": [[13, "merlion.transform.normalize.MeanVarNormalize.train"]], "train() (merlion.transform.normalize.minmaxnormalize method)": [[13, "merlion.transform.normalize.MinMaxNormalize.train"]], "train() (merlion.transform.normalize.rescale method)": [[13, "merlion.transform.normalize.Rescale.train"]], "train() (merlion.transform.resample.shingle method)": [[13, "merlion.transform.resample.Shingle.train"]], "train() (merlion.transform.resample.temporalresample method)": [[13, "merlion.transform.resample.TemporalResample.train"]], "train() (merlion.transform.sequence.transformsequence method)": [[13, "merlion.transform.sequence.TransformSequence.train"]], "train() (merlion.transform.sequence.transformstack method)": [[13, "merlion.transform.sequence.TransformStack.train"]], "aggregationpolicy (class in merlion.utils.resample)": [[14, "merlion.utils.resample.AggregationPolicy"]], "alignpolicy (class in merlion.utils.resample)": [[14, "merlion.utils.resample.AlignPolicy"]], "bfill (merlion.utils.resample.missingvaluepolicy attribute)": [[14, "merlion.utils.resample.MissingValuePolicy.BFill"]], "bayesianlinreg (class in merlion.utils.conj_priors)": [[14, "merlion.utils.conj_priors.BayesianLinReg"]], "bayesianmvlinreg (class in merlion.utils.conj_priors)": [[14, "merlion.utils.conj_priors.BayesianMVLinReg"]], "betabernoulli (class in merlion.utils.conj_priors)": [[14, "merlion.utils.conj_priors.BetaBernoulli"]], "conjprior (class in merlion.utils.conj_priors)": [[14, "merlion.utils.conj_priors.ConjPrior"]], "exponentialmovingaverage (class in merlion.utils.istat)": [[14, "merlion.utils.istat.ExponentialMovingAverage"]], "ffill (merlion.utils.resample.missingvaluepolicy attribute)": [[14, "merlion.utils.resample.MissingValuePolicy.FFill"]], "first (merlion.utils.resample.aggregationpolicy attribute)": [[14, "merlion.utils.resample.AggregationPolicy.First"]], "fixedgranularity (merlion.utils.resample.alignpolicy attribute)": [[14, "merlion.utils.resample.AlignPolicy.FixedGranularity"]], "fixedreference (merlion.utils.resample.alignpolicy attribute)": [[14, "merlion.utils.resample.AlignPolicy.FixedReference"]], "generatorcomposer (class in merlion.utils.ts_generator)": [[14, "merlion.utils.ts_generator.GeneratorComposer"]], "generatorconcatenator (class in merlion.utils.ts_generator)": [[14, "merlion.utils.ts_generator.GeneratorConcatenator"]], "istat (class in merlion.utils.istat)": [[14, "merlion.utils.istat.IStat"]], "innerjoin (merlion.utils.resample.alignpolicy attribute)": [[14, "merlion.utils.resample.AlignPolicy.InnerJoin"]], "interpolate (merlion.utils.resample.missingvaluepolicy attribute)": [[14, "merlion.utils.resample.MissingValuePolicy.Interpolate"]], "last (merlion.utils.resample.aggregationpolicy attribute)": [[14, "merlion.utils.resample.AggregationPolicy.Last"]], "mvnorminvwishart (class in merlion.utils.conj_priors)": [[14, "merlion.utils.conj_priors.MVNormInvWishart"]], "max (merlion.utils.resample.aggregationpolicy attribute)": [[14, "merlion.utils.resample.AggregationPolicy.Max"]], "mean (class in merlion.utils.istat)": [[14, "merlion.utils.istat.Mean"]], "mean (merlion.utils.resample.aggregationpolicy attribute)": [[14, "merlion.utils.resample.AggregationPolicy.Mean"]], "median (merlion.utils.resample.aggregationpolicy attribute)": [[14, "merlion.utils.resample.AggregationPolicy.Median"]], "min (merlion.utils.resample.aggregationpolicy attribute)": [[14, "merlion.utils.resample.AggregationPolicy.Min"]], "missingvaluepolicy (class in merlion.utils.resample)": [[14, "merlion.utils.resample.MissingValuePolicy"]], "nearest (merlion.utils.resample.missingvaluepolicy attribute)": [[14, "merlion.utils.resample.MissingValuePolicy.Nearest"]], "norminvgamma (class in merlion.utils.conj_priors)": [[14, "merlion.utils.conj_priors.NormInvGamma"]], "outerjoin (merlion.utils.resample.alignpolicy attribute)": [[14, "merlion.utils.resample.AlignPolicy.OuterJoin"]], "recencyweightedvariance (class in merlion.utils.istat)": [[14, "merlion.utils.istat.RecencyWeightedVariance"]], "scalarconjprior (class in merlion.utils.conj_priors)": [[14, "merlion.utils.conj_priors.ScalarConjPrior"]], "sigma_posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[14, "merlion.utils.conj_priors.MVNormInvWishart.Sigma_posterior"]], "sum (merlion.utils.resample.aggregationpolicy attribute)": [[14, "merlion.utils.resample.AggregationPolicy.Sum"]], "timeseries (class in merlion.utils.time_series)": [[14, "merlion.utils.time_series.TimeSeries"]], "timeseriesgenerator (class in merlion.utils.ts_generator)": [[14, "merlion.utils.ts_generator.TimeSeriesGenerator"]], "univariatetimeseries (class in merlion.utils.time_series)": [[14, "merlion.utils.time_series.UnivariateTimeSeries"]], "variance (class in merlion.utils.istat)": [[14, "merlion.utils.istat.Variance"]], "zfill (merlion.utils.resample.missingvaluepolicy attribute)": [[14, "merlion.utils.resample.MissingValuePolicy.ZFill"]], "__getitem__() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.__getitem__"]], "__getitem__() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.__getitem__"]], "__iter__() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.__iter__"]], "__iter__() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.__iter__"]], "add() (merlion.utils.istat.istat method)": [[14, "merlion.utils.istat.IStat.add"]], "add() (merlion.utils.istat.mean method)": [[14, "merlion.utils.istat.Mean.add"]], "add() (merlion.utils.istat.variance method)": [[14, "merlion.utils.istat.Variance.add"]], "add_batch() (merlion.utils.istat.istat method)": [[14, "merlion.utils.istat.IStat.add_batch"]], "align() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.align"]], "assert_equal_timedeltas() (in module merlion.utils.time_series)": [[14, "merlion.utils.time_series.assert_equal_timedeltas"]], "bisect() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.bisect"]], "bisect() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.bisect"]], "concat() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.concat"]], "concat() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.concat"]], "copy() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.copy"]], "corrected_value (merlion.utils.istat.variance property)": [[14, "merlion.utils.istat.Variance.corrected_value"]], "csv_to_time_series() (in module merlion.utils.data_io)": [[14, "merlion.utils.data_io.csv_to_time_series"]], "data_io_decorator() (in module merlion.utils.data_io)": [[14, "merlion.utils.data_io.data_io_decorator"]], "df_to_time_series() (in module merlion.utils.data_io)": [[14, "merlion.utils.data_io.df_to_time_series"]], "dim (merlion.utils.time_series.timeseries property)": [[14, "merlion.utils.time_series.TimeSeries.dim"]], "drop() (merlion.utils.istat.exponentialmovingaverage method)": [[14, "merlion.utils.istat.ExponentialMovingAverage.drop"]], "drop() (merlion.utils.istat.istat method)": [[14, "merlion.utils.istat.IStat.drop"]], "drop() (merlion.utils.istat.mean method)": [[14, "merlion.utils.istat.Mean.drop"]], "drop() (merlion.utils.istat.recencyweightedvariance method)": [[14, "merlion.utils.istat.RecencyWeightedVariance.drop"]], "drop() (merlion.utils.istat.variance method)": [[14, "merlion.utils.istat.Variance.drop"]], "drop_batch() (merlion.utils.istat.istat method)": [[14, "merlion.utils.istat.IStat.drop_batch"]], "empty() (merlion.utils.time_series.univariatetimeseries class method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.empty"]], "forecast() (merlion.utils.conj_priors.bayesianlinreg method)": [[14, "merlion.utils.conj_priors.BayesianLinReg.forecast"]], "forecast() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[14, "merlion.utils.conj_priors.BayesianMVLinReg.forecast"]], "forecast() (merlion.utils.conj_priors.betabernoulli method)": [[14, "merlion.utils.conj_priors.BetaBernoulli.forecast"]], "forecast() (merlion.utils.conj_priors.conjprior method)": [[14, "merlion.utils.conj_priors.ConjPrior.forecast"]], "forecast() (merlion.utils.conj_priors.mvnorminvwishart method)": [[14, "merlion.utils.conj_priors.MVNormInvWishart.forecast"]], "forecast() (merlion.utils.conj_priors.norminvgamma method)": [[14, "merlion.utils.conj_priors.NormInvGamma.forecast"]], "from_dict() (merlion.utils.conj_priors.conjprior class method)": [[14, "merlion.utils.conj_priors.ConjPrior.from_dict"]], "from_dict() (merlion.utils.time_series.univariatetimeseries class method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.from_dict"]], "from_pd() (merlion.utils.time_series.timeseries class method)": [[14, "merlion.utils.time_series.TimeSeries.from_pd"]], "from_pd() (merlion.utils.time_series.univariatetimeseries class method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.from_pd"]], "from_ts_list() (merlion.utils.time_series.timeseries class method)": [[14, "merlion.utils.time_series.TimeSeries.from_ts_list"]], "generate() (merlion.utils.ts_generator.timeseriesgenerator method)": [[14, "merlion.utils.ts_generator.TimeSeriesGenerator.generate"]], "generators (merlion.utils.ts_generator.generatorcomposer property)": [[14, "merlion.utils.ts_generator.GeneratorComposer.generators"]], "generators (merlion.utils.ts_generator.generatorconcatenator property)": [[14, "merlion.utils.ts_generator.GeneratorConcatenator.generators"]], "get_gcd_timedelta() (in module merlion.utils.resample)": [[14, "merlion.utils.resample.get_gcd_timedelta"]], "get_time_series_values() (merlion.utils.conj_priors.conjprior static method)": [[14, "merlion.utils.conj_priors.ConjPrior.get_time_series_values"]], "get_time_series_values() (merlion.utils.conj_priors.scalarconjprior static method)": [[14, "merlion.utils.conj_priors.ScalarConjPrior.get_time_series_values"]], "granularity_str_to_seconds() (in module merlion.utils.resample)": [[14, "merlion.utils.resample.granularity_str_to_seconds"]], "infer_granularity() (in module merlion.utils.resample)": [[14, "merlion.utils.resample.infer_granularity"]], "is_aligned (merlion.utils.time_series.timeseries property)": [[14, "merlion.utils.time_series.TimeSeries.is_aligned"]], "is_empty() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.is_empty"]], "is_empty() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.is_empty"]], "items() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.items"]], "mean_class (merlion.utils.istat.recencyweightedvariance attribute)": [[14, "merlion.utils.istat.RecencyWeightedVariance.mean_class"]], "mean_class (merlion.utils.istat.variance attribute)": [[14, "merlion.utils.istat.Variance.mean_class"]], "merlion.utils": [[14, "module-merlion.utils"]], "merlion.utils.conj_priors": [[14, "module-merlion.utils.conj_priors"]], "merlion.utils.data_io": [[14, "module-merlion.utils.data_io"]], "merlion.utils.hts": [[14, "module-merlion.utils.hts"]], "merlion.utils.istat": [[14, "module-merlion.utils.istat"]], "merlion.utils.resample": [[14, "module-merlion.utils.resample"]], "merlion.utils.time_series": [[14, "module-merlion.utils.time_series"]], "merlion.utils.ts_generator": [[14, "module-merlion.utils.ts_generator"]], "mint_reconciliation() (in module merlion.utils.hts)": [[14, "merlion.utils.hts.minT_reconciliation"]], "mu_posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[14, "merlion.utils.conj_priors.MVNormInvWishart.mu_posterior"]], "mu_posterior() (merlion.utils.conj_priors.norminvgamma method)": [[14, "merlion.utils.conj_priors.NormInvGamma.mu_posterior"]], "n (merlion.utils.istat.istat property)": [[14, "merlion.utils.istat.IStat.n"]], "n (merlion.utils.ts_generator.timeseriesgenerator property)": [[14, "merlion.utils.ts_generator.TimeSeriesGenerator.n"]], "names (merlion.utils.time_series.timeseries property)": [[14, "merlion.utils.time_series.TimeSeries.names"]], "np_time_stamps (merlion.utils.time_series.timeseries property)": [[14, "merlion.utils.time_series.TimeSeries.np_time_stamps"]], "np_time_stamps (merlion.utils.time_series.univariatetimeseries property)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.np_time_stamps"]], "np_values (merlion.utils.time_series.univariatetimeseries property)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.np_values"]], "posterior() (merlion.utils.conj_priors.bayesianlinreg method)": [[14, "merlion.utils.conj_priors.BayesianLinReg.posterior"]], "posterior() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[14, "merlion.utils.conj_priors.BayesianMVLinReg.posterior"]], "posterior() (merlion.utils.conj_priors.betabernoulli method)": [[14, "merlion.utils.conj_priors.BetaBernoulli.posterior"]], "posterior() (merlion.utils.conj_priors.conjprior method)": [[14, "merlion.utils.conj_priors.ConjPrior.posterior"]], "posterior() (merlion.utils.conj_priors.mvnorminvwishart method)": [[14, "merlion.utils.conj_priors.MVNormInvWishart.posterior"]], "posterior() (merlion.utils.conj_priors.norminvgamma method)": [[14, "merlion.utils.conj_priors.NormInvGamma.posterior"]], "posterior_explicit() (merlion.utils.conj_priors.bayesianlinreg method)": [[14, "merlion.utils.conj_priors.BayesianLinReg.posterior_explicit"]], "posterior_explicit() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[14, "merlion.utils.conj_priors.BayesianMVLinReg.posterior_explicit"]], "process_time_series() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[14, "merlion.utils.conj_priors.BayesianMVLinReg.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.conjprior method)": [[14, "merlion.utils.conj_priors.ConjPrior.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.mvnorminvwishart method)": [[14, "merlion.utils.conj_priors.MVNormInvWishart.process_time_series"]], "process_time_series() (merlion.utils.conj_priors.scalarconjprior method)": [[14, "merlion.utils.conj_priors.ScalarConjPrior.process_time_series"]], "recency_weight (merlion.utils.istat.exponentialmovingaverage property)": [[14, "merlion.utils.istat.ExponentialMovingAverage.recency_weight"]], "recency_weight (merlion.utils.istat.recencyweightedvariance property)": [[14, "merlion.utils.istat.RecencyWeightedVariance.recency_weight"]], "reindex_df() (in module merlion.utils.resample)": [[14, "merlion.utils.resample.reindex_df"]], "rename() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.rename"]], "sd (merlion.utils.istat.variance property)": [[14, "merlion.utils.istat.Variance.sd"]], "se (merlion.utils.istat.variance property)": [[14, "merlion.utils.istat.Variance.se"]], "shape (merlion.utils.time_series.timeseries property)": [[14, "merlion.utils.time_series.TimeSeries.shape"]], "sigma2_posterior() (merlion.utils.conj_priors.norminvgamma method)": [[14, "merlion.utils.conj_priors.NormInvGamma.sigma2_posterior"]], "squeeze() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.squeeze"]], "step (merlion.utils.ts_generator.timeseriesgenerator property)": [[14, "merlion.utils.ts_generator.TimeSeriesGenerator.step"]], "t0 (merlion.utils.time_series.timeseries property)": [[14, "merlion.utils.time_series.TimeSeries.t0"]], "t0 (merlion.utils.time_series.univariatetimeseries property)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.t0"]], "tf (merlion.utils.time_series.timeseries property)": [[14, "merlion.utils.time_series.TimeSeries.tf"]], "tf (merlion.utils.time_series.univariatetimeseries property)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.tf"]], "theta_posterior() (merlion.utils.conj_priors.betabernoulli method)": [[14, "merlion.utils.conj_priors.BetaBernoulli.theta_posterior"]], "time_stamps (merlion.utils.time_series.timeseries property)": [[14, "merlion.utils.time_series.TimeSeries.time_stamps"]], "time_stamps (merlion.utils.time_series.univariatetimeseries property)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.time_stamps"]], "to_csv() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.to_csv"]], "to_dict() (merlion.utils.conj_priors.conjprior method)": [[14, "merlion.utils.conj_priors.ConjPrior.to_dict"]], "to_dict() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.to_dict"]], "to_pd() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.to_pd"]], "to_pd() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.to_pd"]], "to_pd_datetime() (in module merlion.utils.resample)": [[14, "merlion.utils.resample.to_pd_datetime"]], "to_timestamp() (in module merlion.utils.resample)": [[14, "merlion.utils.resample.to_timestamp"]], "to_ts() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.to_ts"]], "true_value (merlion.utils.istat.variance property)": [[14, "merlion.utils.istat.Variance.true_value"]], "update() (merlion.utils.conj_priors.bayesianlinreg method)": [[14, "merlion.utils.conj_priors.BayesianLinReg.update"]], "update() (merlion.utils.conj_priors.bayesianmvlinreg method)": [[14, "merlion.utils.conj_priors.BayesianMVLinReg.update"]], "update() (merlion.utils.conj_priors.betabernoulli method)": [[14, "merlion.utils.conj_priors.BetaBernoulli.update"]], "update() (merlion.utils.conj_priors.conjprior method)": [[14, "merlion.utils.conj_priors.ConjPrior.update"]], "update() (merlion.utils.conj_priors.mvnorminvwishart method)": [[14, "merlion.utils.conj_priors.MVNormInvWishart.update"]], "update() (merlion.utils.conj_priors.norminvgamma method)": [[14, "merlion.utils.conj_priors.NormInvGamma.update"]], "value (merlion.utils.istat.exponentialmovingaverage property)": [[14, "merlion.utils.istat.ExponentialMovingAverage.value"]], "value (merlion.utils.istat.istat property)": [[14, "merlion.utils.istat.IStat.value"]], "value (merlion.utils.istat.mean property)": [[14, "merlion.utils.istat.Mean.value"]], "value (merlion.utils.istat.variance property)": [[14, "merlion.utils.istat.Variance.value"]], "values (merlion.utils.time_series.univariatetimeseries property)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.values"]], "window() (merlion.utils.time_series.timeseries method)": [[14, "merlion.utils.time_series.TimeSeries.window"]], "window() (merlion.utils.time_series.univariatetimeseries method)": [[14, "merlion.utils.time_series.UnivariateTimeSeries.window"]], "x0 (merlion.utils.ts_generator.timeseriesgenerator property)": [[14, "merlion.utils.ts_generator.TimeSeriesGenerator.x0"]], "y() (merlion.utils.ts_generator.generatorconcatenator method)": [[14, "merlion.utils.ts_generator.GeneratorConcatenator.y"]], "y() (merlion.utils.ts_generator.timeseriesgenerator method)": [[14, "merlion.utils.ts_generator.TimeSeriesGenerator.y"]], "basedataset (class in ts_datasets.base)": [[15, "ts_datasets.base.BaseDataset"]], "describe() (ts_datasets.base.basedataset method)": [[15, "ts_datasets.base.BaseDataset.describe"]], "metadata (ts_datasets.base.basedataset attribute)": [[15, "ts_datasets.base.BaseDataset.metadata"]], "time_series (ts_datasets.base.basedataset attribute)": [[15, "ts_datasets.base.BaseDataset.time_series"]], "ts_datasets": [[15, "module-ts_datasets"]], "ts_datasets.base": [[15, "module-ts_datasets.base"]], "customanomalydataset (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.CustomAnomalyDataset"]], "iopscompetition (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.IOpsCompetition"]], "msl (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.MSL"]], "nab (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.NAB"]], "smap (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.SMAP"]], "smd (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.SMD"]], "synthetic (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.Synthetic"]], "tsadbasedataset (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.TSADBaseDataset"]], "ucr (class in ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.UCR"]], "anomaly_subsets (ts_datasets.anomaly.synthetic attribute)": [[16, "ts_datasets.anomaly.Synthetic.anomaly_subsets"]], "base_ts_subsets (ts_datasets.anomaly.synthetic attribute)": [[16, "ts_datasets.anomaly.Synthetic.base_ts_subsets"]], "check_ts_for_metadata() (ts_datasets.anomaly.customanomalydataset method)": [[16, "ts_datasets.anomaly.CustomAnomalyDataset.check_ts_for_metadata"]], "describe() (ts_datasets.anomaly.tsadbasedataset method)": [[16, "ts_datasets.anomaly.TSADBaseDataset.describe"]], "download() (ts_datasets.anomaly.nab method)": [[16, "ts_datasets.anomaly.NAB.download"]], "download() (ts_datasets.anomaly.ucr method)": [[16, "ts_datasets.anomaly.UCR.download"]], "filename (ts_datasets.anomaly.smd attribute)": [[16, "ts_datasets.anomaly.SMD.filename"]], "get_dataset() (in module ts_datasets.anomaly)": [[16, "ts_datasets.anomaly.get_dataset"]], "load_labels() (ts_datasets.anomaly.nab static method)": [[16, "ts_datasets.anomaly.NAB.load_labels"]], "max_lag_sec (ts_datasets.anomaly.iopscompetition property)": [[16, "ts_datasets.anomaly.IOpsCompetition.max_lag_sec"]], "max_lag_sec (ts_datasets.anomaly.tsadbasedataset property)": [[16, "ts_datasets.anomaly.TSADBaseDataset.max_lag_sec"]], "max_lead_sec (ts_datasets.anomaly.nab property)": [[16, "ts_datasets.anomaly.NAB.max_lead_sec"]], "max_lead_sec (ts_datasets.anomaly.tsadbasedataset property)": [[16, "ts_datasets.anomaly.TSADBaseDataset.max_lead_sec"]], "metadata_cols (ts_datasets.anomaly.customanomalydataset property)": [[16, "ts_datasets.anomaly.CustomAnomalyDataset.metadata_cols"]], "ts_datasets.anomaly": [[16, "module-ts_datasets.anomaly"]], "url (ts_datasets.anomaly.msl attribute)": [[16, "ts_datasets.anomaly.MSL.url"]], "url (ts_datasets.anomaly.smap attribute)": [[16, "ts_datasets.anomaly.SMAP.url"]], "url (ts_datasets.anomaly.smd attribute)": [[16, "ts_datasets.anomaly.SMD.url"]], "valid_subsets (ts_datasets.anomaly.nab attribute)": [[16, "ts_datasets.anomaly.NAB.valid_subsets"]], "valid_subsets (ts_datasets.anomaly.smd attribute)": [[16, "ts_datasets.anomaly.SMD.valid_subsets"]], "valid_subsets (ts_datasets.anomaly.synthetic attribute)": [[16, "ts_datasets.anomaly.Synthetic.valid_subsets"]], "customdataset (class in ts_datasets.forecast)": [[17, "ts_datasets.forecast.CustomDataset"]], "energypower (class in ts_datasets.forecast)": [[17, "ts_datasets.forecast.EnergyPower"]], "m4 (class in ts_datasets.forecast)": [[17, "ts_datasets.forecast.M4"]], "seattletrail (class in ts_datasets.forecast)": [[17, "ts_datasets.forecast.SeattleTrail"]], "solarplant (class in ts_datasets.forecast)": [[17, "ts_datasets.forecast.SolarPlant"]], "check_ts_for_metadata() (ts_datasets.forecast.customdataset method)": [[17, "ts_datasets.forecast.CustomDataset.check_ts_for_metadata"]], "get_dataset() (in module ts_datasets.forecast)": [[17, "ts_datasets.forecast.get_dataset"]], "metadata_cols (ts_datasets.forecast.customdataset property)": [[17, "ts_datasets.forecast.CustomDataset.metadata_cols"]], "ts_datasets.forecast": [[17, "module-ts_datasets.forecast"]], "url (ts_datasets.forecast.m4 attribute)": [[17, "ts_datasets.forecast.M4.url"]], "valid_subsets (ts_datasets.forecast.m4 attribute)": [[17, "ts_datasets.forecast.M4.valid_subsets"]]}})